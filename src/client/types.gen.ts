// This file is auto-generated by @hey-api/openapi-ts

export type ApiAccountDocumentUpdateRequestDto = {
  documentFile: File;
};

/**
 * File
 */
// export type File = Blob | File;

export type ApiAccountDocumentGetResponseDto = {
  /**
   * Unique document identifier in Asaas
   */
  id?: string;
  status?: ApiAccountDocumentGetResponseCustomerDocumentStatus;
};

/**
 * Document approval status
 */
export type ApiAccountDocumentGetResponseCustomerDocumentStatus =
  | "NOT_SENT"
  | "PENDING"
  | "APPROVED"
  | "REJECTED";

/**
 * Document approval status
 */
export const ApiAccountDocumentGetResponseCustomerDocumentStatus = {
  NOT_SENT: "NOT_SENT",
  PENDING: "PENDING",
  APPROVED: "APPROVED",
  REJECTED: "REJECTED",
} as const;

export type ApiAccountDocumentDeleteResponseDto = {
  /**
   * Indicates whether the document was removed
   */
  deleted?: boolean;
  /**
   * Unique document identifier in Asaas
   */
  id?: string;
};

export type ApiAccountDocumentShowResponseDto = {
  /**
   * Reason why account approval was rejected
   */
  rejectReasons?: string;
  /**
   * List of objects
   */
  data?: Array<{
    /**
     * Unique document group identifier in Asaas
     */
    id?: string;
    status?: ApiAccountDocumentGroupResponseCustomerDocumentStatus;
    type?: ApiAccountDocumentGroupResponseCustomerDocumentType;
    /**
     * Document group title
     */
    title?: string;
    /**
     * Description
     */
    description?: string;
    responsible?: ApiAccountDocumentGroupResponsibleResponseDto;
    /**
     * URL for sending documents
     */
    onboardingUrl?: string;
    /**
     * Expiration date of the URL for sending documents
     */
    onboardingUrlExpirationDate?: Date;
    /**
     * Documents that have already been sent with their respective identifiers
     */
    documents?: Array<ApiAccountDocumentGetResponseDto>;
  }>;
};

export type ApiAccountDocumentGroupResponseDto = {
  /**
   * Unique document group identifier in Asaas
   */
  id?: string;
  status?: ApiAccountDocumentGroupResponseCustomerDocumentStatus;
  type?: ApiAccountDocumentGroupResponseCustomerDocumentType;
  /**
   * Document group title
   */
  title?: string;
  /**
   * Description
   */
  description?: string;
  responsible?: ApiAccountDocumentGroupResponsibleResponseDto;
  /**
   * URL for sending documents
   */
  onboardingUrl?: string;
  /**
   * Expiration date of the URL for sending documents
   */
  onboardingUrlExpirationDate?: Date;
  /**
   * Documents that have already been sent with their respective identifiers
   */
  documents?: Array<ApiAccountDocumentGetResponseDto>;
};

/**
 * Document group status
 */
export type ApiAccountDocumentGroupResponseCustomerDocumentStatus =
  | "NOT_SENT"
  | "PENDING"
  | "APPROVED"
  | "REJECTED"
  | "IGNORED";

/**
 * Document group status
 */
export const ApiAccountDocumentGroupResponseCustomerDocumentStatus = {
  NOT_SENT: "NOT_SENT",
  PENDING: "PENDING",
  APPROVED: "APPROVED",
  REJECTED: "REJECTED",
  IGNORED: "IGNORED",
} as const;

/**
 * Type of documents
 */
export type ApiAccountDocumentGroupResponseCustomerDocumentType =
  | "IDENTIFICATION"
  | "SOCIAL_CONTRACT"
  | "ENTREPRENEUR_REQUIREMENT"
  | "MINUTES_OF_ELECTION"
  | "CUSTOM";

/**
 * Type of documents
 */
export const ApiAccountDocumentGroupResponseCustomerDocumentType = {
  IDENTIFICATION: "IDENTIFICATION",
  SOCIAL_CONTRACT: "SOCIAL_CONTRACT",
  ENTREPRENEUR_REQUIREMENT: "ENTREPRENEUR_REQUIREMENT",
  MINUTES_OF_ELECTION: "MINUTES_OF_ELECTION",
  CUSTOM: "CUSTOM",
} as const;

/**
 * Who is responsible for sending these documents
 */
export type ApiAccountDocumentGroupResponsibleResponseDto = {
  /**
   * Responsible name
   */
  name?: string;
  /**
   * Responsible tyoe
   */
  type?:
    | "ALLOW_BANK_ACCOUNT_DEPOSIT_STATEMENT"
    | "ASAAS_ACCOUNT_OWNER_EMANCIPATION_AGE"
    | "ASAAS_ACCOUNT_OWNER"
    | "ASSOCIATION"
    | "BANK_ACCOUNT_OWNER_EMANCIPATION_AGE"
    | "BANK_ACCOUNT_OWNER"
    | "CUSTOM"
    | "DIRECTOR"
    | "INDIVIDUAL_COMPANY"
    | "LIMITED_COMPANY"
    | "MEI"
    | "PARTNER";
};

export type ApiAccountDocumentGroupResponsibleResponseCustomerDocumentGroupType =
  string;

export type ApiAccountDocumentSaveRequestDto = {
  documentFile?: File;
  type?: ApiAccountDocumentSaveRequestCustomerDocumentType;
};

/**
 * Document Type
 */
export type ApiAccountDocumentSaveRequestCustomerDocumentType =
  | "IDENTIFICATION"
  | "SOCIAL_CONTRACT"
  | "ENTREPRENEUR_REQUIREMENT"
  | "MINUTES_OF_ELECTION"
  | "CUSTOM";

/**
 * Document Type
 */
export const ApiAccountDocumentSaveRequestCustomerDocumentType = {
  IDENTIFICATION: "IDENTIFICATION",
  SOCIAL_CONTRACT: "SOCIAL_CONTRACT",
  ENTREPRENEUR_REQUIREMENT: "ENTREPRENEUR_REQUIREMENT",
  MINUTES_OF_ELECTION: "MINUTES_OF_ELECTION",
  CUSTOM: "CUSTOM",
} as const;

export type ApiBillCancelRequestDto = {
  [key: string]: unknown;
};

export type ApiBillGetResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Unique bill payment identifier in Asaas
   */
  id?: string;
  status?: ApiBillGetResponseBillStatus;
  /**
   * Amount to be paid
   */
  value?: number;
  /**
   * Discount attributed to payment
   */
  discount?: number;
  /**
   * Interest attributed to payment
   */
  interest?: number;
  /**
   * Fine assigned to payment
   */
  fine?: number;
  /**
   * Typeable line of the bill to be paid
   */
  identificationField?: string;
  /**
   * Billing due date
   */
  dueDate?: Date;
  /**
   * Payment scheduling date
   */
  scheduleDate?: Date;
  /**
   * Date on which payment was made
   */
  paymentDate?: Date;
  /**
   * Asaas fee for bill payment
   */
  fee?: number;
  /**
   * Bill Payment Description
   */
  description?: string;
  /**
   * Company/Body issuing the payment
   */
  companyName?: string;
  /**
   * Proof of bill payment
   */
  transactionReceiptUrl?: string;
  /**
   * Whether payment can be canceled
   */
  canBeCancelled?: boolean;
  /**
   * Unique identifier of the bill in your system
   */
  externalReference?: string;
  /**
   * List of reasons for payment failure
   */
  failReasons?: Array<string>;
};

/**
 * Bill payment status
 */
export type ApiBillGetResponseBillStatus =
  | "PENDING"
  | "BANK_PROCESSING"
  | "PAID"
  | "FAILED"
  | "CANCELLED"
  | "REFUNDED"
  | "AWAITING_CHECKOUT_RISK_ANALYSIS_REQUEST";

/**
 * Bill payment status
 */
export const ApiBillGetResponseBillStatus = {
  PENDING: "PENDING",
  BANK_PROCESSING: "BANK_PROCESSING",
  PAID: "PAID",
  FAILED: "FAILED",
  CANCELLED: "CANCELLED",
  REFUNDED: "REFUNDED",
  AWAITING_CHECKOUT_RISK_ANALYSIS_REQUEST:
    "AWAITING_CHECKOUT_RISK_ANALYSIS_REQUEST",
} as const;

export type ApiBillSaveRequestDto = {
  /**
   * Digitizable bill line
   */
  identificationField: string;
  /**
   * Payment scheduling date
   */
  scheduleDate?: string;
  /**
   * Bill Payment Description
   */
  description?: string;
  /**
   * Discount attributed to payment
   */
  discount?: number;
  /**
   * Interest attributed to payment
   */
  interest?: number;
  /**
   * Fine assigned to payment
   */
  fine?: number;
  /**
   * Expiration date of the account if it is the type that does not have this information
   */
  dueDate?: Date;
  /**
   * Account value if it is the type that does not have this information (Ex: credit card invoices)
   */
  value?: number;
  /**
   * Unique identifier of the bill in your system
   */
  externalReference?: string;
};

export type ApiBillListResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<ApiBillGetResponseDto>;
};

export type ApiBillSimulateRequestDto = {
  /**
   * Digitizable bill line
   */
  identificationField?: string;
  /**
   * Ticket barcode
   */
  barCode?: string;
};

export type ApiBillSimulateResponseDto = {
  /**
   * Minimum date allowed for scheduling
   */
  minimumScheduleDate?: Date;
  /**
   * Fee charged when paying the bill
   */
  fee?: number;
  bankSlipInfo?: ApiBillSimulateBankSlipInfoResponseDto;
};

/**
 * Information about the bill to be paid
 */
export type ApiBillSimulateBankSlipInfoResponseDto = {
  /**
   * Digitable line
   */
  identificationField?: string;
  /**
   * Ticket value
   */
  value?: number;
  /**
   * Due date
   */
  dueDate?: Date;
  /**
   * Company/Body issuing the bill
   */
  companyName?: string;
  /**
   * Code of the bank issuing the bill in the banking system
   */
  bank?: string;
  /**
   * CPF or CNPJ of the beneficiary
   */
  beneficiaryCpfCnpj?: string;
  /**
   * Beneficiary's name
   */
  beneficiaryName?: string;
  /**
   * Whether the value can be changed or not
   */
  allowChangeValue?: boolean;
  /**
   * Minimum value that can be changed
   */
  minValue?: number;
  /**
   * Maximum value that can be changed
   */
  maxValue?: number;
  /**
   * Value of discounts
   */
  discountValue?: number;
  /**
   * Interest amount
   */
  interestValue?: number;
  /**
   * Fine value
   */
  fineValue?: number;
  /**
   * Original bill value
   */
  originalValue?: number;
  /**
   * Total value of discounts and rebates
   */
  totalDiscountValue?: number;
  /**
   * Total amount of interest and fine
   */
  totalAdditionalValue?: number;
  /**
   * Informs if the ticket is expired
   */
  isOverdue?: boolean;
};

export type ApiChargebackSaveDisputeRequestDto = {
  /**
   * Files to create the dispute (Maximum: 11).
   */
  files: Blob | File;
};

export type ApiChargebackSaveDisputeResponseDto = {
  /**
   * Unique identifier of chargeback for which the dispute will be created.
   */
  chargebackId?: string;
  status?: ApiChargebackSaveDisputeResponseChargebackDisputeStatus;
  /**
   * Names of the dispute files.
   */
  files?: Array<string>;
};

/**
 * Dispute status.
 */
export type ApiChargebackSaveDisputeResponseChargebackDisputeStatus =
  | "REQUESTED"
  | "ACCEPTED"
  | "REJECTED";

/**
 * Dispute status.
 */
export const ApiChargebackSaveDisputeResponseChargebackDisputeStatus = {
  REQUESTED: "REQUESTED",
  ACCEPTED: "ACCEPTED",
  REJECTED: "REJECTED",
} as const;

export type OpenApiErrorResponseDto = {
  /**
   * List of objects
   */
  errors?: Array<{
    /**
     * Error code
     */
    code?: string;
    /**
     * Error description
     */
    description?: string;
  }>;
};

export type OpenApiErrorResponseDataDto = {
  /**
   * Error code
   */
  code?: string;
  /**
   * Error description
   */
  description?: string;
};

export type ApiPaymentChargebackResponseDto = {
  /**
   * Unique chargeback identifier.
   */
  id?: string;
  /**
   * Unique payment identifier in Asaas
   */
  payment?: string;
  /**
   * Unique installment identifier in Asaas
   */
  installment?: string;
  /**
   * Unique identifier of customer to which the chargeback is linked.
   */
  customerAccount?: string;
  status?: ApiPaymentChargebackResponseChargebackStatus;
  reason?: ApiPaymentChargebackResponseChargebackReason;
  /**
   * Chargeback opening date.
   */
  disputeStartDate?: Date;
  /**
   * Chargeback value.
   */
  value?: number;
  /**
   * Payment date on Asaas
   */
  paymentDate?: Date;
  creditCard?: ApiChargebackCreditCardResponseDto;
  disputeStatus?: ApiPaymentChargebackResponseChargebackDisputeStatus;
  /**
   * Deadline to send dispute documents.
   */
  deadlineToSendDisputeDocuments?: Date;
};

/**
 * Chargeback status
 */
export type ApiPaymentChargebackResponseChargebackStatus =
  | "REQUESTED"
  | "IN_DISPUTE"
  | "DISPUTE_LOST"
  | "REVERSED"
  | "DONE";

/**
 * Chargeback status
 */
export const ApiPaymentChargebackResponseChargebackStatus = {
  REQUESTED: "REQUESTED",
  IN_DISPUTE: "IN_DISPUTE",
  DISPUTE_LOST: "DISPUTE_LOST",
  REVERSED: "REVERSED",
  DONE: "DONE",
} as const;

/**
 * Chargeback reason
 */
export type ApiPaymentChargebackResponseChargebackReason =
  | "ABSENCE_OF_PRINT"
  | "ABSENT_CARD_FRAUD"
  | "CARD_ACTIVATED_PHONE_TRANSACTION"
  | "CARD_FRAUD"
  | "CARD_RECOVERY_BULLETIN"
  | "COMMERCIAL_DISAGREEMENT"
  | "COPY_NOT_RECEIVED"
  | "CREDIT_OR_DEBIT_PRESENTATION_ERROR"
  | "DIFFERENT_PAY_METHOD"
  | "FRAUD"
  | "INCORRECT_TRANSACTION_VALUE"
  | "INVALID_CURRENCY"
  | "INVALID_DATA"
  | "LATE_PRESENTATION"
  | "LOCAL_REGULATORY_OR_LEGAL_DISPUTE"
  | "MULTIPLE_ROCS"
  | "ORIGINAL_CREDIT_TRANSACTION_NOT_ACCEPTED"
  | "OTHER_ABSENT_CARD_FRAUD"
  | "PROCESS_ERROR"
  | "RECEIVED_COPY_ILLEGIBLE_OR_INCOMPLETE"
  | "RECURRENCE_CANCELED"
  | "REQUIRED_AUTHORIZATION_NOT_GRANTED"
  | "RIGHT_OF_FULL_RECOURSE_FOR_FRAUD"
  | "SALE_CANCELED"
  | "SERVICE_DISAGREEMENT_OR_DEFECTIVE_PRODUCT"
  | "SERVICE_NOT_RECEIVED"
  | "SPLIT_SALE"
  | "TRANSFERS_OF_DIVERSE_RESPONSIBILITIES"
  | "UNQUALIFIED_CAR_RENTAL_DEBIT"
  | "USA_CARDHOLDER_DISPUTE"
  | "VISA_FRAUD_MONITORING_PROGRAM"
  | "WARNING_BULLETIN_FILE";

/**
 * Chargeback reason
 */
export const ApiPaymentChargebackResponseChargebackReason = {
  ABSENCE_OF_PRINT: "ABSENCE_OF_PRINT",
  ABSENT_CARD_FRAUD: "ABSENT_CARD_FRAUD",
  CARD_ACTIVATED_PHONE_TRANSACTION: "CARD_ACTIVATED_PHONE_TRANSACTION",
  CARD_FRAUD: "CARD_FRAUD",
  CARD_RECOVERY_BULLETIN: "CARD_RECOVERY_BULLETIN",
  COMMERCIAL_DISAGREEMENT: "COMMERCIAL_DISAGREEMENT",
  COPY_NOT_RECEIVED: "COPY_NOT_RECEIVED",
  CREDIT_OR_DEBIT_PRESENTATION_ERROR: "CREDIT_OR_DEBIT_PRESENTATION_ERROR",
  DIFFERENT_PAY_METHOD: "DIFFERENT_PAY_METHOD",
  FRAUD: "FRAUD",
  INCORRECT_TRANSACTION_VALUE: "INCORRECT_TRANSACTION_VALUE",
  INVALID_CURRENCY: "INVALID_CURRENCY",
  INVALID_DATA: "INVALID_DATA",
  LATE_PRESENTATION: "LATE_PRESENTATION",
  LOCAL_REGULATORY_OR_LEGAL_DISPUTE: "LOCAL_REGULATORY_OR_LEGAL_DISPUTE",
  MULTIPLE_ROCS: "MULTIPLE_ROCS",
  ORIGINAL_CREDIT_TRANSACTION_NOT_ACCEPTED:
    "ORIGINAL_CREDIT_TRANSACTION_NOT_ACCEPTED",
  OTHER_ABSENT_CARD_FRAUD: "OTHER_ABSENT_CARD_FRAUD",
  PROCESS_ERROR: "PROCESS_ERROR",
  RECEIVED_COPY_ILLEGIBLE_OR_INCOMPLETE:
    "RECEIVED_COPY_ILLEGIBLE_OR_INCOMPLETE",
  RECURRENCE_CANCELED: "RECURRENCE_CANCELED",
  REQUIRED_AUTHORIZATION_NOT_GRANTED: "REQUIRED_AUTHORIZATION_NOT_GRANTED",
  RIGHT_OF_FULL_RECOURSE_FOR_FRAUD: "RIGHT_OF_FULL_RECOURSE_FOR_FRAUD",
  SALE_CANCELED: "SALE_CANCELED",
  SERVICE_DISAGREEMENT_OR_DEFECTIVE_PRODUCT:
    "SERVICE_DISAGREEMENT_OR_DEFECTIVE_PRODUCT",
  SERVICE_NOT_RECEIVED: "SERVICE_NOT_RECEIVED",
  SPLIT_SALE: "SPLIT_SALE",
  TRANSFERS_OF_DIVERSE_RESPONSIBILITIES:
    "TRANSFERS_OF_DIVERSE_RESPONSIBILITIES",
  UNQUALIFIED_CAR_RENTAL_DEBIT: "UNQUALIFIED_CAR_RENTAL_DEBIT",
  USA_CARDHOLDER_DISPUTE: "USA_CARDHOLDER_DISPUTE",
  VISA_FRAUD_MONITORING_PROGRAM: "VISA_FRAUD_MONITORING_PROGRAM",
  WARNING_BULLETIN_FILE: "WARNING_BULLETIN_FILE",
} as const;

/**
 * Credit card information
 */
export type ApiChargebackCreditCardResponseDto = {
  /**
   * Last 4 digits of the card used
   */
  number?: string;
  brand?: ApiChargebackCreditCardResponseCreditCardBrand;
};

/**
 * Flag of the card used
 */
export type ApiChargebackCreditCardResponseCreditCardBrand =
  | "VISA"
  | "MASTERCARD"
  | "ELO"
  | "DINERS"
  | "DISCOVER"
  | "AMEX"
  | "HIPERCARD"
  | "CABAL"
  | "BANESCARD"
  | "CREDZ"
  | "SOROCRED"
  | "CREDSYSTEM"
  | "JCB"
  | "UNKNOWN";

/**
 * Flag of the card used
 */
export const ApiChargebackCreditCardResponseCreditCardBrand = {
  VISA: "VISA",
  MASTERCARD: "MASTERCARD",
  ELO: "ELO",
  DINERS: "DINERS",
  DISCOVER: "DISCOVER",
  AMEX: "AMEX",
  HIPERCARD: "HIPERCARD",
  CABAL: "CABAL",
  BANESCARD: "BANESCARD",
  CREDZ: "CREDZ",
  SOROCRED: "SOROCRED",
  CREDSYSTEM: "CREDSYSTEM",
  JCB: "JCB",
  UNKNOWN: "UNKNOWN",
} as const;

/**
 * Chargeback dispute status.
 */
export type ApiPaymentChargebackResponseChargebackDisputeStatus =
  | "REQUESTED"
  | "ACCEPTED"
  | "REJECTED";

/**
 * Chargeback dispute status.
 */
export const ApiPaymentChargebackResponseChargebackDisputeStatus = {
  REQUESTED: "REQUESTED",
  ACCEPTED: "ACCEPTED",
  REJECTED: "REJECTED",
} as const;

export type ApiChargebackListResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<ApiPaymentChargebackResponseDto>;
};

/**
 * Filter by used card brand.
 */
export type ApiChargebackListRequestCreditCardBrand =
  | "VISA"
  | "MASTERCARD"
  | "ELO"
  | "DINERS"
  | "DISCOVER"
  | "AMEX"
  | "HIPERCARD"
  | "CABAL"
  | "BANESCARD"
  | "CREDZ"
  | "SOROCRED"
  | "CREDSYSTEM"
  | "JCB"
  | "UNKNOWN";

/**
 * Filter by used card brand.
 */
export const ApiChargebackListRequestCreditCardBrand = {
  VISA: "VISA",
  MASTERCARD: "MASTERCARD",
  ELO: "ELO",
  DINERS: "DINERS",
  DISCOVER: "DISCOVER",
  AMEX: "AMEX",
  HIPERCARD: "HIPERCARD",
  CABAL: "CABAL",
  BANESCARD: "BANESCARD",
  CREDZ: "CREDZ",
  SOROCRED: "SOROCRED",
  CREDSYSTEM: "CREDSYSTEM",
  JCB: "JCB",
  UNKNOWN: "UNKNOWN",
} as const;

/**
 * Filter by chargeback status.
 */
export type ApiChargebackListRequestChargebackStatus =
  | "REQUESTED"
  | "IN_DISPUTE"
  | "DISPUTE_LOST"
  | "REVERSED"
  | "DONE";

/**
 * Filter by chargeback status.
 */
export const ApiChargebackListRequestChargebackStatus = {
  REQUESTED: "REQUESTED",
  IN_DISPUTE: "IN_DISPUTE",
  DISPUTE_LOST: "DISPUTE_LOST",
  REVERSED: "REVERSED",
  DONE: "DONE",
} as const;

export type ApiCreditBureauReportGetResponseDto = {
  /**
   * Unique report identifier in Asaas
   */
  id?: string;
  /**
   * Date of consultation
   */
  dateCreated?: Date;
  /**
   * CPF or CNPJ consulted manually
   */
  cpfCnpj?: string;
  state?: ApiCreditBureauReportGetResponseState;
  /**
   * Unique customer identifier in Asaas
   */
  customer?: string;
  /**
   * Url to download the report. Available until 11:59 pm on the day of the appointment.
   */
  downloadUrl?: string;
  /**
   * PDF of the query report in Base64 (this field is only returned when the report is created)
   */
  reportFile?: string;
};

/**
 * UF of the state in which the consultation was made
 * @deprecated
 */
export type ApiCreditBureauReportGetResponseState =
  | "AC"
  | "AL"
  | "AP"
  | "AM"
  | "BA"
  | "CE"
  | "DF"
  | "ES"
  | "GO"
  | "MA"
  | "MT"
  | "MS"
  | "MG"
  | "PA"
  | "PB"
  | "PR"
  | "PE"
  | "PI"
  | "RR"
  | "RO"
  | "RJ"
  | "RN"
  | "RS"
  | "SC"
  | "SP"
  | "SE"
  | "TO";

/**
 * UF of the state in which the consultation was made
 * @deprecated
 */
export const ApiCreditBureauReportGetResponseState = {
  AC: "AC",
  AL: "AL",
  AP: "AP",
  AM: "AM",
  BA: "BA",
  CE: "CE",
  DF: "DF",
  ES: "ES",
  GO: "GO",
  MA: "MA",
  MT: "MT",
  MS: "MS",
  MG: "MG",
  PA: "PA",
  PB: "PB",
  PR: "PR",
  PE: "PE",
  PI: "PI",
  RR: "RR",
  RO: "RO",
  RJ: "RJ",
  RN: "RN",
  RS: "RS",
  SC: "SC",
  SP: "SP",
  SE: "SE",
  TO: "TO",
} as const;

export type ApiCreditBureauReportSaveRequestDto = {
  /**
   * Unique customer identifier in Asaas
   */
  customer?: string;
  /**
   * CPF or CNPJ of the customer. Enter this field if your client is not registered with Asaas
   */
  cpfCnpj?: string;
  state?: ApiCreditBureauReportSaveRequestState;
};

/**
 * State in which you want to carry out the consultation
 * @deprecated
 */
export type ApiCreditBureauReportSaveRequestState =
  | "AC"
  | "AL"
  | "AP"
  | "AM"
  | "BA"
  | "CE"
  | "DF"
  | "ES"
  | "GO"
  | "MA"
  | "MT"
  | "MS"
  | "MG"
  | "PA"
  | "PB"
  | "PR"
  | "PE"
  | "PI"
  | "RR"
  | "RO"
  | "RJ"
  | "RN"
  | "RS"
  | "SC"
  | "SP"
  | "SE"
  | "TO";

/**
 * State in which you want to carry out the consultation
 * @deprecated
 */
export const ApiCreditBureauReportSaveRequestState = {
  AC: "AC",
  AL: "AL",
  AP: "AP",
  AM: "AM",
  BA: "BA",
  CE: "CE",
  DF: "DF",
  ES: "ES",
  GO: "GO",
  MA: "MA",
  MT: "MT",
  MS: "MS",
  MG: "MG",
  PA: "PA",
  PB: "PB",
  PR: "PR",
  PE: "PE",
  PI: "PI",
  RR: "RR",
  RO: "RO",
  RJ: "RJ",
  RN: "RN",
  RS: "RS",
  SC: "SC",
  SP: "SP",
  SE: "SE",
  TO: "TO",
} as const;

export type ApiCreditBureauReportListResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<ApiCreditBureauReportGetResponseDto>;
};

export type ApiCreditCardTokenizeRequestDto = {
  /**
   * Unique customer identifier in Asaas
   */
  customer: string;
  creditCard: ApiCreditCardRequestDto;
  creditCardHolderInfo: ApiCreditCardHolderInfoRequestDto;
  /**
   * IP from where the customer is making the purchase. Your server's IP must not be entered.
   */
  remoteIp: string;
};

/**
 * Credit card information
 */
export type ApiCreditCardRequestDto = {
  /**
   * Name printed on card
   */
  holderName?: string;
  /**
   * Card number
   */
  number?: string;
  /**
   * Expiration month with 2 digits
   */
  expiryMonth?: string;
  /**
   * Expiration year with 4 digits
   */
  expiryYear?: string;
  /**
   * Security code
   */
  ccv?: string;
};

/**
 * Credit card holder information
 */
export type ApiCreditCardHolderInfoRequestDto = {
  /**
   * Name of card holder
   */
  name?: string;
  /**
   * Cardholder email
   */
  email?: string;
  /**
   * CPF or CNPJ of the cardholder
   */
  cpfCnpj?: string;
  /**
   * Cardholder zip code
   */
  postalCode?: string;
  /**
   * Cardholder address number
   */
  addressNumber?: string;
  /**
   * Supplementing the cardholder's address
   */
  addressComplement?: string;
  /**
   * Phone with cardholder's area code
   */
  phone?: string;
  /**
   * Cardholder's cell phone
   */
  mobilePhone?: string;
};

export type ApiCreditCardTokenizeResponseDto = {
  /**
   * Last 4 digits of the card used
   */
  creditCardNumber?: string;
  creditCardBrand?: ApiCreditCardTokenizeResponseCreditCardBrand;
  /**
   * Credit card token that can be sent in future transactions without the need to re-enter card and cardholder details.
   */
  creditCardToken?: string;
};

/**
 * Brand of the card used
 */
export type ApiCreditCardTokenizeResponseCreditCardBrand =
  | "VISA"
  | "MASTERCARD"
  | "ELO"
  | "DINERS"
  | "DISCOVER"
  | "AMEX"
  | "HIPERCARD"
  | "CABAL"
  | "BANESCARD"
  | "CREDZ"
  | "SOROCRED"
  | "CREDSYSTEM"
  | "JCB"
  | "UNKNOWN";

/**
 * Brand of the card used
 */
export const ApiCreditCardTokenizeResponseCreditCardBrand = {
  VISA: "VISA",
  MASTERCARD: "MASTERCARD",
  ELO: "ELO",
  DINERS: "DINERS",
  DISCOVER: "DISCOVER",
  AMEX: "AMEX",
  HIPERCARD: "HIPERCARD",
  CABAL: "CABAL",
  BANESCARD: "BANESCARD",
  CREDZ: "CREDZ",
  SOROCRED: "SOROCRED",
  CREDSYSTEM: "CREDSYSTEM",
  JCB: "JCB",
  UNKNOWN: "UNKNOWN",
} as const;

export type ApiCustomerAccountRestoreRequestDto = {
  [key: string]: unknown;
};

export type ApiCustomerAccountGetResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Unique customer identifier
   */
  id?: string;
  /**
   * Customer creation date
   */
  dateCreated?: string;
  /**
   * Client name
   */
  name?: string;
  /**
   * Customer email
   */
  email?: string;
  /**
   * Customer phone
   */
  phone?: string;
  /**
   * Customer cell phone
   */
  mobilePhone?: string;
  /**
   * Customer address
   */
  address?: string;
  /**
   * Customer address number
   */
  addressNumber?: string;
  /**
   * Customer address complement
   */
  complement?: string;
  /**
   * Customer address neighborhood
   */
  province?: string;
  /**
   * Unique city identifier in Asaas
   */
  city?: string;
  /**
   * City of customer address
   */
  cityName?: string;
  /**
   * Customer address status
   */
  state?: string;
  /**
   * Customer country
   */
  country?: string;
  /**
   * Customer address zip code
   */
  postalCode?: string;
  /**
   * Customer CPF or CNPJ
   */
  cpfCnpj?: string;
  personType?: ApiCustomerAccountGetResponsePersonType;
  /**
   * Indicates whether it is a deleted client
   */
  deleted?: boolean;
  /**
   * Additional customer emails
   */
  additionalEmails?: string;
  /**
   * External customer reference
   */
  externalReference?: string;
  /**
   * Indicates whether notifications are disabled
   */
  notificationDisabled?: boolean;
  /**
   * Customer Observations
   */
  observations?: string;
  /**
   * Indicates if it's non-brazilian customer
   */
  foreignCustomer?: boolean;
};

/**
 * Kind of person
 */
export type ApiCustomerAccountGetResponsePersonType = "JURIDICA" | "FISICA";

/**
 * Kind of person
 */
export const ApiCustomerAccountGetResponsePersonType = {
  JURIDICA: "JURIDICA",
  FISICA: "FISICA",
} as const;

export type ApiCustomerAccountSaveRequestDto = {
  /**
   * Client name
   */
  name: string;
  /**
   * Customer CPF or CNPJ
   */
  cpfCnpj: string;
  /**
   * Customer email
   */
  email?: string;
  /**
   * Landline
   */
  phone?: string;
  /**
   * Cell phone
   */
  mobilePhone?: string;
  /**
   * Public place
   */
  address?: string;
  /**
   * Address number
   */
  addressNumber?: string;
  /**
   * Address complement (max. 255 characters)
   */
  complement?: string;
  /**
   * Neighborhood
   */
  province?: string;
  /**
   * Address zip code
   */
  postalCode?: string;
  /**
   * Customer identifier in your system
   */
  externalReference?: string;
  /**
   * true to disable sending billing notifications
   */
  notificationDisabled?: boolean;
  /**
   * Additional emails for sending billing notifications separated by ","
   */
  additionalEmails?: string;
  /**
   * Customer municipal registration
   */
  municipalInscription?: string;
  /**
   * Customer state registration
   */
  stateInscription?: string;
  /**
   * Additional observations
   */
  observations?: string;
  /**
   * Name of the group the customer belongs to
   */
  groupName?: string;
  /**
   * Company
   */
  company?: string;
  /**
   * inform true if it's a non-brazilian customer
   */
  foreignCustomer?: boolean;
};

export type ApiCustomerAccountUpdateRequestDto = {
  /**
   * Client name
   */
  name?: string;
  /**
   * Customer CPF or CNPJ
   */
  cpfCnpj?: string;
  /**
   * Customer email
   */
  email?: string;
  /**
   * Landline
   */
  phone?: string;
  /**
   * Cell phone
   */
  mobilePhone?: string;
  /**
   * Public place
   */
  address?: string;
  /**
   * Address number
   */
  addressNumber?: string;
  /**
   * Address complement
   */
  complement?: string;
  /**
   * Neighborhood
   */
  province?: string;
  /**
   * Address zip code
   */
  postalCode?: string;
  /**
   * Customer identifier in your system
   */
  externalReference?: string;
  /**
   * true to disable sending billing notifications
   */
  notificationDisabled?: boolean;
  /**
   * Additional emails for sending billing notifications separated by ","
   */
  additionalEmails?: string;
  /**
   * Customer municipal registration
   */
  municipalInscription?: string;
  /**
   * Customer state registration
   */
  stateInscription?: string;
  /**
   * Additional observations
   */
  observations?: string;
  /**
   * Name of the group the customer belongs to
   */
  groupName?: string;
  /**
   * Company
   */
  company?: string;
  /**
   * inform true if it's a non-brazilian customer
   */
  foreignCustomer?: boolean;
};

export type ApiCustomerAccountListResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<ApiCustomerAccountGetResponseDto>;
};

export type ApiCustomerAccountDeleteResponseDto = {
  /**
   * Indicates whether the client has been removed
   */
  deleted?: boolean;
  /**
   * Unique customer identifier
   */
  id?: string;
};

export type ApiCustomerGetResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Unique subaccount identifier in Asaas
   */
  id?: string;
  /**
   * Subaccount name
   */
  name?: string;
  /**
   * Subaccount email
   */
  email?: string;
  /**
   * Email for subaccount login, if not provided, the subaccount email will be used
   */
  loginEmail?: string;
  /**
   * Telephone
   */
  phone?: string;
  /**
   * Cellphone
   */
  mobilePhone?: string;
  /**
   * Public place
   */
  address?: string;
  /**
   * Address number
   */
  addressNumber?: string;
  /**
   * Address complement
   */
  complement?: string;
  /**
   * Neighborhood
   */
  province?: string;
  /**
   * Address zip code
   */
  postalCode?: string;
  /**
   * CPF or CNPJ of the subaccount owner
   */
  cpfCnpj?: string;
  /**
   * Date of birth (only for Individuals)
   */
  birthDate?: Date;
  personType?: ApiCustomerGetResponsePersonType;
  companyType?: ApiCustomerGetResponseCompanyType;
  /**
   * Unique city identifier in Asaas
   */
  city?: number;
  /**
   * State abbreviation (SP, RJ, SC, ...)
   */
  state?: string;
  /**
   * Country (Fixed Brazil)
   */
  country?: string;
  /**
   * Display name (auto-populated)
   */
  tradingName?: string;
  /**
   * Url reffered to the subaccount
   */
  site?: string;
  /**
   * Unique wallet identifier to split charges or transfer between Asaas accounts
   */
  walletId?: string;
  accountNumber?: ApiCustomerAccountNumberDto;
  commercialInfoExpiration?: ApiCustomerUpdateRequestCommercialInfoExpirationResponseDto;
};

/**
 * Kind of person
 */
export type ApiCustomerGetResponsePersonType = "JURIDICA" | "FISICA";

/**
 * Kind of person
 */
export const ApiCustomerGetResponsePersonType = {
  JURIDICA: "JURIDICA",
  FISICA: "FISICA",
} as const;

/**
 * Type of company (only when Legal Entity)
 */
export type ApiCustomerGetResponseCompanyType =
  | "MEI"
  | "LIMITED"
  | "INDIVIDUAL"
  | "ASSOCIATION";

/**
 * Type of company (only when Legal Entity)
 */
export const ApiCustomerGetResponseCompanyType = {
  MEI: "MEI",
  LIMITED: "LIMITED",
  INDIVIDUAL: "INDIVIDUAL",
  ASSOCIATION: "ASSOCIATION",
} as const;

/**
 * Subaccount number in Asaas
 */
export type ApiCustomerAccountNumberDto = {
  /**
   * Account agency
   */
  agency?: string;
  /**
   * Account number
   */
  account?: string;
  /**
   * Account digit
   */
  accountDigit?: string;
};

/**
 * Information about the expiration of commercial data
 */
export type ApiCustomerUpdateRequestCommercialInfoExpirationResponseDto = {
  /**
   * Informs if commercial data is expired
   */
  isExpired?: boolean;
  /**
   * Informs the expiration date of commercial data
   */
  scheduledDate?: Date;
};

export type ApiCustomerSaveRequestDto = {
  /**
   * Subaccount name
   */
  name: string;
  /**
   * Subaccount email
   */
  email: string;
  /**
   * Email for subaccount login, if not provided, the subaccount email will be used
   */
  loginEmail?: string;
  /**
   * CPF or CNPJ of the subaccount owner
   */
  cpfCnpj: string;
  /**
   * Date of birth (only for Individuals)
   */
  birthDate?: Date;
  companyType?: ApiCustomerSaveRequestCompanyType;
  /**
   * Telephone
   */
  phone?: string;
  /**
   * Cellphone
   */
  mobilePhone: string;
  /**
   * Url reffered to the subaccount
   */
  site?: string;
  /**
   * Billing/Monthly income
   */
  incomeValue: number;
  /**
   * Public place
   */
  address: string;
  /**
   * Address number
   */
  addressNumber: string;
  /**
   * Address complement
   */
  complement?: string;
  /**
   * Neighborhood
   */
  province: string;
  /**
   * Address zip code
   */
  postalCode: string;
  /**
   * Array with desired Webhooks settings
   */
  webhooks?: Array<{
    /**
     * Webhook name
     */
    name?: string;
    /**
     * Webhook URL
     */
    url?: string;
    /**
     * Email that will receive notifications about the Webhook
     */
    email?: string;
    /**
     * Set whether the Webhook is active
     */
    enabled?: boolean;
    /**
     * Set whether the sync queue is stopped
     */
    interrupted?: boolean;
    /**
     * API Version
     */
    apiVersion?: number;
    /**
     * Webhook authentication token
     */
    authToken?: string;
    sendType?: ApiPushNotificationConfigSaveRequestPushNotificationSendType;
    /**
     * List of events this Webhook will observe
     */
    events?: Array<string>;
  }>;
};

/**
 * Type of company (only when Legal Entity)
 */
export type ApiCustomerSaveRequestCompanyType =
  | "MEI"
  | "LIMITED"
  | "INDIVIDUAL"
  | "ASSOCIATION";

/**
 * Type of company (only when Legal Entity)
 */
export const ApiCustomerSaveRequestCompanyType = {
  MEI: "MEI",
  LIMITED: "LIMITED",
  INDIVIDUAL: "INDIVIDUAL",
  ASSOCIATION: "ASSOCIATION",
} as const;

export type ApiPushNotificationConfigSaveRequestDto = {
  /**
   * Webhook name
   */
  name?: string;
  /**
   * Webhook URL
   */
  url?: string;
  /**
   * Email that will receive notifications about the Webhook
   */
  email?: string;
  /**
   * Set whether the Webhook is active
   */
  enabled?: boolean;
  /**
   * Set whether the sync queue is stopped
   */
  interrupted?: boolean;
  /**
   * API Version
   */
  apiVersion?: number;
  /**
   * Webhook authentication token
   */
  authToken?: string;
  sendType?: ApiPushNotificationConfigSaveRequestPushNotificationSendType;
  /**
   * List of events this Webhook will observe
   */
  events?: Array<string>;
};

/**
 * Sequential (SEQUENTIALLY) or non-sequential (NON_SEQUENTIALLY)
 */
export type ApiPushNotificationConfigSaveRequestPushNotificationSendType =
  | "NON_SEQUENTIALLY"
  | "SEQUENTIALLY";

/**
 * Sequential (SEQUENTIALLY) or non-sequential (NON_SEQUENTIALLY)
 */
export const ApiPushNotificationConfigSaveRequestPushNotificationSendType = {
  NON_SEQUENTIALLY: "NON_SEQUENTIALLY",
  SEQUENTIALLY: "SEQUENTIALLY",
} as const;

export type ApiPushNotificationConfigSaveRequestPushNotificationRequestEvent =
  string;

export type ApiCustomerSaveResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Unique subaccount identifier in Asaas
   */
  id?: string;
  /**
   * Subaccount name
   */
  name?: string;
  /**
   * Subaccount email
   */
  email?: string;
  /**
   * Email for subaccount login, if not provided, the subaccount email will be used
   */
  loginEmail?: string;
  /**
   * Telephone
   */
  phone?: string;
  /**
   * Cellphone
   */
  mobilePhone?: string;
  /**
   * Public place
   */
  address?: string;
  /**
   * Address number
   */
  addressNumber?: string;
  /**
   * Address complement
   */
  complement?: string;
  /**
   * Neighborhood
   */
  province?: string;
  /**
   * Address zip code
   */
  postalCode?: string;
  /**
   * CPF or CNPJ of the subaccount owner
   */
  cpfCnpj?: string;
  /**
   * Date of birth (only for Individuals)
   */
  birthDate?: Date;
  personType?: ApiCustomerSaveResponsePersonType;
  companyType?: ApiCustomerSaveResponseCompanyType;
  /**
   * Unique city identifier in Asaas
   */
  city?: number;
  /**
   * State abbreviation (SP, RJ, SC, ...)
   */
  state?: string;
  /**
   * Country (Fixed Brazil)
   */
  country?: string;
  /**
   * Display name (auto-populated)
   */
  tradingName?: string;
  /**
   * Url reffered to the subaccount
   */
  site?: string;
  /**
   * Unique wallet identifier to split charges or transfer between Asaas accounts
   */
  walletId?: string;
  accountNumber?: ApiCustomerAccountNumberDto;
  commercialInfoExpiration?: ApiCustomerUpdateRequestCommercialInfoExpirationResponseDto;
  /**
   * API key
   */
  apiKey?: string;
};

/**
 * Kind of person
 */
export type ApiCustomerSaveResponsePersonType = "JURIDICA" | "FISICA";

/**
 * Kind of person
 */
export const ApiCustomerSaveResponsePersonType = {
  JURIDICA: "JURIDICA",
  FISICA: "FISICA",
} as const;

/**
 * Type of company (only when Legal Entity)
 */
export type ApiCustomerSaveResponseCompanyType =
  | "MEI"
  | "LIMITED"
  | "INDIVIDUAL"
  | "ASSOCIATION";

/**
 * Type of company (only when Legal Entity)
 */
export const ApiCustomerSaveResponseCompanyType = {
  MEI: "MEI",
  LIMITED: "LIMITED",
  INDIVIDUAL: "INDIVIDUAL",
  ASSOCIATION: "ASSOCIATION",
} as const;

export type ApiCustomerListResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<ApiCustomerGetResponseDto>;
};

export type ApiCustomerFiscalInfoUpdateUseNationalPortalRequestDto = {
  /**
   * Indicates whether the issuing of invoices through the national portal should be enabled or not.
   */
  enabled: boolean;
};

export type ApiCustomerFiscalInfoUpdateUseNationalPortalResponseDto = {
  /**
   * Status of the request to change the use status of national portal for issuing invoices.
   */
  success?: boolean;
};

export type ApiCustomerFiscalInfoListMunicipalServicesResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<{
    /**
     * Unique service identifier
     */
    id?: string;
    /**
     * Service description
     */
    description?: string;
    /**
     * ISS percentage rate
     */
    issTax?: number;
  }>;
};

export type ApiCustomerFiscalInfoListMunicipalServicesResponseDataDto = {
  /**
   * Unique service identifier
   */
  id?: string;
  /**
   * Service description
   */
  description?: string;
  /**
   * ISS percentage rate
   */
  issTax?: number;
};

export type ApiCustomerFiscalInfoMunicipalOptionsGetResponseDto = {
  authenticationType?: ApiCustomerFiscalInfoMunicipalOptionsGetResponseEnotasTipoAutenticacao;
  /**
   * Whether or not it supports the cancellation of invoices automatically at your city hall
   */
  supportsCancellation?: boolean;
  /**
   * It is necessary to inform or not the special taxation regime. If used, enter it in the `specialTaxRegime` field of **Create or update tax information** according to the options returned in the `specialTaxRegimesList` list.
   */
  usesSpecialTaxRegimes?: boolean;
  /**
   * Whether or not to inform the item on the service list
   */
  usesServiceListItem?: boolean;
  /**
   * Tax calculation regime options
   */
  specialTaxRegimesList?: Array<{
    /**
     * Name of the special taxation regime
     */
    label?: string;
    /**
     * Special taxation regime identifier
     */
    value?: string;
  }>;
  /**
   * Special taxation regime options
   */
  nationalPortalTaxCalculationRegimeList?: Array<{
    /**
     * Name of the tax calculation regime
     */
    label?: string;
    /**
     * Identifier of the tax calculation regime
     */
    value?: string;
  }>;
  /**
   * Explanation of the tax calculation regime
   */
  nationalPortalTaxCalculationRegimeHelp?: string;
  /**
   * Explanation of the municipal registration format
   */
  municipalInscriptionHelp?: string;
  /**
   * Explanation of the special taxation regime
   */
  specialTaxRegimeHelp?: string;
  /**
   * Explanation of service list item format
   */
  serviceListItemHelp?: string;
  /**
   * Explanation of digital certificate
   */
  digitalCertificatedHelp?: string;
  /**
   * Token Explanation
   */
  accessTokenHelp?: string;
  /**
   * Explanation of municipal service code format
   */
  municipalServiceCodeHelp?: string;
};

/**
 * Type of authentication required at city hall
 */
export type ApiCustomerFiscalInfoMunicipalOptionsGetResponseEnotasTipoAutenticacao =
  "CERTIFICATE" | "TOKEN" | "USER_AND_PASSWORD";

/**
 * Type of authentication required at city hall
 */
export const ApiCustomerFiscalInfoMunicipalOptionsGetResponseEnotasTipoAutenticacao =
  {
    CERTIFICATE: "CERTIFICATE",
    TOKEN: "TOKEN",
    USER_AND_PASSWORD: "USER_AND_PASSWORD",
  } as const;

export type ApiCustomerFiscalInfoMunicipalOptionsSpecialTaxRegimesDto = {
  /**
   * Name of the special taxation regime
   */
  label?: string;
  /**
   * Special taxation regime identifier
   */
  value?: string;
};

export type ApiCustomerFiscalInfoMunicipalOptionsNationalPortalTaxCalculationRegimeDto =
  {
    /**
     * Name of the tax calculation regime
     */
    label?: string;
    /**
     * Identifier of the tax calculation regime
     */
    value?: string;
  };

export type ApiCustomerFiscalInfoGetResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Email used by Asaas to send invoice notifications and alerts
   */
  email?: string;
  /**
   * Company municipal registration
   */
  municipalInscription?: string;
  /**
   * Indicates whether the company opts for the simple national system
   */
  simplesNacional?: boolean;
  /**
   * Identifies whether the company is classified as a cultural promoter
   */
  culturalProjectsPromoter?: boolean;
  /**
   * CNAE code
   */
  cnae?: string;
  /**
   * Special taxation regime identifier
   */
  specialTaxRegime?: string;
  /**
   * Service list item, as http://www.planalto.gov.br/ccivil_03/leis/LCP/Lcp116.htm
   */
  serviceListItem?: string;
  /**
   * Serial Number registered for the company
   */
  rpsSerie?: string;
  /**
   * RPS number used in the last invoice issued to your company
   */
  rpsNumber?: number;
  /**
   * Batch number used on the last invoice issued by your company
   */
  loteNumber?: number;
  /**
   * User to access your city's city hall website
   */
  username?: string;
  /**
   * Indicates whether the password to access the city hall website has been entered
   */
  passwordSent?: boolean;
  /**
   * Indicates whether the token for accessing the city hall website was provided
   */
  accessTokenSent?: boolean;
  /**
   * Indicates whether the digital certificate for access to the city hall website has been provided
   */
  certificateSent?: boolean;
  /**
   * Identifier of the tax calculation regime
   */
  nationalPortalTaxCalculationRegime?: string;
};

export type ApiCustomerFiscalInfoSaveRequestDto = {
  /**
   * Email used by Asaas to send invoice notifications and alerts
   */
  email: string;
  /**
   * Company municipal registration
   */
  municipalInscription?: string;
  /**
   * Indicates whether the company opts for the simple national system
   */
  simplesNacional: boolean;
  /**
   * Identifies whether the company is classified as a cultural promoter
   */
  culturalProjectsPromoter?: boolean;
  /**
   * CNAE code
   */
  cnae?: string;
  /**
   * Special taxation regime identifier
   */
  specialTaxRegime?: string;
  /**
   * Service list item, as http://www.planalto.gov.br/ccivil_03/leis/LCP/Lcp116.htm
   */
  serviceListItem?: string;
  /**
   * Serial Number used by your company to issue invoices. In most cities the serial number used is '1' or 'E'
   */
  rpsSerie?: string;
  /**
   * RPS number used on the last invoice issued by your company. If your last NF issued has an RPS equal to '100', this field must be filled in with '101'. If you have never issued invoices through your city hall's website, enter '1' in this field
   */
  rpsNumber?: number;
  /**
   * Batch number used on the last invoice issued by your company. If the last lot used in your city hall is '25', this field must be filled in with '26'. Only enter this field if your city hall requires the use of lots
   */
  loteNumber?: number;
  /**
   * User to access your city's city hall website
   */
  username?: string;
  /**
   * Password to access the city hall website
   */
  password?: string;
  /**
   * Token for access to the city hall website (If access to your city hall website is via Token)
   */
  accessToken?: string;
  certificateFile?: File;
  /**
   * Password for the digital certificate sent (If access to your city hall website through a digital certificate)
   */
  certificatePassword?: string;
  /**
   * Identifier of the tax calculation regime. It must only be completed by companies classified as ME or EPP opting for Simples Nacional. Consult the need for this information with your city hall or accounting department.
   */
  nationalPortalTaxCalculationRegime?: string;
};

export type ApiCustomerInvoiceCancelRequestDto = {
  /**
   * Cancel invoice only on Asaas
   */
  cancelOnlyOnAsaas?: boolean;
};

export type ApiCustomerInvoiceGetResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Unique invoice identifier in Asaas
   */
  id?: string;
  status?: ApiCustomerInvoiceGetResponseInvoiceStatus;
  /**
   * Unique customer identifier
   */
  customer?: string;
  /**
   * Unique payment identifier in Asaas
   */
  payment?: string;
  /**
   * Unique installment identifier in Asaas
   */
  installment?: string;
  /**
   * Invoice type
   */
  type?: "NFS-e";
  /**
   * Description of the current status of the invoice
   */
  statusDescription?: string;
  /**
   * Description of invoice services
   */
  serviceDescription?: string;
  /**
   * Link to pdf file of the invoice issued
   */
  pdfUrl?: string;
  /**
   * Link to xml file of the issued invoice
   */
  xmlUrl?: string;
  /**
   * Invoice series
   */
  rpsSerie?: string;
  /**
   * RPS converted to invoice
   */
  rpsNumber?: string;
  /**
   * Invoice number
   */
  number?: string;
  /**
   * Verification code
   */
  validationCode?: string;
  /**
   * Total value
   */
  value?: number;
  /**
   * Deductions. Deductions do not change the total value of the invoice, but they do change the ISS calculation basis.
   */
  deductions?: number;
  /**
   * Invoice issuance date
   */
  effectiveDate?: Date;
  /**
   * Additional observations
   */
  observations?: string;
  /**
   * Estimated tax invoice
   */
  estimatedTaxesDescription?: string;
  /**
   * Invoice identifier in your system
   */
  externalReference?: string;
  taxes?: ApiCustomerInvoiceTaxesDto;
  /**
   * Unique municipal service identifier
   */
  municipalServiceId?: string;
  /**
   * Municipal Service Code
   */
  municipalServiceCode?: string;
  /**
   * Name of municipal service
   */
  municipalServiceName?: string;
};

/**
 * Invoice status
 */
export type ApiCustomerInvoiceGetResponseInvoiceStatus =
  | "SCHEDULED"
  | "AUTHORIZED"
  | "PROCESSING_CANCELLATION"
  | "CANCELED"
  | "CANCELLATION_DENIED"
  | "ERROR";

/**
 * Invoice status
 */
export const ApiCustomerInvoiceGetResponseInvoiceStatus = {
  SCHEDULED: "SCHEDULED",
  AUTHORIZED: "AUTHORIZED",
  PROCESSING_CANCELLATION: "PROCESSING_CANCELLATION",
  CANCELED: "CANCELED",
  CANCELLATION_DENIED: "CANCELLATION_DENIED",
  ERROR: "ERROR",
} as const;

/**
 * Invoice taxes
 */
export type ApiCustomerInvoiceTaxesDto = {
  /**
   * The invoice holder must withhold ISS or not
   */
  retainIss: boolean;
  /**
   * COFINS rate
   */
  cofins: number;
  /**
   * CSLL rate
   */
  csll: number;
  /**
   * INSS rate
   */
  inss: number;
  /**
   * IR rate
   */
  ir: number;
  /**
   * PIS rate
   */
  pis: number;
  /**
   * ISS rate
   */
  iss: number;
};

export type ApiCustomerInvoiceSaveRequestDto = {
  /**
   * Unique payment identifier in Asaas
   */
  payment?: string;
  /**
   * Unique installment identifier in Asaas
   */
  installment?: string;
  /**
   * Unique customer identifier
   */
  customer?: string;
  /**
   * Description of invoice services
   */
  serviceDescription: string;
  /**
   * Additional observations
   */
  observations: string;
  /**
   * Invoice identifier in your system
   */
  externalReference?: string;
  /**
   * Total value
   */
  value: number;
  /**
   * Deductions. Deductions do not change the total value of the invoice, but they do change the ISS calculation basis.
   */
  deductions: number;
  /**
   * Invoice issuance date
   */
  effectiveDate: Date;
  /**
   * Unique municipal service identifier
   */
  municipalServiceId?: string;
  /**
   * Municipal Service Code
   */
  municipalServiceCode?: string;
  /**
   * Name of the municipal service. If not provided, the municipalServiceCode attribute will be used as the name for identification.
   */
  municipalServiceName: string;
  /**
   * Update the Payment amount with the invoice taxes already deducted.
   */
  updatePayment?: boolean;
  taxes?: ApiCustomerInvoiceTaxesDto;
};

export type ApiCustomerInvoiceUpdateRequestDto = {
  /**
   * Description of invoice services
   */
  serviceDescription?: string;
  /**
   * Additional observations
   */
  observations?: string;
  /**
   * Invoice identifier in your system
   */
  externalReference?: string;
  /**
   * Total value
   */
  value?: number;
  /**
   * Deductions. Deductions do not change the total value of the invoice, but they do change the ISS calculation basis.
   */
  deductions?: number;
  /**
   * Invoice issuance date
   */
  effectiveDate?: Date;
  /**
   * Update the Payment amount with the invoice taxes already deducted.
   */
  updatePayment?: boolean;
  taxes?: ApiCustomerInvoiceTaxesDto;
};

export type ApiCustomerInvoiceListResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<ApiCustomerInvoiceGetResponseDto>;
};

/**
 * Filter by situation
 */
export type ApiCustomerInvoiceListRequestInvoiceStatus =
  | "SCHEDULED"
  | "AUTHORIZED"
  | "PROCESSING_CANCELLATION"
  | "CANCELED"
  | "CANCELLATION_DENIED"
  | "ERROR";

/**
 * Filter by situation
 */
export const ApiCustomerInvoiceListRequestInvoiceStatus = {
  SCHEDULED: "SCHEDULED",
  AUTHORIZED: "AUTHORIZED",
  PROCESSING_CANCELLATION: "PROCESSING_CANCELLATION",
  CANCELED: "CANCELED",
  CANCELLATION_DENIED: "CANCELLATION_DENIED",
  ERROR: "ERROR",
} as const;

export type ApiCustomerInvoicePathIdRequestDto = {
  [key: string]: unknown;
};

export type ApiCustomerUpdateRequestGetResponseDto = {
  status?: ApiCustomerUpdateRequestGetResponseStatus;
  personType?: ApiCustomerUpdateRequestGetResponsePersonType;
  /**
   * CPF or CNPJ of the account owner
   */
  cpfCnpj?: string;
  /**
   * Account owner name
   */
  name?: string;
  /**
   * Birthday (Required if the information is from an individual)
   */
  birthDate?: Date;
  /**
   * Company Name
   */
  companyName?: string;
  companyType?: ApiCustomerUpdateRequestGetResponseCompanyType;
  /**
   * Billing/Monthly income
   */
  incomeValue?: number;
  /**
   * Account's email
   */
  email?: string;
  /**
   * Telephone
   */
  phone?: string;
  /**
   * Cell phone
   */
  mobilePhone?: string;
  /**
   * Address zip code
   */
  postalCode?: string;
  /**
   * Public place
   */
  address?: string;
  /**
   * Address number
   */
  addressNumber?: string;
  /**
   * Address complement
   */
  complement?: string;
  /**
   * Neighborhood
   */
  province?: string;
  city?: ApiCustomerUpdateRequestCityDto;
  /**
   * Reason why it is necessary to resend the information
   */
  denialReason?: string;
  /**
   * Display name (auto-populated)
   */
  tradingName?: string;
  /**
   * Web site
   */
  site?: string;
  commercialInfoExpiration?: ApiCustomerUpdateRequestCommercialInfoExpirationResponseDto;
};

/**
 * Account status
 */
export type ApiCustomerUpdateRequestGetResponseStatus =
  | "APPROVED"
  | "AWAITING_ACTION_AUTHORIZATION"
  | "DENIED"
  | "PENDING";

/**
 * Account status
 */
export const ApiCustomerUpdateRequestGetResponseStatus = {
  APPROVED: "APPROVED",
  AWAITING_ACTION_AUTHORIZATION: "AWAITING_ACTION_AUTHORIZATION",
  DENIED: "DENIED",
  PENDING: "PENDING",
} as const;

/**
 * Person Type
 */
export type ApiCustomerUpdateRequestGetResponsePersonType =
  | "JURIDICA"
  | "FISICA";

/**
 * Person Type
 */
export const ApiCustomerUpdateRequestGetResponsePersonType = {
  JURIDICA: "JURIDICA",
  FISICA: "FISICA",
} as const;

/**
 * Type of company (only when Legal Entity)
 */
export type ApiCustomerUpdateRequestGetResponseCompanyType =
  | "MEI"
  | "LIMITED"
  | "INDIVIDUAL"
  | "ASSOCIATION";

/**
 * Type of company (only when Legal Entity)
 */
export const ApiCustomerUpdateRequestGetResponseCompanyType = {
  MEI: "MEI",
  LIMITED: "LIMITED",
  INDIVIDUAL: "INDIVIDUAL",
  ASSOCIATION: "ASSOCIATION",
} as const;

/**
 * City information registered in your account
 */
export type ApiCustomerUpdateRequestCityDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Unique city identifier in Asaas
   */
  id?: number;
  /**
   * IBGE Code
   */
  ibgeCode?: string;
  /**
   * City's name
   */
  name?: string;
  /**
   * District code
   */
  districtCode?: string;
  /**
   * District name
   */
  district?: string;
  state?: ApiCustomerUpdateRequestCityState;
};

/**
 * State abbreviation (SP, RJ, SC, ...)
 */
export type ApiCustomerUpdateRequestCityState =
  | "AC"
  | "AL"
  | "AP"
  | "AM"
  | "BA"
  | "CE"
  | "DF"
  | "ES"
  | "GO"
  | "MA"
  | "MT"
  | "MS"
  | "MG"
  | "PA"
  | "PB"
  | "PR"
  | "PE"
  | "PI"
  | "RR"
  | "RO"
  | "RJ"
  | "RN"
  | "RS"
  | "SC"
  | "SP"
  | "SE"
  | "TO";

/**
 * State abbreviation (SP, RJ, SC, ...)
 */
export const ApiCustomerUpdateRequestCityState = {
  AC: "AC",
  AL: "AL",
  AP: "AP",
  AM: "AM",
  BA: "BA",
  CE: "CE",
  DF: "DF",
  ES: "ES",
  GO: "GO",
  MA: "MA",
  MT: "MT",
  MS: "MS",
  MG: "MG",
  PA: "PA",
  PB: "PB",
  PR: "PR",
  PE: "PE",
  PI: "PI",
  RR: "RR",
  RO: "RO",
  RJ: "RJ",
  RN: "RN",
  RS: "RS",
  SC: "SC",
  SP: "SP",
  SE: "SE",
  TO: "TO",
} as const;

export type ApiCustomerUpdateRequestSaveRequestDto = {
  personType?: ApiCustomerUpdateRequestSaveRequestPersonType;
  /**
   * CPF or CNPJ of the account owner
   */
  cpfCnpj?: string;
  /**
   * Birthday (Required if the information is from an individual)
   */
  birthDate?: Date;
  companyType?: ApiCustomerUpdateRequestSaveRequestCompanyType;
  /**
   * Billing/Monthly income
   */
  incomeValue?: number;
  /**
   * Account's email
   */
  email?: string;
  /**
   * Telephone
   */
  phone?: string;
  /**
   * Cell phone
   */
  mobilePhone?: string;
  /**
   * Web site
   */
  site?: string;
  /**
   * Address zip code
   */
  postalCode?: string;
  /**
   * Public place
   */
  address?: string;
  /**
   * Address number
   */
  addressNumber?: string;
  /**
   * Address complement
   */
  complement?: string;
  /**
   * Neighborhood
   */
  province?: string;
};

/**
 * Person Type
 */
export type ApiCustomerUpdateRequestSaveRequestPersonType =
  | "JURIDICA"
  | "FISICA";

/**
 * Person Type
 */
export const ApiCustomerUpdateRequestSaveRequestPersonType = {
  JURIDICA: "JURIDICA",
  FISICA: "FISICA",
} as const;

/**
 * Type of company (only when Legal Entity)
 */
export type ApiCustomerUpdateRequestSaveRequestCompanyType =
  | "MEI"
  | "LIMITED"
  | "INDIVIDUAL"
  | "ASSOCIATION";

/**
 * Type of company (only when Legal Entity)
 */
export const ApiCustomerUpdateRequestSaveRequestCompanyType = {
  MEI: "MEI",
  LIMITED: "LIMITED",
  INDIVIDUAL: "INDIVIDUAL",
  ASSOCIATION: "ASSOCIATION",
} as const;

export type ApiFinanceBalanceResponseDto = {
  /**
   * Account balance
   */
  balance?: number;
};

export type ApiFinanceGetPaymentStatisticsResponseDto = {
  /**
   * Number of charges
   */
  quantity?: number;
  /**
   * Amount
   */
  value?: number;
  /**
   * Total net worth
   */
  netValue?: number;
};

/**
 * Filter by payment method
 */
export type ApiFinanceGetPaymentStatisticsRequestBillingType =
  | "BOLETO"
  | "CREDIT_CARD"
  | "TRANSFER"
  | "DEPOSIT"
  | "DEBIT_CARD"
  | "PIX";

/**
 * Filter by payment method
 */
export const ApiFinanceGetPaymentStatisticsRequestBillingType = {
  BOLETO: "BOLETO",
  CREDIT_CARD: "CREDIT_CARD",
  TRANSFER: "TRANSFER",
  DEPOSIT: "DEPOSIT",
  DEBIT_CARD: "DEBIT_CARD",
  PIX: "PIX",
} as const;

/**
 * Filter by status
 */
export type ApiFinanceGetPaymentStatisticsRequestPaymentStatus =
  | "PENDING"
  | "RECEIVED"
  | "CONFIRMED"
  | "OVERDUE";

/**
 * Filter by status
 */
export const ApiFinanceGetPaymentStatisticsRequestPaymentStatus = {
  PENDING: "PENDING",
  RECEIVED: "RECEIVED",
  CONFIRMED: "CONFIRMED",
  OVERDUE: "OVERDUE",
} as const;

export type ApiFinanceGetSplitStatisticsResponseDto = {
  /**
   * Amounts receivable
   */
  income?: number;
  /**
   * Values to be sent
   */
  value?: number;
};

export type ApiFinancialTransactionListResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<{
    /**
     * Object type
     */
    object?: string;
    /**
     * Unique transaction identifier in Asaas
     */
    id?: string;
    /**
     * Transaction value
     */
    value?: number;
    /**
     * Value in account at the time of the transaction
     */
    balance?: number;
    type?: ApiFinancialTransactionGetResponseFinancialTransactionType;
    /**
     * Transaction date
     */
    date?: Date;
    /**
     * Transaction description
     */
    description?: string;
    /**
     * Payment identifier (If any)
     */
    paymentId?: string;
    /**
     * Split identifier (If any)
     */
    splitId?: string;
    /**
     * Transfer identifier (If any)
     */
    transferId?: string;
    /**
     * Anticipation identifier (If any)
     */
    anticipationId?: string;
    /**
     * Bill payment identifier (If any)
     */
    billId?: string;
    /**
     * Invoice identifier (If any)
     */
    invoiceId?: string;
    /**
     * Payment dunning identifier (If any)
     */
    paymentDunningId?: string;
    /**
     * Serasa consultation identifier (If any)
     */
    creditBureauReportId?: string;
  }>;
};

export type ApiFinancialTransactionGetResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Unique transaction identifier in Asaas
   */
  id?: string;
  /**
   * Transaction value
   */
  value?: number;
  /**
   * Value in account at the time of the transaction
   */
  balance?: number;
  type?: ApiFinancialTransactionGetResponseFinancialTransactionType;
  /**
   * Transaction date
   */
  date?: Date;
  /**
   * Transaction description
   */
  description?: string;
  /**
   * Payment identifier (If any)
   */
  paymentId?: string;
  /**
   * Split identifier (If any)
   */
  splitId?: string;
  /**
   * Transfer identifier (If any)
   */
  transferId?: string;
  /**
   * Anticipation identifier (If any)
   */
  anticipationId?: string;
  /**
   * Bill payment identifier (If any)
   */
  billId?: string;
  /**
   * Invoice identifier (If any)
   */
  invoiceId?: string;
  /**
   * Payment dunning identifier (If any)
   */
  paymentDunningId?: string;
  /**
   * Serasa consultation identifier (If any)
   */
  creditBureauReportId?: string;
};

/**
 * Transaction type
 */
export type ApiFinancialTransactionGetResponseFinancialTransactionType =
  | "PAYMENT_RECEIVED"
  | "TRANSFER"
  | "TRANSFER_FEE"
  | "TRANSFER_REVERSAL"
  | "REVERSAL"
  | "PAYMENT_REVERSAL"
  | "PAYMENT_REFUND_CANCELLED"
  | "PAYMENT_FEE"
  | "PAYMENT_FEE_REVERSAL"
  | "PAYMENT_CUSTODY_BLOCK"
  | "PAYMENT_CUSTODY_BLOCK_REVERSAL"
  | "PHONE_CALL_NOTIFICATION_FEE"
  | "PROMOTIONAL_CODE_CREDIT"
  | "DEBIT"
  | "DEBIT_REVERSAL"
  | "DEBT_RECOVERY_NEGOTIATION_FINANCIAL_CHARGES"
  | "RECEIVABLE_ANTICIPATION_GROSS_CREDIT"
  | "RECEIVABLE_ANTICIPATION_FEE"
  | "RECEIVABLE_ANTICIPATION_DEBIT"
  | "RECEIVABLE_ANTICIPATION_PARTNER_SETTLEMENT"
  | "BILL_PAYMENT"
  | "BILL_PAYMENT_FEE"
  | "BILL_PAYMENT_CANCELLED"
  | "BILL_PAYMENT_FEE_CANCELLED"
  | "BILL_PAYMENT_REFUNDED"
  | "POSTAL_SERVICE_FEE"
  | "INTERNAL_TRANSFER_DEBIT"
  | "INTERNAL_TRANSFER_CREDIT"
  | "INTERNAL_TRANSFER_REVERSAL"
  | "CREDIT"
  | "PARTIAL_PAYMENT"
  | "PAYMENT_MESSAGING_NOTIFICATION_FEE"
  | "PAYMENT_SMS_NOTIFICATION_FEE"
  | "PAYMENT_DUNNING_REQUEST_FEE"
  | "PAYMENT_DUNNING_RECEIVED_FEE"
  | "PAYMENT_DUNNING_RECEIVED_IN_CASH_FEE"
  | "PAYMENT_DUNNING_CANCELLATION_FEE"
  | "CUSTOMER_COMMISSION_SETTLEMENT_CREDIT"
  | "CUSTOMER_COMMISSION_SETTLEMENT_DEBIT"
  | "PROMOTIONAL_CODE_DEBIT"
  | "REFUND_REQUEST_FEE"
  | "REFUND_REQUEST_CANCELLED"
  | "REFUND_REQUEST_FEE_REVERSAL"
  | "INVOICE_FEE"
  | "PRODUCT_INVOICE_FEE"
  | "CONSUMER_INVOICE_FEE"
  | "ASAAS_CARD_RECHARGE"
  | "ASAAS_CARD_RECHARGE_REVERSAL"
  | "ASAAS_CARD_BALANCE_REFUND"
  | "CHARGEBACK"
  | "CHARGEBACK_REVERSAL"
  | "ASAAS_CARD_BILL_PAYMENT"
  | "ASAAS_CARD_BILL_PAYMENT_REFUND"
  | "ASAAS_CARD_TRANSACTION"
  | "ASAAS_CARD_CASHBACK"
  | "ASAAS_CARD_CREDIT_VOUCHER"
  | "ASAAS_CARD_CREDIT_VOUCHER_REFUND"
  | "ASAAS_CARD_TRANSACTION_FEE"
  | "ASAAS_CARD_TRANSACTION_WITHDRAWAL_FEE"
  | "ASAAS_CARD_TRANSACTION_IOF_FEE"
  | "ASAAS_CARD_TRANSACTION_REFUND"
  | "ASAAS_CARD_TRANSACTION_FEE_REFUND"
  | "ASAAS_CARD_TRANSACTION_WITHDRAWAL_FEE_REFUND"
  | "ASAAS_CARD_TRANSACTION_PARTIAL_REFUND"
  | "ASAAS_CARD_TRANSACTION_REFUND_CANCELLATION"
  | "ASAAS_CARD_TRANSACTION_PARTIAL_REFUND_CANCELLATION"
  | "ASAAS_MONEY_PAYMENT_COMPROMISED_BALANCE"
  | "ASAAS_MONEY_PAYMENT_COMPROMISED_BALANCE_REFUND"
  | "ASAAS_MONEY_PAYMENT_ANTICIPATION_FEE"
  | "ASAAS_MONEY_PAYMENT_ANTICIPATION_FEE_REFUND"
  | "ASAAS_MONEY_PAYMENT_FINANCING_FEE"
  | "ASAAS_MONEY_PAYMENT_FINANCING_FEE_REFUND"
  | "ASAAS_MONEY_TRANSACTION_CASHBACK"
  | "ASAAS_MONEY_TRANSACTION_CASHBACK_REFUND"
  | "ASAAS_MONEY_TRANSACTION_CHARGEBACK"
  | "ASAAS_MONEY_TRANSACTION_CHARGEBACK_REVERSAL"
  | "CHARGED_FEE_REFUND"
  | "PIX_TRANSACTION_DEBIT"
  | "PIX_TRANSACTION_DEBIT_REFUND"
  | "PIX_TRANSACTION_CREDIT"
  | "PIX_TRANSACTION_CREDIT_FEE"
  | "PIX_TRANSACTION_CREDIT_REFUND"
  | "PIX_TRANSACTION_CREDIT_REFUND_CANCELLATION"
  | "PIX_TRANSACTION_DEBIT_FEE"
  | "CREDIT_BUREAU_REPORT"
  | "CONTRACTUAL_EFFECT_SETTLEMENT"
  | "CONTRACTUAL_EFFECT_SETTLEMENT_REVERSAL"
  | "FREE_PAYMENT_USE"
  | "MOBILE_PHONE_RECHARGE"
  | "REFUND_MOBILE_PHONE_RECHARGE"
  | "CANCEL_MOBILE_PHONE_RECHARGE"
  | "BACEN_JUDICIAL_LOCK"
  | "BACEN_JUDICIAL_UNLOCK"
  | "BACEN_JUDICIAL_TRANSFER"
  | "INSTANT_TEXT_MESSAGE_FEE"
  | "ASAAS_DEBIT_CARD_REQUEST_FEE"
  | "ASAAS_PREPAID_CARD_REQUEST_FEE"
  | "EXTERNAL_SETTLEMENT_CONTRACTUAL_EFFECT_BATCH_CREDIT"
  | "EXTERNAL_SETTLEMENT_CONTRACTUAL_EFFECT_BATCH_REVERSAL"
  | "CHILD_ACCOUNT_KNOWN_YOUR_CUSTOMER_BATCH_FEE"
  | "CONTRACTED_CUSTOMER_PLAN_FEE"
  | "ACCOUNT_INACTIVITY_FEE"
  | "PAYMENT_ORIGIN_CHANNEL_FEE"
  | "PAYMENT_SPLIT_DIVERGENCE_BLOCK"
  | "PAYMENT_SPLIT_DIVERGENCE_BLOCK_REVERSAL"
  | "CUSTOMER_ACCOUNT_PAYMENT_BONUS_FEE"
  | "RECEIVABLE_ANTICIPATION_PAYMENT_FEE"
  | "ASAAS_MONEY_DONATION_DEBIT"
  | "ASAAS_MONEY_DONATION_DEBIT_REFUND"
  | "ASAAS_MONEY_PAYMENT_DEBIT"
  | "ASAAS_MONEY_PAYMENT_DEBIT_REFUND"
  | "CUSTOMER_COMMISSION_CHECKOUT"
  | "RECEIVABLE_ANTICIPATION_CREDIT";

/**
 * Transaction type
 */
export const ApiFinancialTransactionGetResponseFinancialTransactionType = {
  PAYMENT_RECEIVED: "PAYMENT_RECEIVED",
  TRANSFER: "TRANSFER",
  TRANSFER_FEE: "TRANSFER_FEE",
  TRANSFER_REVERSAL: "TRANSFER_REVERSAL",
  REVERSAL: "REVERSAL",
  PAYMENT_REVERSAL: "PAYMENT_REVERSAL",
  PAYMENT_REFUND_CANCELLED: "PAYMENT_REFUND_CANCELLED",
  PAYMENT_FEE: "PAYMENT_FEE",
  PAYMENT_FEE_REVERSAL: "PAYMENT_FEE_REVERSAL",
  PAYMENT_CUSTODY_BLOCK: "PAYMENT_CUSTODY_BLOCK",
  PAYMENT_CUSTODY_BLOCK_REVERSAL: "PAYMENT_CUSTODY_BLOCK_REVERSAL",
  PHONE_CALL_NOTIFICATION_FEE: "PHONE_CALL_NOTIFICATION_FEE",
  PROMOTIONAL_CODE_CREDIT: "PROMOTIONAL_CODE_CREDIT",
  DEBIT: "DEBIT",
  DEBIT_REVERSAL: "DEBIT_REVERSAL",
  DEBT_RECOVERY_NEGOTIATION_FINANCIAL_CHARGES:
    "DEBT_RECOVERY_NEGOTIATION_FINANCIAL_CHARGES",
  RECEIVABLE_ANTICIPATION_GROSS_CREDIT: "RECEIVABLE_ANTICIPATION_GROSS_CREDIT",
  RECEIVABLE_ANTICIPATION_FEE: "RECEIVABLE_ANTICIPATION_FEE",
  RECEIVABLE_ANTICIPATION_DEBIT: "RECEIVABLE_ANTICIPATION_DEBIT",
  RECEIVABLE_ANTICIPATION_PARTNER_SETTLEMENT:
    "RECEIVABLE_ANTICIPATION_PARTNER_SETTLEMENT",
  BILL_PAYMENT: "BILL_PAYMENT",
  BILL_PAYMENT_FEE: "BILL_PAYMENT_FEE",
  BILL_PAYMENT_CANCELLED: "BILL_PAYMENT_CANCELLED",
  BILL_PAYMENT_FEE_CANCELLED: "BILL_PAYMENT_FEE_CANCELLED",
  BILL_PAYMENT_REFUNDED: "BILL_PAYMENT_REFUNDED",
  POSTAL_SERVICE_FEE: "POSTAL_SERVICE_FEE",
  INTERNAL_TRANSFER_DEBIT: "INTERNAL_TRANSFER_DEBIT",
  INTERNAL_TRANSFER_CREDIT: "INTERNAL_TRANSFER_CREDIT",
  INTERNAL_TRANSFER_REVERSAL: "INTERNAL_TRANSFER_REVERSAL",
  CREDIT: "CREDIT",
  PARTIAL_PAYMENT: "PARTIAL_PAYMENT",
  PAYMENT_MESSAGING_NOTIFICATION_FEE: "PAYMENT_MESSAGING_NOTIFICATION_FEE",
  PAYMENT_SMS_NOTIFICATION_FEE: "PAYMENT_SMS_NOTIFICATION_FEE",
  PAYMENT_DUNNING_REQUEST_FEE: "PAYMENT_DUNNING_REQUEST_FEE",
  PAYMENT_DUNNING_RECEIVED_FEE: "PAYMENT_DUNNING_RECEIVED_FEE",
  PAYMENT_DUNNING_RECEIVED_IN_CASH_FEE: "PAYMENT_DUNNING_RECEIVED_IN_CASH_FEE",
  PAYMENT_DUNNING_CANCELLATION_FEE: "PAYMENT_DUNNING_CANCELLATION_FEE",
  CUSTOMER_COMMISSION_SETTLEMENT_CREDIT:
    "CUSTOMER_COMMISSION_SETTLEMENT_CREDIT",
  CUSTOMER_COMMISSION_SETTLEMENT_DEBIT: "CUSTOMER_COMMISSION_SETTLEMENT_DEBIT",
  PROMOTIONAL_CODE_DEBIT: "PROMOTIONAL_CODE_DEBIT",
  REFUND_REQUEST_FEE: "REFUND_REQUEST_FEE",
  REFUND_REQUEST_CANCELLED: "REFUND_REQUEST_CANCELLED",
  REFUND_REQUEST_FEE_REVERSAL: "REFUND_REQUEST_FEE_REVERSAL",
  INVOICE_FEE: "INVOICE_FEE",
  PRODUCT_INVOICE_FEE: "PRODUCT_INVOICE_FEE",
  CONSUMER_INVOICE_FEE: "CONSUMER_INVOICE_FEE",
  ASAAS_CARD_RECHARGE: "ASAAS_CARD_RECHARGE",
  ASAAS_CARD_RECHARGE_REVERSAL: "ASAAS_CARD_RECHARGE_REVERSAL",
  ASAAS_CARD_BALANCE_REFUND: "ASAAS_CARD_BALANCE_REFUND",
  CHARGEBACK: "CHARGEBACK",
  CHARGEBACK_REVERSAL: "CHARGEBACK_REVERSAL",
  ASAAS_CARD_BILL_PAYMENT: "ASAAS_CARD_BILL_PAYMENT",
  ASAAS_CARD_BILL_PAYMENT_REFUND: "ASAAS_CARD_BILL_PAYMENT_REFUND",
  ASAAS_CARD_TRANSACTION: "ASAAS_CARD_TRANSACTION",
  ASAAS_CARD_CASHBACK: "ASAAS_CARD_CASHBACK",
  ASAAS_CARD_CREDIT_VOUCHER: "ASAAS_CARD_CREDIT_VOUCHER",
  ASAAS_CARD_CREDIT_VOUCHER_REFUND: "ASAAS_CARD_CREDIT_VOUCHER_REFUND",
  ASAAS_CARD_TRANSACTION_FEE: "ASAAS_CARD_TRANSACTION_FEE",
  ASAAS_CARD_TRANSACTION_WITHDRAWAL_FEE:
    "ASAAS_CARD_TRANSACTION_WITHDRAWAL_FEE",
  ASAAS_CARD_TRANSACTION_IOF_FEE: "ASAAS_CARD_TRANSACTION_IOF_FEE",
  ASAAS_CARD_TRANSACTION_REFUND: "ASAAS_CARD_TRANSACTION_REFUND",
  ASAAS_CARD_TRANSACTION_FEE_REFUND: "ASAAS_CARD_TRANSACTION_FEE_REFUND",
  ASAAS_CARD_TRANSACTION_WITHDRAWAL_FEE_REFUND:
    "ASAAS_CARD_TRANSACTION_WITHDRAWAL_FEE_REFUND",
  ASAAS_CARD_TRANSACTION_PARTIAL_REFUND:
    "ASAAS_CARD_TRANSACTION_PARTIAL_REFUND",
  ASAAS_CARD_TRANSACTION_REFUND_CANCELLATION:
    "ASAAS_CARD_TRANSACTION_REFUND_CANCELLATION",
  ASAAS_CARD_TRANSACTION_PARTIAL_REFUND_CANCELLATION:
    "ASAAS_CARD_TRANSACTION_PARTIAL_REFUND_CANCELLATION",
  ASAAS_MONEY_PAYMENT_COMPROMISED_BALANCE:
    "ASAAS_MONEY_PAYMENT_COMPROMISED_BALANCE",
  ASAAS_MONEY_PAYMENT_COMPROMISED_BALANCE_REFUND:
    "ASAAS_MONEY_PAYMENT_COMPROMISED_BALANCE_REFUND",
  ASAAS_MONEY_PAYMENT_ANTICIPATION_FEE: "ASAAS_MONEY_PAYMENT_ANTICIPATION_FEE",
  ASAAS_MONEY_PAYMENT_ANTICIPATION_FEE_REFUND:
    "ASAAS_MONEY_PAYMENT_ANTICIPATION_FEE_REFUND",
  ASAAS_MONEY_PAYMENT_FINANCING_FEE: "ASAAS_MONEY_PAYMENT_FINANCING_FEE",
  ASAAS_MONEY_PAYMENT_FINANCING_FEE_REFUND:
    "ASAAS_MONEY_PAYMENT_FINANCING_FEE_REFUND",
  ASAAS_MONEY_TRANSACTION_CASHBACK: "ASAAS_MONEY_TRANSACTION_CASHBACK",
  ASAAS_MONEY_TRANSACTION_CASHBACK_REFUND:
    "ASAAS_MONEY_TRANSACTION_CASHBACK_REFUND",
  ASAAS_MONEY_TRANSACTION_CHARGEBACK: "ASAAS_MONEY_TRANSACTION_CHARGEBACK",
  ASAAS_MONEY_TRANSACTION_CHARGEBACK_REVERSAL:
    "ASAAS_MONEY_TRANSACTION_CHARGEBACK_REVERSAL",
  CHARGED_FEE_REFUND: "CHARGED_FEE_REFUND",
  PIX_TRANSACTION_DEBIT: "PIX_TRANSACTION_DEBIT",
  PIX_TRANSACTION_DEBIT_REFUND: "PIX_TRANSACTION_DEBIT_REFUND",
  PIX_TRANSACTION_CREDIT: "PIX_TRANSACTION_CREDIT",
  PIX_TRANSACTION_CREDIT_FEE: "PIX_TRANSACTION_CREDIT_FEE",
  PIX_TRANSACTION_CREDIT_REFUND: "PIX_TRANSACTION_CREDIT_REFUND",
  PIX_TRANSACTION_CREDIT_REFUND_CANCELLATION:
    "PIX_TRANSACTION_CREDIT_REFUND_CANCELLATION",
  PIX_TRANSACTION_DEBIT_FEE: "PIX_TRANSACTION_DEBIT_FEE",
  CREDIT_BUREAU_REPORT: "CREDIT_BUREAU_REPORT",
  CONTRACTUAL_EFFECT_SETTLEMENT: "CONTRACTUAL_EFFECT_SETTLEMENT",
  CONTRACTUAL_EFFECT_SETTLEMENT_REVERSAL:
    "CONTRACTUAL_EFFECT_SETTLEMENT_REVERSAL",
  FREE_PAYMENT_USE: "FREE_PAYMENT_USE",
  MOBILE_PHONE_RECHARGE: "MOBILE_PHONE_RECHARGE",
  REFUND_MOBILE_PHONE_RECHARGE: "REFUND_MOBILE_PHONE_RECHARGE",
  CANCEL_MOBILE_PHONE_RECHARGE: "CANCEL_MOBILE_PHONE_RECHARGE",
  BACEN_JUDICIAL_LOCK: "BACEN_JUDICIAL_LOCK",
  BACEN_JUDICIAL_UNLOCK: "BACEN_JUDICIAL_UNLOCK",
  BACEN_JUDICIAL_TRANSFER: "BACEN_JUDICIAL_TRANSFER",
  INSTANT_TEXT_MESSAGE_FEE: "INSTANT_TEXT_MESSAGE_FEE",
  ASAAS_DEBIT_CARD_REQUEST_FEE: "ASAAS_DEBIT_CARD_REQUEST_FEE",
  ASAAS_PREPAID_CARD_REQUEST_FEE: "ASAAS_PREPAID_CARD_REQUEST_FEE",
  EXTERNAL_SETTLEMENT_CONTRACTUAL_EFFECT_BATCH_CREDIT:
    "EXTERNAL_SETTLEMENT_CONTRACTUAL_EFFECT_BATCH_CREDIT",
  EXTERNAL_SETTLEMENT_CONTRACTUAL_EFFECT_BATCH_REVERSAL:
    "EXTERNAL_SETTLEMENT_CONTRACTUAL_EFFECT_BATCH_REVERSAL",
  CHILD_ACCOUNT_KNOWN_YOUR_CUSTOMER_BATCH_FEE:
    "CHILD_ACCOUNT_KNOWN_YOUR_CUSTOMER_BATCH_FEE",
  CONTRACTED_CUSTOMER_PLAN_FEE: "CONTRACTED_CUSTOMER_PLAN_FEE",
  ACCOUNT_INACTIVITY_FEE: "ACCOUNT_INACTIVITY_FEE",
  PAYMENT_ORIGIN_CHANNEL_FEE: "PAYMENT_ORIGIN_CHANNEL_FEE",
  PAYMENT_SPLIT_DIVERGENCE_BLOCK: "PAYMENT_SPLIT_DIVERGENCE_BLOCK",
  PAYMENT_SPLIT_DIVERGENCE_BLOCK_REVERSAL:
    "PAYMENT_SPLIT_DIVERGENCE_BLOCK_REVERSAL",
  CUSTOMER_ACCOUNT_PAYMENT_BONUS_FEE: "CUSTOMER_ACCOUNT_PAYMENT_BONUS_FEE",
  RECEIVABLE_ANTICIPATION_PAYMENT_FEE: "RECEIVABLE_ANTICIPATION_PAYMENT_FEE",
  ASAAS_MONEY_DONATION_DEBIT: "ASAAS_MONEY_DONATION_DEBIT",
  ASAAS_MONEY_DONATION_DEBIT_REFUND: "ASAAS_MONEY_DONATION_DEBIT_REFUND",
  ASAAS_MONEY_PAYMENT_DEBIT: "ASAAS_MONEY_PAYMENT_DEBIT",
  ASAAS_MONEY_PAYMENT_DEBIT_REFUND: "ASAAS_MONEY_PAYMENT_DEBIT_REFUND",
  CUSTOMER_COMMISSION_CHECKOUT: "CUSTOMER_COMMISSION_CHECKOUT",
  RECEIVABLE_ANTICIPATION_CREDIT: "RECEIVABLE_ANTICIPATION_CREDIT",
} as const;

export type ApiInstallmentPaymentBookResponseDto = {
  [key: string]: unknown;
};

export type ApiInstallmentGetResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Unique installment identifier in Asaas
   */
  id?: string;
  /**
   * Installment amount
   */
  value?: number;
  /**
   * Net installment amount
   */
  netValue?: number;
  /**
   * Value of each installment
   */
  paymentValue?: number;
  /**
   * Number of installments
   */
  installmentCount?: number;
  billingType?: ApiInstallmentGetResponseBillingType;
  /**
   * Bill settlement date on Asaas
   */
  paymentDate?: Date;
  /**
   * Description of the installment
   */
  description?: string;
  /**
   * Due date of each installment
   */
  expirationDay?: number;
  /**
   * Installment creation date
   */
  dateCreated?: Date;
  /**
   * Unique identifier of the customer to whom the installment belongs
   */
  customer?: string;
  /**
   * Unique identifier of the payment link to which the installment belongs
   */
  paymentLink?: string;
  /**
   * URL of proof of confirmation, receipt, reversal or removal.
   */
  transactionReceiptUrl?: string;
  chargeback?: ApiPaymentChargebackResponseDto;
  creditCard?: ApiPaymentSaveWithCreditCardCreditCardDto;
  /**
   * Indicates whether the installment has been removed
   */
  deleted?: boolean;
};

/**
 * Form of payment
 */
export type ApiInstallmentGetResponseBillingType =
  | "UNDEFINED"
  | "BOLETO"
  | "CREDIT_CARD"
  | "DEBIT_CARD"
  | "TRANSFER"
  | "DEPOSIT"
  | "PIX";

/**
 * Form of payment
 */
export const ApiInstallmentGetResponseBillingType = {
  UNDEFINED: "UNDEFINED",
  BOLETO: "BOLETO",
  CREDIT_CARD: "CREDIT_CARD",
  DEBIT_CARD: "DEBIT_CARD",
  TRANSFER: "TRANSFER",
  DEPOSIT: "DEPOSIT",
  PIX: "PIX",
} as const;

/**
 * Credit card information
 */
export type ApiPaymentSaveWithCreditCardCreditCardDto = {
  /**
   * Last 4 digits of the card used
   */
  creditCardNumber?: string;
  creditCardBrand?: ApiPaymentSaveWithCreditCardCreditCardCreditCardBrand;
  /**
   * Credit card token if tokenization is active.
   */
  creditCardToken?: string;
};

/**
 * Flag of the card used
 */
export type ApiPaymentSaveWithCreditCardCreditCardCreditCardBrand =
  | "VISA"
  | "MASTERCARD"
  | "ELO"
  | "DINERS"
  | "DISCOVER"
  | "AMEX"
  | "HIPERCARD"
  | "CABAL"
  | "BANESCARD"
  | "CREDZ"
  | "SOROCRED"
  | "CREDSYSTEM"
  | "JCB"
  | "UNKNOWN";

/**
 * Flag of the card used
 */
export const ApiPaymentSaveWithCreditCardCreditCardCreditCardBrand = {
  VISA: "VISA",
  MASTERCARD: "MASTERCARD",
  ELO: "ELO",
  DINERS: "DINERS",
  DISCOVER: "DISCOVER",
  AMEX: "AMEX",
  HIPERCARD: "HIPERCARD",
  CABAL: "CABAL",
  BANESCARD: "BANESCARD",
  CREDZ: "CREDZ",
  SOROCRED: "SOROCRED",
  CREDSYSTEM: "CREDSYSTEM",
  JCB: "JCB",
  UNKNOWN: "UNKNOWN",
} as const;

export type ApiInstallmentSaveRequestDto = {
  /**
   * Number of installments
   */
  installmentCount: number;
  /**
   * Unique customer identifier in Asaas
   */
  customer: string;
  /**
   * Value of each installment
   */
  value: number;
  /**
   * Total installment amount
   */
  totalValue?: number;
  billingType: ApiInstallmentSaveRequestBillingType;
  /**
   * Due date of the first installment
   */
  dueDate: Date;
  /**
   * Installment description (max. 500 characters)
   */
  description?: string;
  /**
   * Define whether the payment will be sent via post
   */
  postalService?: boolean;
  /**
   * Days after registration cancellation deadline (only for bank slip)
   */
  daysAfterDueDateToRegistrationCancellation?: number;
  /**
   * Free search field
   */
  paymentExternalReference?: string;
  discount?: ApiPaymentDiscountDto;
  interest?: ApiPaymentInterestRequestDto;
  fine?: ApiPaymentFineRequestDto;
  /**
   * Split Settings
   */
  splits?: Array<{
    /**
     * Asaas wallet identifier that will be transferred
     */
    walletId: string;
    /**
     * Fixed amount to be transferred to the account when the payment is received
     */
    fixedValue?: number;
    /**
     * Percentage of the net value of the charge to be transferred when received
     */
    percentualValue?: number;
    /**
     * (Instalments only). Amount that will be split relative to the total amount that will be paid in installments.
     */
    totalFixedValue?: number;
    /**
     * Split identifier in your system
     */
    externalReference?: string;
    /**
     * Split description
     */
    description?: string;
    /**
     * Installment number to which the split will be linked. Cannot be provided along with the 'totalFixedValue' field
     */
    installmentNumber?: number;
  }>;
};

/**
 * Payment billing type
 */
export type ApiInstallmentSaveRequestBillingType =
  | "UNDEFINED"
  | "BOLETO"
  | "CREDIT_CARD"
  | "PIX";

/**
 * Payment billing type
 */
export const ApiInstallmentSaveRequestBillingType = {
  UNDEFINED: "UNDEFINED",
  BOLETO: "BOLETO",
  CREDIT_CARD: "CREDIT_CARD",
  PIX: "PIX",
} as const;

/**
 * Discount information
 */
export type ApiPaymentDiscountDto = {
  /**
   * Percentage or fixed amount of discount to be applied to the Payment amount
   */
  value?: number;
  /**
   * Days before expiration to apply discount. Ex: 0 = until expiration, 1 = up to one day before, 2 = up to 2 days before, and so on
   */
  dueDateLimitDays?: number;
  type?: ApiPaymentDiscountDiscountType;
};

/**
 * Discount type
 */
export type ApiPaymentDiscountDiscountType = "FIXED" | "PERCENTAGE";

/**
 * Discount type
 */
export const ApiPaymentDiscountDiscountType = {
  FIXED: "FIXED",
  PERCENTAGE: "PERCENTAGE",
} as const;

/**
 * Interest information for payment after due date
 */
export type ApiPaymentInterestRequestDto = {
  /**
   * Percentage of interest per month on the amount charged for payment after maturity
   */
  value?: number;
};

/**
 * Fine information for payment after due date
 */
export type ApiPaymentFineRequestDto = {
  /**
   * Percentage of fine on the amount of the charge for payment after the due date
   */
  value?: number;
  type?: ApiPaymentFineRequestFineType;
};

/**
 * Fine type
 */
export type ApiPaymentFineRequestFineType = "FIXED" | "PERCENTAGE";

/**
 * Fine type
 */
export const ApiPaymentFineRequestFineType = {
  FIXED: "FIXED",
  PERCENTAGE: "PERCENTAGE",
} as const;

export type ApiInstallmentSplitRequestDto = {
  /**
   * Asaas wallet identifier that will be transferred
   */
  walletId: string;
  /**
   * Fixed amount to be transferred to the account when the payment is received
   */
  fixedValue?: number;
  /**
   * Percentage of the net value of the charge to be transferred when received
   */
  percentualValue?: number;
  /**
   * (Instalments only). Amount that will be split relative to the total amount that will be paid in installments.
   */
  totalFixedValue?: number;
  /**
   * Split identifier in your system
   */
  externalReference?: string;
  /**
   * Split description
   */
  description?: string;
  /**
   * Installment number to which the split will be linked. Cannot be provided along with the 'totalFixedValue' field
   */
  installmentNumber?: number;
};

export type ApiInstallmentUpdateSplitRequestDto = {
  /**
   * Split data to update
   */
  splits?: Array<ApiInstallmentSplitRequestDto>;
};

export type ApiInstallmentUpdateSplitResponseDto = {
  /**
   * Split array
   */
  splits?: Array<{
    /**
     * Unique split identifier in Asaas
     */
    id?: string;
    /**
     * Asaas wallet identifier that will be transferred
     */
    walletId?: string;
    /**
     * Fixed amount to be transferred to the account when the charge is received
     */
    fixedValue?: number;
    /**
     * Percentage of the net value of the charge to be transferred when received
     */
    percentualValue?: number;
    /**
     * Amount that will be split relative to the total amount that will be paid
     */
    totalValue?: number;
    cancellationReason?: ApiInstallmentSplitGetResponsePaymentSplitCancellationReason;
    status?: ApiInstallmentSplitGetResponsePaymentSplitStatus;
    /**
     * Unique identifier of split in your system
     */
    externalReference?: string;
    /**
     * Split description
     */
    description?: string;
    /**
     * Installment to which the split is linked
     */
    installmentNumber?: number;
  }>;
};

export type ApiInstallmentSplitGetResponseDto = {
  /**
   * Unique split identifier in Asaas
   */
  id?: string;
  /**
   * Asaas wallet identifier that will be transferred
   */
  walletId?: string;
  /**
   * Fixed amount to be transferred to the account when the charge is received
   */
  fixedValue?: number;
  /**
   * Percentage of the net value of the charge to be transferred when received
   */
  percentualValue?: number;
  /**
   * Amount that will be split relative to the total amount that will be paid
   */
  totalValue?: number;
  cancellationReason?: ApiInstallmentSplitGetResponsePaymentSplitCancellationReason;
  status?: ApiInstallmentSplitGetResponsePaymentSplitStatus;
  /**
   * Unique identifier of split in your system
   */
  externalReference?: string;
  /**
   * Split description
   */
  description?: string;
  /**
   * Installment to which the split is linked
   */
  installmentNumber?: number;
};

/**
 * Reason for canceling the split
 */
export type ApiInstallmentSplitGetResponsePaymentSplitCancellationReason =
  | "PAYMENT_DELETED"
  | "PAYMENT_OVERDUE"
  | "PAYMENT_RECEIVED_IN_CASH"
  | "PAYMENT_REFUNDED"
  | "VALUE_DIVERGENCE_BLOCK"
  | "WALLET_UNABLE_TO_RECEIVE";

/**
 * Reason for canceling the split
 */
export const ApiInstallmentSplitGetResponsePaymentSplitCancellationReason = {
  PAYMENT_DELETED: "PAYMENT_DELETED",
  PAYMENT_OVERDUE: "PAYMENT_OVERDUE",
  PAYMENT_RECEIVED_IN_CASH: "PAYMENT_RECEIVED_IN_CASH",
  PAYMENT_REFUNDED: "PAYMENT_REFUNDED",
  VALUE_DIVERGENCE_BLOCK: "VALUE_DIVERGENCE_BLOCK",
  WALLET_UNABLE_TO_RECEIVE: "WALLET_UNABLE_TO_RECEIVE",
} as const;

/**
 * Split status
 */
export type ApiInstallmentSplitGetResponsePaymentSplitStatus =
  | "PENDING"
  | "AWAITING_CREDIT"
  | "CANCELLED"
  | "DONE"
  | "REFUNDED"
  | "BLOCKED_BY_VALUE_DIVERGENCE";

/**
 * Split status
 */
export const ApiInstallmentSplitGetResponsePaymentSplitStatus = {
  PENDING: "PENDING",
  AWAITING_CREDIT: "AWAITING_CREDIT",
  CANCELLED: "CANCELLED",
  DONE: "DONE",
  REFUNDED: "REFUNDED",
  BLOCKED_BY_VALUE_DIVERGENCE: "BLOCKED_BY_VALUE_DIVERGENCE",
} as const;

export type ApiInstallmentListResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<ApiInstallmentGetResponseDto>;
};

export type ApiInstallmentDeleteResponseDto = {
  /**
   * Indicates whether the installment plan is removed
   */
  deleted?: boolean;
  /**
   * Unique installment identifier in Asaas
   */
  id?: string;
};

export type ApiInstallmentRefundRequestDto = {
  [key: string]: unknown;
};

export type ApiMobilePhoneRechargeGetRequestDto = {
  [key: string]: unknown;
};

export type ApiMobilePhoneRechargeGetResponseDto = {
  /**
   * Unique identifier for cell phone recharge on Asaas
   */
  id?: string;
  /**
   * Recharge value
   */
  value?: number;
  /**
   * Cell phone number that was requested to be recharged
   */
  phoneNumber?: string;
  status?: ApiMobilePhoneRechargeGetResponseMobilePhoneRechargeStatus;
  /**
   * Whether the top-up can be canceled
   */
  canBeCancelled?: boolean;
  /**
   * Name of cell phone operator
   */
  operatorName?: string;
};

/**
 * Recharge status
 */
export type ApiMobilePhoneRechargeGetResponseMobilePhoneRechargeStatus =
  | "PENDING"
  | "CONFIRMED"
  | "CANCELLED"
  | "REFUNDED"
  | "WAITING_CRITICAL_ACTION";

/**
 * Recharge status
 */
export const ApiMobilePhoneRechargeGetResponseMobilePhoneRechargeStatus = {
  PENDING: "PENDING",
  CONFIRMED: "CONFIRMED",
  CANCELLED: "CANCELLED",
  REFUNDED: "REFUNDED",
  WAITING_CRITICAL_ACTION: "WAITING_CRITICAL_ACTION",
} as const;

export type ApiMobilePhoneRechargeFindProviderResponseDto = {
  /**
   * Name of cell phone operator
   */
  name?: string;
  /**
   * Amounts available for recharge
   */
  values?: Array<{
    /**
     * Package name
     */
    name?: string;
    /**
     * Package Description
     */
    description?: string;
    /**
     * Package Bonuses
     */
    bonus?: string;
    /**
     * Minimum top-up amount
     */
    minValue?: number;
    /**
     * Maximum recharge value
     */
    maxValue?: number;
  }>;
};

export type ApiMobilePhoneRechargeFindProviderResponseValuesDto = {
  /**
   * Package name
   */
  name?: string;
  /**
   * Package Description
   */
  description?: string;
  /**
   * Package Bonuses
   */
  bonus?: string;
  /**
   * Minimum top-up amount
   */
  minValue?: number;
  /**
   * Maximum recharge value
   */
  maxValue?: number;
};

export type ApiMobilePhoneRechargeSaveRequestDto = {
  /**
   * Recharge value
   */
  value: number;
  /**
   * Cellphone number
   */
  phoneNumber: string;
};

export type ApiMobilePhoneRechargeListResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<ApiMobilePhoneRechargeGetResponseDto>;
};

export type ApiMyAccountDisableAccountResponseDto = {
  /**
   * Deletion information
   */
  observations?: string;
};

export type ApiMyAccountGetAccountFeesResponseDto = {
  payment?: ApiMyAccountGetAccountFeesPaymentDto;
  transfer?: ApiMyAccountGetAccountFeesTransferDto;
  notification?: ApiMyAccountGetAccountFeesNotificationDto;
  creditBureauReport?: ApiMyAccountGetAccountFeesCreditBureauReportDto;
  invoice?: ApiMyAccountGetAccountFeesInvoiceDto;
  anticipation?: ApiMyAccountGetAccountFeesAnticipationDto;
};

/**
 * Billing fees
 */
export type ApiMyAccountGetAccountFeesPaymentDto = {
  bankSlip?: ApiMyAccountGetAccountFeesPaymentBankSlipDto;
  creditCard?: ApiMyAccountGetAccountFeesPaymentCreditCardDto;
  debitCard?: ApiMyAccountGetAccountFeesPaymentDebitCardDto;
  pix?: ApiMyAccountGetAccountFeesPaymentPixDto;
};

/**
 * Boleto fees
 */
export type ApiMyAccountGetAccountFeesPaymentBankSlipDto = {
  /**
   * Fee per charge
   */
  defaultValue?: number;
  /**
   * Promotional fee (If any)
   */
  discountValue?: number;
  /**
   * Promotional fee expiration date (If any)
   */
  expirationDate?: Date;
  /**
   * Days to receive billing
   */
  daysToReceive?: number;
};

/**
 * Credit card fees
 */
export type ApiMyAccountGetAccountFeesPaymentCreditCardDto = {
  /**
   * Operating fee per charge
   */
  operationValue?: number;
  /**
   * Spot percentage rate
   */
  oneInstallmentPercentage?: number;
  /**
   * Percentage rate for 2 to 6 installments
   */
  upToSixInstallmentsPercentage?: number;
  /**
   * Percentage rate for 7 to 12 installments
   */
  upToTwelveInstallmentsPercentage?: number;
  /**
   * Promotional cash percentage rate (If any)
   */
  discountOneInstallmentPercentage?: number;
  /**
   * Percentage rate for 2 to 6 promotional installments (If any)
   */
  discountUpToSixInstallmentsPercentage?: number;
  /**
   * Percentage rate for 7 to 12 promotional installments (If any)
   */
  discountUpToTwelveInstallmentsPercentage?: number;
  /**
   * Promotional fee expiration date (If any)
   */
  discountExpiration?: Date;
  /**
   * Days to receive billing
   */
  daysToReceive?: number;
};

/**
 * Debit card fees
 */
export type ApiMyAccountGetAccountFeesPaymentDebitCardDto = {
  /**
   * Operating fee per charge
   */
  operationValue?: number;
  /**
   * Percentage rate per charge
   */
  defaultPercentage?: number;
  /**
   * Days to receive billing
   */
  daysToReceive?: number;
};

/**
 * Pix Fees
 */
export type ApiMyAccountGetAccountFeesPaymentPixDto = {
  /**
   * Fixed fee (If any)
   */
  fixedFeeValue?: number;
  /**
   * Promotional fixed rate (If any)
   */
  fixedFeeValueWithDiscount?: number;
  /**
   * Percentage rate (If any)
   */
  percentageFee?: number;
  /**
   * Minimum fixed rate in case of percentage rate
   */
  minimumFeeValue?: number;
  /**
   * Maximum fixed rate in case of percentage rate
   */
  maximumFeeValue?: number;
  /**
   * Promotional fee expiration date (If any)
   */
  discountExpiration?: Date;
  /**
   * Number of free transactions per month
   */
  monthlyCreditsWithoutFee?: number;
  /**
   * How many transactions have you received this month?
   */
  creditsReceivedOfCurrentMonth?: number;
};

/**
 * Transfer fees
 */
export type ApiMyAccountGetAccountFeesTransferDto = {
  /**
   * Number of monthly free transactions
   */
  monthlyTransfersWithoutFee?: number;
  ted?: ApiMyAccountGetAccountFeesTransferTedDto;
  pix?: ApiMyAccountGetAccountFeesTransferPixDto;
};

/**
 * Fees for TED transfers
 */
export type ApiMyAccountGetAccountFeesTransferTedDto = {
  /**
   * Transfer fee via TED
   */
  feeValue?: number;
  /**
   * Indicates whether the number of monthly free transactions considers TED
   */
  consideredInMonthlyTransfersWithoutFee?: boolean;
};

/**
 * Fees for Pix transfers
 */
export type ApiMyAccountGetAccountFeesTransferPixDto = {
  /**
   * Fee for sending transfers via Pix
   */
  feeValue?: number;
  /**
   * Promotional fee (If any)
   */
  discountValue?: number;
  /**
   * Promotional fee expiration date (If any)
   */
  expirationDate?: Date;
  /**
   * Indicates whether the number of free monthly transactions considers Pix
   */
  consideredInMonthlyTransfersWithoutFee?: boolean;
};

/**
 * Notification fees
 */
export type ApiMyAccountGetAccountFeesNotificationDto = {
  /**
   * Fees per voice robot call
   */
  phoneCallFeeValue?: number;
  /**
   * Fees for notifications via WhatsApp
   */
  whatsAppFeeValue?: number;
  /**
   * Fees for sending emails and SMS
   */
  messagingFeeValue?: number;
};

/**
 * Serasa consultation fees
 */
export type ApiMyAccountGetAccountFeesCreditBureauReportDto = {
  /**
   * Fee for Serasa consultation for natural person
   */
  naturalPersonFeeValue?: number;
  /**
   * Fee for Serasa consultation for legal person
   */
  legalPersonFeeValue?: number;
};

/**
 * Invoice fees
 */
export type ApiMyAccountGetAccountFeesInvoiceDto = {
  /**
   * Fee per service note issued
   */
  feeValue?: number;
};

/**
 * Anticipation fees
 */
export type ApiMyAccountGetAccountFeesAnticipationDto = {
  creditCard?: ApiMyAccountGetAccountFeesAnticipationCreditCardDto;
  bankSlip?: ApiMyAccountGetAccountFeesAnticipationBankSlipDto;
};

/**
 * Credit card anticipation fee
 */
export type ApiMyAccountGetAccountFeesAnticipationCreditCardDto = {
  /**
   * Monthly fee for upfront charges
   */
  detachedMonthlyFeeValue?: number;
  /**
   * Monthly fee for installment payments
   */
  installmentMonthlyFeeValue?: number;
};

/**
 * Anticipation fee on boletos
 */
export type ApiMyAccountGetAccountFeesAnticipationBankSlipDto = {
  /**
   * Monthly fee for invoice charges
   */
  monthlyFeePercentage?: number;
};

export type ApiMyAccountGetAccountNumberResponseDto = {
  /**
   * Account agency
   */
  agency?: string;
  /**
   * Account number
   */
  account?: string;
  /**
   * Account digit
   */
  accountDigit?: string;
};

export type ApiMyAccountGetStatusResponseDto = {
  /**
   * Unique account identifier in Asaas
   */
  id?: string;
  commercialInfo?: ApiMyAccountGetStatusResponseStatus;
  bankAccountInfo?: ApiMyAccountGetStatusResponseStatus;
  documentation?: ApiMyAccountGetStatusResponseStatus;
  general?: ApiMyAccountGetStatusResponseStatus;
};

/**
 * Status of sent business data
 */
export type ApiMyAccountGetStatusResponseStatus =
  | "PENDING"
  | "APPROVED"
  | "REJECTED"
  | "AWAITING_APPROVAL";

/**
 * Status of sent business data
 */
export const ApiMyAccountGetStatusResponseStatus = {
  PENDING: "PENDING",
  APPROVED: "APPROVED",
  REJECTED: "REJECTED",
  AWAITING_APPROVAL: "AWAITING_APPROVAL",
} as const;

export type ApiNotificationBatchUpdateRequestDto = {
  /**
   * Unique customer identifier in Asaas
   */
  customer: string;
  /**
   * List of notification information
   */
  notifications?: Array<{
    /**
     * Unique identifier of the notification to be updated
     */
    id: string;
    /**
     * Enable/disable notification
     */
    enabled?: boolean;
    /**
     * enable/disable the email sent to you
     */
    emailEnabledForProvider?: boolean;
    /**
     * enable/disable the SMS sent to you
     */
    smsEnabledForProvider?: boolean;
    /**
     * enable/disable the email sent to your customer
     */
    emailEnabledForCustomer?: boolean;
    /**
     * enable/disable the SMS sent to your customer
     */
    smsEnabledForCustomer?: boolean;
    /**
     * enable/disable voice notification sent to your customer
     */
    phoneCallEnabledForCustomer?: boolean;
    /**
     * enable/disable WhatsApp messages for your customer
     */
    whatsappEnabledForCustomer?: boolean;
    /**
     * Specifies how many days before the due date the notification must be sent.
     * For the `PAYMENT_DUEDATE_WARNING` event, the accepted values are: `0`, `5`, `10`, `15` and `30`
     * For the `PAYMENT_OVERDUE` event, the accepted values are: `1`, `7`, `15` and `30`
     */
    scheduleOffset?: 0 | 1 | 5 | 7 | 10 | 15 | 30;
  }>;
};

export type ApiNotificationUpdateRequestDto = {
  /**
   * Unique identifier of the notification to be updated
   */
  id: string;
  /**
   * Enable/disable notification
   */
  enabled?: boolean;
  /**
   * enable/disable the email sent to you
   */
  emailEnabledForProvider?: boolean;
  /**
   * enable/disable the SMS sent to you
   */
  smsEnabledForProvider?: boolean;
  /**
   * enable/disable the email sent to your customer
   */
  emailEnabledForCustomer?: boolean;
  /**
   * enable/disable the SMS sent to your customer
   */
  smsEnabledForCustomer?: boolean;
  /**
   * enable/disable voice notification sent to your customer
   */
  phoneCallEnabledForCustomer?: boolean;
  /**
   * enable/disable WhatsApp messages for your customer
   */
  whatsappEnabledForCustomer?: boolean;
  /**
   * Specifies how many days before the due date the notification must be sent.
   * For the `PAYMENT_DUEDATE_WARNING` event, the accepted values are: `0`, `5`, `10`, `15` and `30`
   * For the `PAYMENT_OVERDUE` event, the accepted values are: `1`, `7`, `15` and `30`
   */
  scheduleOffset?: 0 | 1 | 5 | 7 | 10 | 15 | 30;
};

export type ApiNotificationBatchUpdateResponseDto = {
  /**
   * List of notification information
   */
  notifications?: Array<{
    /**
     * Object type
     */
    object?: string;
    /**
     * Unique notification identifier
     */
    id?: string;
    /**
     * Unique customer identifier
     */
    customer?: string;
    /**
     * Indicates whether notification is enabled
     */
    enabled?: boolean;
    /**
     * Indicates whether the email sent to you is enabled or disabled
     */
    emailEnabledForProvider?: boolean;
    /**
     * Indicates whether the SMS sent to you is enabled or disabled
     */
    smsEnabledForProvider?: boolean;
    /**
     * Indicates whether the email sent to the customer is enabled or disabled
     */
    emailEnabledForCustomer?: boolean;
    /**
     * Indicates whether the SMS sent to the customer is enabled or disabled
     */
    smsEnabledForCustomer?: boolean;
    /**
     * Indicates whether voice notification to the customer is enabled or disabled
     */
    phoneCallEnabledForCustomer?: boolean;
    /**
     * Indicates whether the WhatsApp notification sent to the customer is enabled or disabled
     */
    whatsappEnabledForCustomer?: boolean;
    event?: ApiNotificationGetResponseNotificationEvent;
    /**
     * Specifies how many days before the due date the notification must be sent. Valid only for the `PAYMENT_DUEDATE_WARNING` and `PAYMENT_OVERDUE` events
     */
    scheduleOffset?: 0 | 1 | 5 | 7 | 10 | 15 | 30;
    /**
     * Indicates whether the notification was deleted
     */
    deleted?: boolean;
  }>;
};

export type ApiNotificationGetResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Unique notification identifier
   */
  id?: string;
  /**
   * Unique customer identifier
   */
  customer?: string;
  /**
   * Indicates whether notification is enabled
   */
  enabled?: boolean;
  /**
   * Indicates whether the email sent to you is enabled or disabled
   */
  emailEnabledForProvider?: boolean;
  /**
   * Indicates whether the SMS sent to you is enabled or disabled
   */
  smsEnabledForProvider?: boolean;
  /**
   * Indicates whether the email sent to the customer is enabled or disabled
   */
  emailEnabledForCustomer?: boolean;
  /**
   * Indicates whether the SMS sent to the customer is enabled or disabled
   */
  smsEnabledForCustomer?: boolean;
  /**
   * Indicates whether voice notification to the customer is enabled or disabled
   */
  phoneCallEnabledForCustomer?: boolean;
  /**
   * Indicates whether the WhatsApp notification sent to the customer is enabled or disabled
   */
  whatsappEnabledForCustomer?: boolean;
  event?: ApiNotificationGetResponseNotificationEvent;
  /**
   * Specifies how many days before the due date the notification must be sent. Valid only for the `PAYMENT_DUEDATE_WARNING` and `PAYMENT_OVERDUE` events
   */
  scheduleOffset?: 0 | 1 | 5 | 7 | 10 | 15 | 30;
  /**
   * Indicates whether the notification was deleted
   */
  deleted?: boolean;
};

/**
 * Kind of event
 */
export type ApiNotificationGetResponseNotificationEvent =
  | "PAYMENT_CREATED"
  | "PAYMENT_UPDATED"
  | "PAYMENT_RECEIVED"
  | "PAYMENT_OVERDUE"
  | "PAYMENT_DUEDATE_WARNING"
  | "SEND_LINHA_DIGITAVEL";

/**
 * Kind of event
 */
export const ApiNotificationGetResponseNotificationEvent = {
  PAYMENT_CREATED: "PAYMENT_CREATED",
  PAYMENT_UPDATED: "PAYMENT_UPDATED",
  PAYMENT_RECEIVED: "PAYMENT_RECEIVED",
  PAYMENT_OVERDUE: "PAYMENT_OVERDUE",
  PAYMENT_DUEDATE_WARNING: "PAYMENT_DUEDATE_WARNING",
  SEND_LINHA_DIGITAVEL: "SEND_LINHA_DIGITAVEL",
} as const;

export type ApiNotificationListResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<ApiNotificationGetResponseDto>;
};

export type ApiPaymentCampaignPathIdRequestDto = {
  [key: string]: unknown;
};

export type ApiPaymentCampaignGetResponseDto = {
  /**
   * Unique identifier for your payments link in Asaas
   */
  id?: string;
  /**
   * Payment link name
   */
  name?: string;
  /**
   * Value of the payment link, if not informed, the payer can inform how much they want to pay
   */
  value?: number;
  /**
   * If the payments link is active
   */
  active?: boolean;
  chargeType?: ApiPaymentCampaignGetResponseChargeType;
  /**
   * Payments link access link
   */
  url?: string;
  billingType?: ApiPaymentCampaignGetResponseBillingType;
  subscriptionCycle?: ApiPaymentCampaignGetResponseCycle;
  /**
   * Payments link description
   */
  description?: string;
  /**
   * End date
   */
  endDate?: Date;
  /**
   * Indicates whether the payment link has been removed
   */
  deleted?: boolean;
  /**
   * The number of views of your payments link
   */
  viewCount?: number;
  /**
   * Maximum number of installments that your customer can pay in installments for the payment link, if it is Installment.
   */
  maxInstallmentCount?: number;
  /**
   * Number of business days that your customer can pay after the invoice is generated (For payment method such as Boleto)
   */
  dueDateLimitDays?: number;
  /**
   * Defines whether customers registered via the payments link will have notifications enabled
   */
  notificationEnabled?: boolean;
  /**
   * Defines whether filling in the address will be obligatory in the charges.
   */
  isAddressRequired?: boolean;
  /**
   * Free search field.
   */
  externalReference?: string;
};

/**
 * Charge type
 */
export type ApiPaymentCampaignGetResponseChargeType =
  | "DETACHED"
  | "RECURRENT"
  | "INSTALLMENT";

/**
 * Charge type
 */
export const ApiPaymentCampaignGetResponseChargeType = {
  DETACHED: "DETACHED",
  RECURRENT: "RECURRENT",
  INSTALLMENT: "INSTALLMENT",
} as const;

/**
 * Allowed payment method
 */
export type ApiPaymentCampaignGetResponseBillingType =
  | "UNDEFINED"
  | "BOLETO"
  | "CREDIT_CARD"
  | "PIX";

/**
 * Allowed payment method
 */
export const ApiPaymentCampaignGetResponseBillingType = {
  UNDEFINED: "UNDEFINED",
  BOLETO: "BOLETO",
  CREDIT_CARD: "CREDIT_CARD",
  PIX: "PIX",
} as const;

/**
 * Billing frequency, if the chargeType is RECURRENT
 */
export type ApiPaymentCampaignGetResponseCycle =
  | "WEEKLY"
  | "BIWEEKLY"
  | "MONTHLY"
  | "BIMONTHLY"
  | "QUARTERLY"
  | "SEMIANNUALLY"
  | "YEARLY";

/**
 * Billing frequency, if the chargeType is RECURRENT
 */
export const ApiPaymentCampaignGetResponseCycle = {
  WEEKLY: "WEEKLY",
  BIWEEKLY: "BIWEEKLY",
  MONTHLY: "MONTHLY",
  BIMONTHLY: "BIMONTHLY",
  QUARTERLY: "QUARTERLY",
  SEMIANNUALLY: "SEMIANNUALLY",
  YEARLY: "YEARLY",
} as const;

export type ApiPaymentCampaignSaveRequestDto = {
  /**
   * Payment link name
   */
  name: string;
  /**
   * Payments link description
   */
  description?: string;
  /**
   * End date
   */
  endDate?: string;
  /**
   * Value of the payment link, if not informed, the payer can inform how much they want to pay
   */
  value?: number;
  billingType: ApiPaymentCampaignSaveRequestBillingType;
  chargeType: ApiPaymentCampaignSaveRequestChargeType;
  /**
   * Number of business days that your customer can pay after the invoice is generated (For payment method such as Boleto)
   */
  dueDateLimitDays?: number;
  subscriptionCycle?: ApiPaymentCampaignSaveRequestCycle;
  /**
   * Maximum number of installments that your customer can pay in installments for the payment link if the billing method selected is Installments. If not informed, the default value will be 1 installment
   */
  maxInstallmentCount?: number;
  /**
   * Free search field.
   */
  externalReference?: string;
  /**
   * Defines whether customers registered via the payments link will have notifications enabled. If not informed, the default value will be true
   */
  notificationEnabled?: boolean;
  callback?: ApiPaymentCallbackRequestDto;
  /**
   * True to make it mandatory to fill in address data at checkout.
   */
  isAddressRequired?: boolean;
};

/**
 * Allowed payment method
 */
export type ApiPaymentCampaignSaveRequestBillingType =
  | "UNDEFINED"
  | "BOLETO"
  | "CREDIT_CARD"
  | "PIX";

/**
 * Allowed payment method
 */
export const ApiPaymentCampaignSaveRequestBillingType = {
  UNDEFINED: "UNDEFINED",
  BOLETO: "BOLETO",
  CREDIT_CARD: "CREDIT_CARD",
  PIX: "PIX",
} as const;

/**
 * Charge type
 */
export type ApiPaymentCampaignSaveRequestChargeType =
  | "DETACHED"
  | "RECURRENT"
  | "INSTALLMENT";

/**
 * Charge type
 */
export const ApiPaymentCampaignSaveRequestChargeType = {
  DETACHED: "DETACHED",
  RECURRENT: "RECURRENT",
  INSTALLMENT: "INSTALLMENT",
} as const;

/**
 * Billing frequency, if the chargeType is RECURRENT
 */
export type ApiPaymentCampaignSaveRequestCycle =
  | "WEEKLY"
  | "BIWEEKLY"
  | "MONTHLY"
  | "BIMONTHLY"
  | "QUARTERLY"
  | "SEMIANNUALLY"
  | "YEARLY";

/**
 * Billing frequency, if the chargeType is RECURRENT
 */
export const ApiPaymentCampaignSaveRequestCycle = {
  WEEKLY: "WEEKLY",
  BIWEEKLY: "BIWEEKLY",
  MONTHLY: "MONTHLY",
  BIMONTHLY: "BIMONTHLY",
  QUARTERLY: "QUARTERLY",
  SEMIANNUALLY: "SEMIANNUALLY",
  YEARLY: "YEARLY",
} as const;

/**
 * Automatic redirection information after the payment of the link payment
 */
export type ApiPaymentCallbackRequestDto = {
  /**
   * URL that the customer will be redirected to after successful payment of the invoice or payment link
   */
  successUrl: string;
  /**
   * Define whether the customer will be automatically redirected or will just be informed with a button to return to the website. The default is true, if you want to disable it, enter false
   */
  autoRedirect?: boolean;
};

export type ApiPaymentCampaignUpdateRequestDto = {
  /**
   * Payment link name
   */
  name?: string;
  /**
   * Payments link description
   */
  description?: string;
  /**
   * End date
   */
  endDate?: string;
  /**
   * Value of the payment link, if not informed, the payer can inform how much they want to pay
   */
  value?: number;
  /**
   * Determines whether the payments link is active
   */
  active?: boolean;
  billingType?: ApiPaymentCampaignUpdateRequestBillingType;
  chargeType?: ApiPaymentCampaignUpdateRequestChargeType;
  /**
   * Number of business days that your customer can pay after the invoice is generated (For payment method such as Boleto)
   */
  dueDateLimitDays?: number;
  subscriptionCycle?: ApiPaymentCampaignUpdateRequestCycle;
  /**
   * Maximum number of installments that your customer can pay in installments for the payment link if the billing method selected is Installments. If not informed, the default value will be 1 installment
   */
  maxInstallmentCount?: number;
  /**
   * Free search field.
   */
  externalReference?: string;
  /**
   * Defines whether customers registered via the payments link will have notifications enabled. If not informed, the default value will be true
   */
  notificationEnabled?: boolean;
  callback?: ApiPaymentCallbackRequestDto;
};

/**
 * Allowed payment method
 */
export type ApiPaymentCampaignUpdateRequestBillingType =
  | "UNDEFINED"
  | "BOLETO"
  | "CREDIT_CARD"
  | "PIX";

/**
 * Allowed payment method
 */
export const ApiPaymentCampaignUpdateRequestBillingType = {
  UNDEFINED: "UNDEFINED",
  BOLETO: "BOLETO",
  CREDIT_CARD: "CREDIT_CARD",
  PIX: "PIX",
} as const;

/**
 * Charge type
 */
export type ApiPaymentCampaignUpdateRequestChargeType =
  | "DETACHED"
  | "RECURRENT"
  | "INSTALLMENT";

/**
 * Charge type
 */
export const ApiPaymentCampaignUpdateRequestChargeType = {
  DETACHED: "DETACHED",
  RECURRENT: "RECURRENT",
  INSTALLMENT: "INSTALLMENT",
} as const;

/**
 * Billing frequency, if the chargeType is RECURRENT
 */
export type ApiPaymentCampaignUpdateRequestCycle =
  | "WEEKLY"
  | "BIWEEKLY"
  | "MONTHLY"
  | "BIMONTHLY"
  | "QUARTERLY"
  | "SEMIANNUALLY"
  | "YEARLY";

/**
 * Billing frequency, if the chargeType is RECURRENT
 */
export const ApiPaymentCampaignUpdateRequestCycle = {
  WEEKLY: "WEEKLY",
  BIWEEKLY: "BIWEEKLY",
  MONTHLY: "MONTHLY",
  BIMONTHLY: "BIMONTHLY",
  QUARTERLY: "QUARTERLY",
  SEMIANNUALLY: "SEMIANNUALLY",
  YEARLY: "YEARLY",
} as const;

export type ApiPaymentCampaignListResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<ApiPaymentCampaignGetResponseDto>;
};

export type ApiPaymentCampaignDeleteResponseDto = {
  /**
   * Indicates whether the payment link has been removed
   */
  deleted?: boolean;
  /**
   * Unique identifier for your payments link in Asaas
   */
  id?: string;
};

export type ApiPaymentCampaignFilePathIdRequestDto = {
  [key: string]: unknown;
};

export type ApiPaymentCampaignFileGetResponseDto = {
  /**
   * Unique payment link image identifier in Asaas
   */
  id?: string;
  /**
   * Determines if this is the main image
   */
  main?: boolean;
  image?: ApiPaymentCampaignFileImageResponseDto;
};

/**
 * Payments link image information
 */
export type ApiPaymentCampaignFileImageResponseDto = {
  /**
   * Original image name
   */
  originalName?: string;
  /**
   * Image size
   */
  size?: number;
  /**
   * Image extension
   */
  extension?: string;
  /**
   * Link to download the image preview
   */
  previewUrl?: string;
  /**
   * Link to download the image
   */
  downloadUrl?: string;
};

export type ApiPaymentCampaignFileSaveRequestDto = {
  /**
   * true to set as the main image
   */
  main?: boolean;
  image?: File;
};

export type ApiPaymentCampaignFileListResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<ApiPaymentCampaignFileGetResponseDto>;
};

export type ApiPaymentCampaignFileDeleteResponseDto = {
  /**
   * Indicates whether the image was removed
   */
  deleted?: boolean;
  /**
   * Unique payment link image identifier in Asaas
   */
  id?: string;
};

export type ApiPaymentCheckoutConfigGetResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Logo background color
   */
  logoBackgroundColor?: string;
  /**
   * Background color of your information
   */
  infoBackgroundColor?: string;
  /**
   * Font color of your information
   */
  fontColor?: string;
  /**
   * Indicates whether personalization is enabled
   */
  enabled?: boolean;
  /**
   * Logo download link
   */
  logoUrl?: string;
  /**
   * Invoice personalization analysis notes
   */
  observations?: string;
  status?: ApiPaymentCheckoutConfigGetResponseCustomerInvoiceConfigStatus;
};

/**
 * Invoice personalization status
 */
export type ApiPaymentCheckoutConfigGetResponseCustomerInvoiceConfigStatus =
  | "AWAITING_APPROVAL"
  | "APPROVED"
  | "REJECTED";

/**
 * Invoice personalization status
 */
export const ApiPaymentCheckoutConfigGetResponseCustomerInvoiceConfigStatus = {
  AWAITING_APPROVAL: "AWAITING_APPROVAL",
  APPROVED: "APPROVED",
  REJECTED: "REJECTED",
} as const;

export type ApiPaymentCheckoutConfigSaveRequestDto = {
  /**
   * Logo background color
   */
  logoBackgroundColor: string;
  /**
   * Background color of your information
   */
  infoBackgroundColor: string;
  /**
   * Font color of your information
   */
  fontColor: string;
  /**
   * Indicates whether personalization is enabled
   */
  enabled?: boolean;
  logoFile?: File;
};

export type ApiPaymentPayWithCreditCardRequestDto = {
  creditCard?: ApiCreditCardRequestDto;
  creditCardHolderInfo?: ApiCreditCardHolderInfoRequestDto;
  /**
   * Credit card token for using the credit card tokenization functionality. If informed, the fields above are not mandatory.
   */
  creditCardToken?: string;
};

export type ApiPaymentGetResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Unique payment identifier in Asaas
   */
  id?: string;
  /**
   * Payment creation date
   */
  dateCreated?: Date;
  /**
   * Unique identifier of the customer to whom the payment belongs
   */
  customer?: string;
  /**
   * Unique subscription identifier (when recurring billing)
   */
  subscription?: string;
  /**
   * Unique installment identifier (when billing in installments)
   */
  installment?: string;
  /**
   * Unique identifier of the payments link to which the payment belongs
   */
  paymentLink?: string;
  /**
   * Payment amount
   */
  value?: number;
  /**
   * Net value of the charge after discounting the Asaas fee
   */
  netValue?: number;
  /**
   * Original amount of charge (filled when paid with interest and fine)
   */
  originalValue?: number;
  /**
   * Calculated amount of interest and fine that must be paid after the charge is due
   */
  interestValue?: number;
  /**
   * Description of the payment
   */
  description?: string;
  billingType?: ApiPaymentGetResponseBillingType;
  creditCard?: ApiPaymentSaveWithCreditCardCreditCardDto;
  /**
   * Informs whether the charge can be paid after the due date (Only for bank slip)
   */
  canBePaidAfterDueDate?: boolean;
  /**
   * Unique identifier of the Pix transaction to which the payment belongs
   */
  pixTransaction?: string;
  /**
   * Unique identifier of the static QrCode generated for a given Pix key
   */
  pixQrCodeId?: string;
  status?: ApiPaymentGetResponsePaymentStatus;
  /**
   * Payment due date
   */
  dueDate?: Date;
  /**
   * Original due date upon creation of the payment
   */
  originalDueDate?: Date;
  /**
   * Payment date on Asaas
   */
  paymentDate?: Date;
  /**
   * Date on which the customer paid the bank slip
   */
  clientPaymentDate?: Date;
  /**
   * Parcel number
   */
  installmentNumber?: number;
  /**
   * Invoice URL
   */
  invoiceUrl?: string;
  /**
   * Bill number
   */
  invoiceNumber?: string;
  /**
   * Free search field
   */
  externalReference?: string;
  /**
   * Determines if the payment has been removed
   */
  deleted?: boolean;
  /**
   * Defines whether the charge was anticipated or is in the process of being anticipated
   */
  anticipated?: boolean;
  /**
   * Determines whether the charge is anticipated
   */
  anticipable?: boolean;
  /**
   * Date when the credit became available
   */
  creditDate?: Date;
  /**
   * Estimated date when the credit will be available
   */
  estimatedCreditDate?: Date;
  /**
   * URL of proof of confirmation, receipt, reversal or removal
   */
  transactionReceiptUrl?: string;
  /**
   * Unique identification of the bank slip
   */
  nossoNumero?: string;
  /**
   * URL to download the bank slip
   */
  bankSlipUrl?: string;
  discount?: ApiPaymentDiscountDto;
  fine?: ApiPaymentFineResponseDto;
  interest?: ApiPaymentInterestResponseDto;
  /**
   * Split Settings
   */
  split?: Array<{
    /**
     * Unique split identifier in Asaas
     */
    id?: string;
    /**
     * Asaas wallet identifier that will be transferred
     */
    walletId?: string;
    /**
     * Fixed amount to be transferred to the account when the charge is received
     */
    fixedValue?: number;
    /**
     * Percentage of the net value of the charge to be transferred when received
     */
    percentualValue?: number;
    /**
     * Amount that will be split relative to the total amount that will be paid
     */
    totalValue?: number;
    cancellationReason?: ApiPaymentSplitGetResponsePaymentSplitCancellationReason;
    status?: ApiPaymentSplitGetResponsePaymentSplitStatus;
    /**
     * Unique identifier of split in your system
     */
    externalReference?: string;
    /**
     * Split description
     */
    description?: string;
  }>;
  /**
   * Define whether the payment will be sent via post
   */
  postalService?: boolean;
  /**
   * Days after registration cancellation deadline (only for bank slip)
   */
  daysAfterDueDateToRegistrationCancellation?: number;
  chargeback?: ApiPaymentChargebackResponseDto;
  /**
   * Refunds information
   */
  refunds?: Array<{
    /**
     * Refund creation date
     */
    dateCreated?: Date;
    status?: ApiPaymentRefundGetResponsePaymentRefundStatus;
    /**
     * Refund value
     */
    value?: number;
    /**
     * (Pix only) Unique identifier of the Pix transaction at the Central Bank
     */
    endToEndIdentifier?: string;
    /**
     * Description of the refund
     */
    description?: string;
    /**
     * Refund effective date
     */
    effectiveDate?: Date;
    /**
     * Transaction receipt link
     */
    transactionReceiptUrl?: string;
    /**
     * Refunded Splits, if any
     */
    refundedSplits?: Array<{
      /**
       * Unique split identifier
       */
      id?: string;
      /**
       * Refunded value
       */
      value?: number;
      /**
       * Indicates whether the split was refunded
       */
      done?: boolean;
    }>;
  }>;
};

/**
 * Payment billing type
 */
export type ApiPaymentGetResponseBillingType =
  | "UNDEFINED"
  | "BOLETO"
  | "CREDIT_CARD"
  | "DEBIT_CARD"
  | "TRANSFER"
  | "DEPOSIT"
  | "PIX";

/**
 * Payment billing type
 */
export const ApiPaymentGetResponseBillingType = {
  UNDEFINED: "UNDEFINED",
  BOLETO: "BOLETO",
  CREDIT_CARD: "CREDIT_CARD",
  DEBIT_CARD: "DEBIT_CARD",
  TRANSFER: "TRANSFER",
  DEPOSIT: "DEPOSIT",
  PIX: "PIX",
} as const;

/**
 * Payment status
 */
export type ApiPaymentGetResponsePaymentStatus =
  | "PENDING"
  | "RECEIVED"
  | "CONFIRMED"
  | "OVERDUE"
  | "REFUNDED"
  | "RECEIVED_IN_CASH"
  | "REFUND_REQUESTED"
  | "REFUND_IN_PROGRESS"
  | "CHARGEBACK_REQUESTED"
  | "CHARGEBACK_DISPUTE"
  | "AWAITING_CHARGEBACK_REVERSAL"
  | "DUNNING_REQUESTED"
  | "DUNNING_RECEIVED"
  | "AWAITING_RISK_ANALYSIS";

/**
 * Payment status
 */
export const ApiPaymentGetResponsePaymentStatus = {
  PENDING: "PENDING",
  RECEIVED: "RECEIVED",
  CONFIRMED: "CONFIRMED",
  OVERDUE: "OVERDUE",
  REFUNDED: "REFUNDED",
  RECEIVED_IN_CASH: "RECEIVED_IN_CASH",
  REFUND_REQUESTED: "REFUND_REQUESTED",
  REFUND_IN_PROGRESS: "REFUND_IN_PROGRESS",
  CHARGEBACK_REQUESTED: "CHARGEBACK_REQUESTED",
  CHARGEBACK_DISPUTE: "CHARGEBACK_DISPUTE",
  AWAITING_CHARGEBACK_REVERSAL: "AWAITING_CHARGEBACK_REVERSAL",
  DUNNING_REQUESTED: "DUNNING_REQUESTED",
  DUNNING_RECEIVED: "DUNNING_RECEIVED",
  AWAITING_RISK_ANALYSIS: "AWAITING_RISK_ANALYSIS",
} as const;

/**
 * Fine information for payment after due date
 */
export type ApiPaymentFineResponseDto = {
  /**
   * Fine amount in percentage
   */
  value?: number;
};

/**
 * Interest information for payment after due date
 */
export type ApiPaymentInterestResponseDto = {
  /**
   * Interest value in percentage
   */
  value?: number;
};

export type ApiPaymentSplitGetResponseDto = {
  /**
   * Unique split identifier in Asaas
   */
  id?: string;
  /**
   * Asaas wallet identifier that will be transferred
   */
  walletId?: string;
  /**
   * Fixed amount to be transferred to the account when the charge is received
   */
  fixedValue?: number;
  /**
   * Percentage of the net value of the charge to be transferred when received
   */
  percentualValue?: number;
  /**
   * Amount that will be split relative to the total amount that will be paid
   */
  totalValue?: number;
  cancellationReason?: ApiPaymentSplitGetResponsePaymentSplitCancellationReason;
  status?: ApiPaymentSplitGetResponsePaymentSplitStatus;
  /**
   * Unique identifier of split in your system
   */
  externalReference?: string;
  /**
   * Split description
   */
  description?: string;
};

/**
 * Reason for canceling the split
 */
export type ApiPaymentSplitGetResponsePaymentSplitCancellationReason =
  | "PAYMENT_DELETED"
  | "PAYMENT_OVERDUE"
  | "PAYMENT_RECEIVED_IN_CASH"
  | "PAYMENT_REFUNDED"
  | "VALUE_DIVERGENCE_BLOCK"
  | "WALLET_UNABLE_TO_RECEIVE";

/**
 * Reason for canceling the split
 */
export const ApiPaymentSplitGetResponsePaymentSplitCancellationReason = {
  PAYMENT_DELETED: "PAYMENT_DELETED",
  PAYMENT_OVERDUE: "PAYMENT_OVERDUE",
  PAYMENT_RECEIVED_IN_CASH: "PAYMENT_RECEIVED_IN_CASH",
  PAYMENT_REFUNDED: "PAYMENT_REFUNDED",
  VALUE_DIVERGENCE_BLOCK: "VALUE_DIVERGENCE_BLOCK",
  WALLET_UNABLE_TO_RECEIVE: "WALLET_UNABLE_TO_RECEIVE",
} as const;

/**
 * Split status
 */
export type ApiPaymentSplitGetResponsePaymentSplitStatus =
  | "PENDING"
  | "AWAITING_CREDIT"
  | "CANCELLED"
  | "DONE"
  | "REFUNDED"
  | "BLOCKED_BY_VALUE_DIVERGENCE";

/**
 * Split status
 */
export const ApiPaymentSplitGetResponsePaymentSplitStatus = {
  PENDING: "PENDING",
  AWAITING_CREDIT: "AWAITING_CREDIT",
  CANCELLED: "CANCELLED",
  DONE: "DONE",
  REFUNDED: "REFUNDED",
  BLOCKED_BY_VALUE_DIVERGENCE: "BLOCKED_BY_VALUE_DIVERGENCE",
} as const;

export type ApiPaymentRefundGetResponseDto = {
  /**
   * Refund creation date
   */
  dateCreated?: Date;
  status?: ApiPaymentRefundGetResponsePaymentRefundStatus;
  /**
   * Refund value
   */
  value?: number;
  /**
   * (Pix only) Unique identifier of the Pix transaction at the Central Bank
   */
  endToEndIdentifier?: string;
  /**
   * Description of the refund
   */
  description?: string;
  /**
   * Refund effective date
   */
  effectiveDate?: Date;
  /**
   * Transaction receipt link
   */
  transactionReceiptUrl?: string;
  /**
   * Refunded Splits, if any
   */
  refundedSplits?: Array<{
    /**
     * Unique split identifier
     */
    id?: string;
    /**
     * Refunded value
     */
    value?: number;
    /**
     * Indicates whether the split was refunded
     */
    done?: boolean;
  }>;
};

/**
 * Refund status
 */
export type ApiPaymentRefundGetResponsePaymentRefundStatus =
  | "PENDING"
  | "AWAITING_CRITICAL_ACTION_AUTHORIZATION"
  | "AWAITING_CUSTOMER_EXTERNAL_AUTHORIZATION"
  | "CANCELLED"
  | "DONE";

/**
 * Refund status
 */
export const ApiPaymentRefundGetResponsePaymentRefundStatus = {
  PENDING: "PENDING",
  AWAITING_CRITICAL_ACTION_AUTHORIZATION:
    "AWAITING_CRITICAL_ACTION_AUTHORIZATION",
  AWAITING_CUSTOMER_EXTERNAL_AUTHORIZATION:
    "AWAITING_CUSTOMER_EXTERNAL_AUTHORIZATION",
  CANCELLED: "CANCELLED",
  DONE: "DONE",
} as const;

export type ApiPaymentRefundedSplitResponseDto = {
  /**
   * Unique split identifier
   */
  id?: string;
  /**
   * Refunded value
   */
  value?: number;
  /**
   * Indicates whether the split was refunded
   */
  done?: boolean;
};

export type ApiPaymentPathIdRequestDto = {
  [key: string]: unknown;
};

export type ApiPaymentSaveRequestDto = {
  /**
   * Unique customer identifier in Asaas
   */
  customer: string;
  billingType: ApiPaymentSaveRequestBillingType;
  /**
   * Payment amount
   */
  value: number;
  /**
   * Payment due date
   */
  dueDate: Date;
  /**
   * Payment description (max. 500 characters)
   */
  description?: string;
  /**
   * Days after registration cancellation deadline (only for bank slip)
   */
  daysAfterDueDateToRegistrationCancellation?: number;
  /**
   * Free search field
   */
  externalReference?: string;
  /**
   * Number of installments (only in the case of installment payment)
   */
  installmentCount?: number;
  /**
   * Enter the total amount of a charge that will be paid in installments (only in the case of an installment charge). If this field is sent, the installmentValue is not necessary, the calculation per installment will be automatic.
   */
  totalValue?: number;
  /**
   * Value of each installment (only in the case of installment payment). Send this field if you want to define the value of each installment.
   */
  installmentValue?: number;
  discount?: ApiPaymentDiscountDto;
  interest?: ApiPaymentInterestRequestDto;
  fine?: ApiPaymentFineRequestDto;
  /**
   * Define whether the payment will be sent via post
   */
  postalService?: boolean;
  /**
   * Split Settings
   */
  split?: Array<{
    /**
     * Asaas wallet identifier that will be transferred
     */
    walletId: string;
    /**
     * Fixed amount to be transferred to the account when the payment is received
     */
    fixedValue?: number;
    /**
     * Percentage of the net value of the charge to be transferred when received
     */
    percentualValue?: number;
    /**
     * (Instalments only). Amount that will be split relative to the total amount that will be paid in installments.
     */
    totalFixedValue?: number;
    /**
     * Split identifier in your system
     */
    externalReference?: string;
    /**
     * Split description
     */
    description?: string;
  }>;
  callback?: ApiPaymentCallbackRequestDto;
};

/**
 * Payment billing type
 */
export type ApiPaymentSaveRequestBillingType =
  | "UNDEFINED"
  | "BOLETO"
  | "CREDIT_CARD"
  | "PIX";

/**
 * Payment billing type
 */
export const ApiPaymentSaveRequestBillingType = {
  UNDEFINED: "UNDEFINED",
  BOLETO: "BOLETO",
  CREDIT_CARD: "CREDIT_CARD",
  PIX: "PIX",
} as const;

export type ApiPaymentSplitRequestDto = {
  /**
   * Asaas wallet identifier that will be transferred
   */
  walletId: string;
  /**
   * Fixed amount to be transferred to the account when the payment is received
   */
  fixedValue?: number;
  /**
   * Percentage of the net value of the charge to be transferred when received
   */
  percentualValue?: number;
  /**
   * (Instalments only). Amount that will be split relative to the total amount that will be paid in installments.
   */
  totalFixedValue?: number;
  /**
   * Split identifier in your system
   */
  externalReference?: string;
  /**
   * Split description
   */
  description?: string;
};

export type ApiPaymentUpdateRequestDto = {
  billingType: ApiPaymentUpdateRequestBillingType;
  /**
   * Payment amount
   */
  value: number;
  /**
   * Payment due date
   */
  dueDate: Date;
  /**
   * Payment description (max. 500 characters)
   */
  description?: string;
  /**
   * Days after registration cancellation deadline (only for bank slip)
   */
  daysAfterDueDateToRegistrationCancellation?: number;
  /**
   * Free search field
   */
  externalReference?: string;
  discount?: ApiPaymentDiscountDto;
  interest?: ApiPaymentInterestRequestDto;
  fine?: ApiPaymentFineRequestDto;
  /**
   * Define whether the payment will be sent via post
   */
  postalService?: boolean;
  /**
   * Split Settings
   */
  split?: Array<ApiPaymentSplitRequestDto>;
  callback?: ApiPaymentCallbackRequestDto;
};

/**
 * Payment billing type
 */
export type ApiPaymentUpdateRequestBillingType =
  | "UNDEFINED"
  | "BOLETO"
  | "CREDIT_CARD"
  | "PIX";

/**
 * Payment billing type
 */
export const ApiPaymentUpdateRequestBillingType = {
  UNDEFINED: "UNDEFINED",
  BOLETO: "BOLETO",
  CREDIT_CARD: "CREDIT_CARD",
  PIX: "PIX",
} as const;

export type ApiPaymentListResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<ApiPaymentGetResponseDto>;
};

/**
 * Filter by billing type
 */
export type ApiPaymentListRequestBillingType =
  | "UNDEFINED"
  | "BOLETO"
  | "CREDIT_CARD"
  | "PIX";

/**
 * Filter by billing type
 */
export const ApiPaymentListRequestBillingType = {
  UNDEFINED: "UNDEFINED",
  BOLETO: "BOLETO",
  CREDIT_CARD: "CREDIT_CARD",
  PIX: "PIX",
} as const;

/**
 * Filter by status
 */
export type ApiPaymentListRequestPaymentStatus =
  | "PENDING"
  | "RECEIVED"
  | "CONFIRMED"
  | "OVERDUE"
  | "REFUNDED"
  | "RECEIVED_IN_CASH"
  | "REFUND_REQUESTED"
  | "REFUND_IN_PROGRESS"
  | "CHARGEBACK_REQUESTED"
  | "CHARGEBACK_DISPUTE"
  | "AWAITING_CHARGEBACK_REVERSAL"
  | "DUNNING_REQUESTED"
  | "DUNNING_RECEIVED"
  | "AWAITING_RISK_ANALYSIS";

/**
 * Filter by status
 */
export const ApiPaymentListRequestPaymentStatus = {
  PENDING: "PENDING",
  RECEIVED: "RECEIVED",
  CONFIRMED: "CONFIRMED",
  OVERDUE: "OVERDUE",
  REFUNDED: "REFUNDED",
  RECEIVED_IN_CASH: "RECEIVED_IN_CASH",
  REFUND_REQUESTED: "REFUND_REQUESTED",
  REFUND_IN_PROGRESS: "REFUND_IN_PROGRESS",
  CHARGEBACK_REQUESTED: "CHARGEBACK_REQUESTED",
  CHARGEBACK_DISPUTE: "CHARGEBACK_DISPUTE",
  AWAITING_CHARGEBACK_REVERSAL: "AWAITING_CHARGEBACK_REVERSAL",
  DUNNING_REQUESTED: "DUNNING_REQUESTED",
  DUNNING_RECEIVED: "DUNNING_RECEIVED",
  AWAITING_RISK_ANALYSIS: "AWAITING_RISK_ANALYSIS",
} as const;

/**
 * Filter to return charges that have or do not have an invoice
 */
export type ApiPaymentListRequestInvoiceStatus =
  | "SCHEDULED"
  | "AUTHORIZED"
  | "PROCESSING_CANCELLATION"
  | "CANCELED"
  | "CANCELLATION_DENIED"
  | "ERROR";

/**
 * Filter to return charges that have or do not have an invoice
 */
export const ApiPaymentListRequestInvoiceStatus = {
  SCHEDULED: "SCHEDULED",
  AUTHORIZED: "AUTHORIZED",
  PROCESSING_CANCELLATION: "PROCESSING_CANCELLATION",
  CANCELED: "CANCELED",
  CANCELLATION_DENIED: "CANCELLATION_DENIED",
  ERROR: "ERROR",
} as const;

export type ApiPaymentDeleteResponseDto = {
  /**
   * Indicates whether the charge has been removed
   */
  deleted?: boolean;
  /**
   * Unique payment identifier in Asaas
   */
  id?: string;
};

export type ApiPaymentIdentificationFieldResponseDto = {
  /**
   * Digitable bill line
   */
  identificationField?: string;
  /**
   * Unique identification of the bank slip
   */
  nossoNumero?: string;
  /**
   * Bank slip bar code
   */
  barCode?: string;
};

export type ApiPaymentReceiveInCashRequestDto = {
  /**
   * Date the customer made the payment
   */
  paymentDate?: Date;
  /**
   * Amount paid by the customer
   */
  value?: number;
  /**
   * Send or not send notification of confirmed payment to the customer
   */
  notifyCustomer?: boolean;
};

export type ApiPaymentBillingInfoResponseDto = {
  pix?: ApiPaymentPixQrCodeResponseDto;
  creditCard?: ApiCreditCardTokenizeResponseDto;
  bankSlip?: ApiBankSlipBillingInfoResponseDto;
};

/**
 * Payment data related to pix
 */
export type ApiPaymentPixQrCodeResponseDto = {
  /**
   * QrCode image in base64
   */
  encodedImage?: string;
  /**
   * Copy and Paste of the Pix QrCode
   */
  payload?: string;
  /**
   * QrCode expiration date
   */
  expirationDate?: Date;
};

/**
 * Payment data related to bank slip
 */
export type ApiBankSlipBillingInfoResponseDto = {
  /**
   * Digitable bill line
   */
  identificationField?: string;
  /**
   * Unique identification of the bank slip
   */
  nossoNumero?: string;
  /**
   * Bank slip bar code
   */
  barCode?: string;
  /**
   * URL to download the bank slip
   */
  bankSlipUrl?: string;
  /**
   * Days after registration cancellation deadline (only for bank slip)
   */
  daysAfterDueDateToRegistrationCancellation?: number;
};

export type ApiPaymentLimitsResponseDto = {
  creation?: ApiPaymentLimitsResponseCreationDto;
};

/**
 * Breeding limits
 */
export type ApiPaymentLimitsResponseCreationDto = {
  daily?: ApiPaymentLimitsResponseCreationDailyDto;
};

/**
 * Daily limits
 */
export type ApiPaymentLimitsResponseCreationDailyDto = {
  /**
   * Total limit
   */
  limit?: bigint;
  /**
   * Limit used
   */
  used?: bigint;
  /**
   * Indicates whether the limit has been reached
   */
  wasReached?: boolean;
};

export type ApiPaymentRefundRequestDto = {
  /**
   * Amount to be refunded
   */
  value?: number;
  /**
   * Reason for the refund
   */
  description?: string;
};

export type ApiPaymentStatusResponseDto = {
  status?: ApiPaymentStatusResponsePaymentStatus;
};

/**
 * Payment status
 */
export type ApiPaymentStatusResponsePaymentStatus =
  | "PENDING"
  | "RECEIVED"
  | "CONFIRMED"
  | "OVERDUE"
  | "REFUNDED"
  | "RECEIVED_IN_CASH"
  | "REFUND_REQUESTED"
  | "REFUND_IN_PROGRESS"
  | "CHARGEBACK_REQUESTED"
  | "CHARGEBACK_DISPUTE"
  | "AWAITING_CHARGEBACK_REVERSAL"
  | "DUNNING_REQUESTED"
  | "DUNNING_RECEIVED"
  | "AWAITING_RISK_ANALYSIS";

/**
 * Payment status
 */
export const ApiPaymentStatusResponsePaymentStatus = {
  PENDING: "PENDING",
  RECEIVED: "RECEIVED",
  CONFIRMED: "CONFIRMED",
  OVERDUE: "OVERDUE",
  REFUNDED: "REFUNDED",
  RECEIVED_IN_CASH: "RECEIVED_IN_CASH",
  REFUND_REQUESTED: "REFUND_REQUESTED",
  REFUND_IN_PROGRESS: "REFUND_IN_PROGRESS",
  CHARGEBACK_REQUESTED: "CHARGEBACK_REQUESTED",
  CHARGEBACK_DISPUTE: "CHARGEBACK_DISPUTE",
  AWAITING_CHARGEBACK_REVERSAL: "AWAITING_CHARGEBACK_REVERSAL",
  DUNNING_REQUESTED: "DUNNING_REQUESTED",
  DUNNING_RECEIVED: "DUNNING_RECEIVED",
  AWAITING_RISK_ANALYSIS: "AWAITING_RISK_ANALYSIS",
} as const;

export type ApiPaymentDocumentSaveRequestDto = {
  /**
   * true to make the file available only after receipt of the payment
   */
  availableAfterPayment: boolean;
  type: ApiPaymentDocumentSaveRequestPaymentDocumentType;
  file?: File;
};

/**
 * Document type
 */
export type ApiPaymentDocumentSaveRequestPaymentDocumentType =
  | "INVOICE"
  | "CONTRACT"
  | "MEDIA"
  | "DOCUMENT"
  | "SPREADSHEET"
  | "PROGRAM"
  | "OTHER";

/**
 * Document type
 */
export const ApiPaymentDocumentSaveRequestPaymentDocumentType = {
  INVOICE: "INVOICE",
  CONTRACT: "CONTRACT",
  MEDIA: "MEDIA",
  DOCUMENT: "DOCUMENT",
  SPREADSHEET: "SPREADSHEET",
  PROGRAM: "PROGRAM",
  OTHER: "OTHER",
} as const;

export type ApiPaymentDocumentGetResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Unique document identifier
   */
  id?: string;
  /**
   * Document name
   */
  name?: string;
  type?: ApiPaymentDocumentGetResponsePaymentDocumentType;
  /**
   * Available only after payment
   */
  availableAfterPayment?: boolean;
  file?: ApiPaymentDocumentFileResponseDto;
  /**
   * Indicates whether the file was removed
   */
  deleted?: boolean;
};

/**
 * Document type
 */
export type ApiPaymentDocumentGetResponsePaymentDocumentType =
  | "INVOICE"
  | "CONTRACT"
  | "MEDIA"
  | "DOCUMENT"
  | "SPREADSHEET"
  | "PROGRAM"
  | "OTHER";

/**
 * Document type
 */
export const ApiPaymentDocumentGetResponsePaymentDocumentType = {
  INVOICE: "INVOICE",
  CONTRACT: "CONTRACT",
  MEDIA: "MEDIA",
  DOCUMENT: "DOCUMENT",
  SPREADSHEET: "SPREADSHEET",
  PROGRAM: "PROGRAM",
  OTHER: "OTHER",
} as const;

/**
 * File object
 */
export type ApiPaymentDocumentFileResponseDto = {
  /**
   * Unique document identifier
   */
  publicId?: string;
  /**
   * Original document name
   */
  originalName?: string;
  /**
   * File size
   */
  size?: number;
  /**
   * File extension
   */
  extension?: string;
  /**
   * Link to download the file preview
   */
  previewUrl?: string;
  /**
   * Link to download the file
   */
  downloadUrl?: string;
};

export type ApiPaymentDocumentUpdateRequestDto = {
  /**
   * true to make the file available only after receipt of the payment
   */
  availableAfterPayment: boolean;
  type: ApiPaymentDocumentUpdateRequestPaymentDocumentType;
};

/**
 * Document type
 */
export type ApiPaymentDocumentUpdateRequestPaymentDocumentType =
  | "INVOICE"
  | "CONTRACT"
  | "MEDIA"
  | "DOCUMENT"
  | "SPREADSHEET"
  | "PROGRAM"
  | "OTHER";

/**
 * Document type
 */
export const ApiPaymentDocumentUpdateRequestPaymentDocumentType = {
  INVOICE: "INVOICE",
  CONTRACT: "CONTRACT",
  MEDIA: "MEDIA",
  DOCUMENT: "DOCUMENT",
  SPREADSHEET: "SPREADSHEET",
  PROGRAM: "PROGRAM",
  OTHER: "OTHER",
} as const;

export type ApiPaymentDocumentListResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<ApiPaymentDocumentGetResponseDto>;
};

export type ApiPaymentDocumentDeleteResponseDto = {
  /**
   * Indicates whether the file was removed
   */
  deleted?: boolean;
  /**
   * Unique document identifier
   */
  id?: string;
};

export type ApiPaymentDunningCancelRequestDto = {
  [key: string]: unknown;
};

export type ApiPaymentDunningCancelResponseDto = {
  /**
   * Unique identifier of the payment dunning in Asaas
   */
  id?: string;
  /**
   * Payment dunning number
   */
  dunningNumber?: number;
  status?: ApiPaymentDunningCancelResponsePaymentDunningStatus;
  type?: ApiPaymentDunningCancelResponsePaymentDunningType;
  /**
   * Unique identifier of the payment to be recovered in Asaas
   */
  payment?: string;
  /**
   * Request date
   */
  requestDate?: Date;
  /**
   * Description of the payment dunning
   */
  description?: string;
  /**
   * Payment amount
   */
  value?: number;
  /**
   * Cost and/or payment dunning fee
   */
  feeValue?: number;
  /**
   * Net amount to be recovered
   */
  netValue?: number;
  /**
   * Cash receipt fee
   */
  receivedInCashFeeValue?: number;
  /**
   * Reason for denial of payment dunning
   */
  denialReason?: string;
  /**
   * Fee charged in case of cancellation
   */
  cancellationFeeValue?: number;
  /**
   * Whether the payment dunning can be canceled
   */
  canBeCancelled?: boolean;
  /**
   * Reason for not being able to request cancellation
   */
  cannotBeCancelledReason?: string;
  /**
   * Determine whether documentation needs to be resubmitted
   */
  isNecessaryResendDocumentation?: boolean;
};

/**
 * Payment dunning status
 */
export type ApiPaymentDunningCancelResponsePaymentDunningStatus =
  | "PENDING"
  | "AWAITING_APPROVAL"
  | "AWAITING_CANCELLATION"
  | "PROCESSED"
  | "PAID"
  | "PARTIALLY_PAID"
  | "DENIED"
  | "CANCELLED";

/**
 * Payment dunning status
 */
export const ApiPaymentDunningCancelResponsePaymentDunningStatus = {
  PENDING: "PENDING",
  AWAITING_APPROVAL: "AWAITING_APPROVAL",
  AWAITING_CANCELLATION: "AWAITING_CANCELLATION",
  PROCESSED: "PROCESSED",
  PAID: "PAID",
  PARTIALLY_PAID: "PARTIALLY_PAID",
  DENIED: "DENIED",
  CANCELLED: "CANCELLED",
} as const;

/**
 * Type of payment dunning
 */
export type ApiPaymentDunningCancelResponsePaymentDunningType = "CREDIT_BUREAU";

/**
 * Type of payment dunning
 */
export const ApiPaymentDunningCancelResponsePaymentDunningType = {
  CREDIT_BUREAU: "CREDIT_BUREAU",
} as const;

export type ApiPaymentDunningSaveDocumentsRequestDto = {
  /**
   * Invoice and/or contract notarized
   */
  documents: Blob | File;
};

export type ApiPaymentDunningSaveDocumentsResponseDto = {
  /**
   * Unique identifier of the payment dunning in Asaas
   */
  id?: string;
  /**
   * Payment dunning number
   */
  dunningNumber?: number;
  status?: ApiPaymentDunningSaveDocumentsResponsePaymentDunningStatus;
  type?: ApiPaymentDunningSaveDocumentsResponsePaymentDunningType;
  /**
   * Unique identifier of the payment to be recovered in Asaas
   */
  payment?: string;
  /**
   * Request date
   */
  requestDate?: Date;
  /**
   * Description of the payment dunning
   */
  description?: string;
  /**
   * Payment amount
   */
  value?: number;
  /**
   * Cost and/or payment dunning fee
   */
  feeValue?: number;
  /**
   * Net amount to be recovered
   */
  netValue?: number;
  /**
   * Cash receipt fee
   */
  receivedInCashFeeValue?: number;
  /**
   * Reason for denial of payment dunning
   */
  denialReason?: string;
  /**
   * Fee charged in case of cancellation
   */
  cancellationFeeValue?: number;
  /**
   * Whether the payment dunning can be canceled
   */
  canBeCancelled?: boolean;
  /**
   * Reason for not being able to request cancellation
   */
  cannotBeCancelledReason?: string;
  /**
   * Determine whether documentation needs to be resubmitted
   */
  isNecessaryResendDocumentation?: boolean;
};

/**
 * Payment dunning status
 */
export type ApiPaymentDunningSaveDocumentsResponsePaymentDunningStatus =
  | "PENDING"
  | "AWAITING_APPROVAL"
  | "AWAITING_CANCELLATION"
  | "PROCESSED"
  | "PAID"
  | "PARTIALLY_PAID"
  | "DENIED"
  | "CANCELLED";

/**
 * Payment dunning status
 */
export const ApiPaymentDunningSaveDocumentsResponsePaymentDunningStatus = {
  PENDING: "PENDING",
  AWAITING_APPROVAL: "AWAITING_APPROVAL",
  AWAITING_CANCELLATION: "AWAITING_CANCELLATION",
  PROCESSED: "PROCESSED",
  PAID: "PAID",
  PARTIALLY_PAID: "PARTIALLY_PAID",
  DENIED: "DENIED",
  CANCELLED: "CANCELLED",
} as const;

/**
 * Type of payment dunning
 */
export type ApiPaymentDunningSaveDocumentsResponsePaymentDunningType =
  "CREDIT_BUREAU";

/**
 * Type of payment dunning
 */
export const ApiPaymentDunningSaveDocumentsResponsePaymentDunningType = {
  CREDIT_BUREAU: "CREDIT_BUREAU",
} as const;

export type ApiPaymentDunningPaymentsAvailableForDunningResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<{
    /**
     * Unique identifier of the payment to be recovered in Asaas
     */
    payment?: string;
    /**
     * Unique customer identifier
     */
    customer?: string;
    /**
     * Payment amount
     */
    value?: number;
    status?: ApiPaymentDunningPaymentsAvailableForDunningResponseDataPaymentStatus;
    billingType?: ApiPaymentDunningPaymentsAvailableForDunningResponseDataBillingType;
    /**
     * Due date
     */
    dueDate?: string;
    /**
     * Simulation of denial request for each type of payment dunning available
     */
    typeSimulations?: Array<{
      type?: ApiPaymentDunningPaymentsAvailableForDunningResponseDataTypeSimulationItemPaymentDunningType;
      /**
       * Whether it is possible to request a payment dunning of this type
       */
      isAllowed?: boolean;
      /**
       * Reason why it is not possible to request a payment dunning for this type
       */
      notAllowedReason?: string;
      /**
       * Cost and/or payment dunning fee
       */
      feeValue?: number;
      /**
       * Net amount to be recovered
       */
      netValue?: number;
      /**
       * Expected start date of the payment dunning
       */
      startDate?: string;
    }>;
  }>;
};

export type ApiPaymentDunningPaymentsAvailableForDunningResponseDataDto = {
  /**
   * Unique identifier of the payment to be recovered in Asaas
   */
  payment?: string;
  /**
   * Unique customer identifier
   */
  customer?: string;
  /**
   * Payment amount
   */
  value?: number;
  status?: ApiPaymentDunningPaymentsAvailableForDunningResponseDataPaymentStatus;
  billingType?: ApiPaymentDunningPaymentsAvailableForDunningResponseDataBillingType;
  /**
   * Due date
   */
  dueDate?: string;
  /**
   * Simulation of denial request for each type of payment dunning available
   */
  typeSimulations?: Array<{
    type?: ApiPaymentDunningPaymentsAvailableForDunningResponseDataTypeSimulationItemPaymentDunningType;
    /**
     * Whether it is possible to request a payment dunning of this type
     */
    isAllowed?: boolean;
    /**
     * Reason why it is not possible to request a payment dunning for this type
     */
    notAllowedReason?: string;
    /**
     * Cost and/or payment dunning fee
     */
    feeValue?: number;
    /**
     * Net amount to be recovered
     */
    netValue?: number;
    /**
     * Expected start date of the payment dunning
     */
    startDate?: string;
  }>;
};

/**
 * Billing status
 */
export type ApiPaymentDunningPaymentsAvailableForDunningResponseDataPaymentStatus =
  "PENDING" | "RECEIVED" | "CONFIRMED" | "OVERDUE";

/**
 * Billing status
 */
export const ApiPaymentDunningPaymentsAvailableForDunningResponseDataPaymentStatus =
  {
    PENDING: "PENDING",
    RECEIVED: "RECEIVED",
    CONFIRMED: "CONFIRMED",
    OVERDUE: "OVERDUE",
  } as const;

/**
 * Form of payment
 */
export type ApiPaymentDunningPaymentsAvailableForDunningResponseDataBillingType =
  "BOLETO" | "CREDIT_CARD" | "TRANSFER" | "DEPOSIT" | "DEBIT_CARD" | "PIX";

/**
 * Form of payment
 */
export const ApiPaymentDunningPaymentsAvailableForDunningResponseDataBillingType =
  {
    BOLETO: "BOLETO",
    CREDIT_CARD: "CREDIT_CARD",
    TRANSFER: "TRANSFER",
    DEPOSIT: "DEPOSIT",
    DEBIT_CARD: "DEBIT_CARD",
    PIX: "PIX",
  } as const;

export type ApiPaymentDunningPaymentsAvailableForDunningResponseDataTypeSimulationItemDto =
  {
    type?: ApiPaymentDunningPaymentsAvailableForDunningResponseDataTypeSimulationItemPaymentDunningType;
    /**
     * Whether it is possible to request a payment dunning of this type
     */
    isAllowed?: boolean;
    /**
     * Reason why it is not possible to request a payment dunning for this type
     */
    notAllowedReason?: string;
    /**
     * Cost and/or payment dunning fee
     */
    feeValue?: number;
    /**
     * Net amount to be recovered
     */
    netValue?: number;
    /**
     * Expected start date of the payment dunning
     */
    startDate?: string;
  };

/**
 * Type of payment dunning
 */
export type ApiPaymentDunningPaymentsAvailableForDunningResponseDataTypeSimulationItemPaymentDunningType =
  "CREDIT_BUREAU";

/**
 * Type of payment dunning
 */
export const ApiPaymentDunningPaymentsAvailableForDunningResponseDataTypeSimulationItemPaymentDunningType =
  {
    CREDIT_BUREAU: "CREDIT_BUREAU",
  } as const;

export type ApiPaymentDunningListPartialPaymentsResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<{
    /**
     * Amount paid
     */
    value?: number;
    /**
     * Payment Description
     */
    description?: string;
    /**
     * Pay day
     */
    paymentDate?: string;
  }>;
};

export type ApiPaymentDunningListPartialPaymentsResponseDataDto = {
  /**
   * Amount paid
   */
  value?: number;
  /**
   * Payment Description
   */
  description?: string;
  /**
   * Pay day
   */
  paymentDate?: string;
};

export type ApiPaymentDunningShowResponseDto = {
  /**
   * Unique identifier of the payment dunning in Asaas
   */
  id?: string;
  /**
   * Payment dunning number
   */
  dunningNumber?: number;
  status?: ApiPaymentDunningShowResponsePaymentDunningStatus;
  type?: ApiPaymentDunningShowResponsePaymentDunningType;
  /**
   * Request date
   */
  requestDate?: Date;
  /**
   * Description of the payment dunning
   */
  description?: string;
  /**
   * Payment amount
   */
  value?: number;
  /**
   * Cost and/or payment dunning fee
   */
  feeValue?: number;
  /**
   * Net amount to be recovered
   */
  netValue?: number;
  /**
   * Cash receipt fee
   */
  receivedInCashFeeValue?: number;
  /**
   * Reason for denial of payment dunning
   */
  denialReason?: string;
  /**
   * Fee charged in case of cancellation
   */
  cancellationFeeValue?: number;
  /**
   * Whether the payment dunning can be canceled
   */
  canBeCancelled?: boolean;
  /**
   * Reason for not being able to request cancellation
   */
  cannotBeCancelledReason?: string;
  /**
   * Determine whether documentation needs to be resubmitted
   */
  isNecessaryResendDocumentation?: boolean;
  /**
   * Unique identifier of the payment to be recovered in Asaas
   */
  payment?: string;
};

/**
 * Payment dunning status
 */
export type ApiPaymentDunningShowResponsePaymentDunningStatus =
  | "PENDING"
  | "AWAITING_APPROVAL"
  | "AWAITING_CANCELLATION"
  | "PROCESSED"
  | "PAID"
  | "PARTIALLY_PAID"
  | "DENIED"
  | "CANCELLED";

/**
 * Payment dunning status
 */
export const ApiPaymentDunningShowResponsePaymentDunningStatus = {
  PENDING: "PENDING",
  AWAITING_APPROVAL: "AWAITING_APPROVAL",
  AWAITING_CANCELLATION: "AWAITING_CANCELLATION",
  PROCESSED: "PROCESSED",
  PAID: "PAID",
  PARTIALLY_PAID: "PARTIALLY_PAID",
  DENIED: "DENIED",
  CANCELLED: "CANCELLED",
} as const;

/**
 * Type of payment dunning
 */
export type ApiPaymentDunningShowResponsePaymentDunningType = "CREDIT_BUREAU";

/**
 * Type of payment dunning
 */
export const ApiPaymentDunningShowResponsePaymentDunningType = {
  CREDIT_BUREAU: "CREDIT_BUREAU",
} as const;

export type ApiPaymentDunningSaveRequestDto = {
  /**
   * Unique identifier of the payment to be recovered in Asaas
   */
  payment: string;
  type: ApiPaymentDunningSaveRequestPaymentDunningType;
  /**
   * Description of the product or service provided
   */
  description?: string;
  /**
   * Client name
   */
  customerName: string;
  /**
   * Customer CPF or CNPJ
   */
  customerCpfCnpj: string;
  /**
   * Customer main telephone number
   */
  customerPrimaryPhone: string;
  /**
   * Secondary customer phone number
   */
  customerSecondaryPhone?: string;
  /**
   * Customer address zip code
   */
  customerPostalCode: string;
  /**
   * Customer public address
   */
  customerAddress: string;
  /**
   * Customer address number
   */
  customerAddressNumber: string;
  /**
   * Customer address complement
   */
  customerComplement?: string;
  /**
   * Customer neighborhood
   */
  customerProvince: string;
  /**
   * Invoice and/or contract notarized
   */
  documents?: Blob | File;
};

/**
 * Type of payment dunning
 */
export type ApiPaymentDunningSaveRequestPaymentDunningType = "CREDIT_BUREAU";

/**
 * Type of payment dunning
 */
export const ApiPaymentDunningSaveRequestPaymentDunningType = {
  CREDIT_BUREAU: "CREDIT_BUREAU",
} as const;

export type ApiPaymentDunningListResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<ApiPaymentDunningShowResponseDto>;
};

/**
 * Filter by payment dunning status
 */
export type ApiPaymentDunningListRequestPaymentDunningStatus =
  | "PENDING"
  | "AWAITING_APPROVAL"
  | "AWAITING_CANCELLATION"
  | "PROCESSED"
  | "PAID"
  | "PARTIALLY_PAID"
  | "DENIED"
  | "CANCELLED";

/**
 * Filter by payment dunning status
 */
export const ApiPaymentDunningListRequestPaymentDunningStatus = {
  PENDING: "PENDING",
  AWAITING_APPROVAL: "AWAITING_APPROVAL",
  AWAITING_CANCELLATION: "AWAITING_CANCELLATION",
  PROCESSED: "PROCESSED",
  PAID: "PAID",
  PARTIALLY_PAID: "PARTIALLY_PAID",
  DENIED: "DENIED",
  CANCELLED: "CANCELLED",
} as const;

/**
 * Filter by type of payment dunning
 */
export type ApiPaymentDunningListRequestPaymentDunningType =
  | "CREDIT_BUREAU"
  | "DEBT_RECOVERY_ASSISTANCE";

/**
 * Filter by type of payment dunning
 */
export const ApiPaymentDunningListRequestPaymentDunningType = {
  CREDIT_BUREAU: "CREDIT_BUREAU",
  DEBT_RECOVERY_ASSISTANCE: "DEBT_RECOVERY_ASSISTANCE",
} as const;

export type ApiPaymentDunningSimulateRequestDto = {
  [key: string]: unknown;
};

export type ApiPaymentDunningSimulateResponseDto = {
  /**
   * Unique identifier of the payment to be recovered in Asaas
   */
  payment?: string;
  /**
   * Payment amount
   */
  value?: number;
  /**
   * Simulation of denial request for each type of denial available
   */
  typeSimulations?: Array<{
    type?: ApiPaymentDunningSimulateResponseTypeSimulationItemPaymentDunningType;
    /**
     * Whether it is possible to request a payment dunning of this type
     */
    isAllowed?: boolean;
    /**
     * Reason why it is not possible to request a payment dunning for this type
     */
    notAllowedReason?: string;
    /**
     * Cost and/or payment dunning fee
     */
    feeValue?: number;
    /**
     * Net amount to be recovered
     */
    netValue?: number;
    /**
     * Expected start date of the payment dunning
     */
    startDate?: string;
  }>;
};

export type ApiPaymentDunningSimulateResponseTypeSimulationItemDto = {
  type?: ApiPaymentDunningSimulateResponseTypeSimulationItemPaymentDunningType;
  /**
   * Whether it is possible to request a payment dunning of this type
   */
  isAllowed?: boolean;
  /**
   * Reason why it is not possible to request a payment dunning for this type
   */
  notAllowedReason?: string;
  /**
   * Cost and/or payment dunning fee
   */
  feeValue?: number;
  /**
   * Net amount to be recovered
   */
  netValue?: number;
  /**
   * Expected start date of the payment dunning
   */
  startDate?: string;
};

/**
 * Type of payment dunning
 */
export type ApiPaymentDunningSimulateResponseTypeSimulationItemPaymentDunningType =
  "CREDIT_BUREAU";

/**
 * Type of payment dunning
 */
export const ApiPaymentDunningSimulateResponseTypeSimulationItemPaymentDunningType =
  {
    CREDIT_BUREAU: "CREDIT_BUREAU",
  } as const;

export type ApiPaymentDunningListHistoryResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<{
    status?: ApiPaymentDunningListHistoryResponseDataPaymentDunningHistoryStatus;
    /**
     * Description of the event
     */
    description?: string;
    /**
     * Date the event occurred
     */
    eventDate?: string;
  }>;
};

export type ApiPaymentDunningListHistoryResponseDataDto = {
  status?: ApiPaymentDunningListHistoryResponseDataPaymentDunningHistoryStatus;
  /**
   * Description of the event
   */
  description?: string;
  /**
   * Date the event occurred
   */
  eventDate?: string;
};

/**
 * Negotiation status
 */
export type ApiPaymentDunningListHistoryResponseDataPaymentDunningHistoryStatus =
  "IN_NEGOTIATION" | "NEGOTIATION_FAIL" | "NEGOTIATED" | "PAID";

/**
 * Negotiation status
 */
export const ApiPaymentDunningListHistoryResponseDataPaymentDunningHistoryStatus =
  {
    IN_NEGOTIATION: "IN_NEGOTIATION",
    NEGOTIATION_FAIL: "NEGOTIATION_FAIL",
    NEGOTIATED: "NEGOTIATED",
    PAID: "PAID",
  } as const;

export type ApiPaymentRefundListResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<ApiPaymentRefundGetResponseDto>;
};

export type ApiPaymentBankSlipRefundResponseDto = {
  /**
   * Link to report refund details
   */
  requestUrl?: string;
};

export type ApiPaymentSimulateRequestDto = {
  /**
   * Total installment or billing amount
   */
  value: number;
  /**
   * Number of installments
   */
  installmentCount?: number;
  /**
   * Form of payment
   */
  billingTypes: Array<string>;
};

export type ApiPaymentSimulateRequestBillingType = string;

export type ApiPaymentSimulateResponseDto = {
  /**
   * Total installment or billing amount
   */
  value?: number;
  creditCard?: ApiPaymentSimulateCreditCardResponseDto;
  bankSlip?: ApiPaymentSimulateBankSlipResponseDto;
  pix?: ApiPaymentSimulatePixResponseDto;
};

/**
 * Card fees
 */
export type ApiPaymentSimulateCreditCardResponseDto = {
  /**
   * Net value
   */
  netValue?: number;
  /**
   * Rate in percentage
   */
  feePercentage?: number;
  /**
   * Operation fee
   */
  operationFee?: number;
  installment?: ApiPaymentSimulateInstallmentResponseDto;
};

/**
 * Installment information
 */
export type ApiPaymentSimulateInstallmentResponseDto = {
  /**
   * Net value
   */
  paymentNetValue?: number;
  /**
   * Total value
   */
  paymentValue?: number;
};

/**
 * Boleto fees
 */
export type ApiPaymentSimulateBankSlipResponseDto = {
  /**
   * Net value
   */
  netValue?: number;
  /**
   * Fee value
   */
  feeValue?: number;
  installment?: ApiPaymentSimulateInstallmentResponseDto;
};

/**
 * PIX fees
 */
export type ApiPaymentSimulatePixResponseDto = {
  /**
   * Net value
   */
  netValue?: number;
  /**
   * Rate in percentage
   */
  feePercentage?: number;
  /**
   * Fee value
   */
  feeValue?: number;
  installment?: ApiPaymentSimulateInstallmentResponseDto;
};

export type ApiPaymentSplitListResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<ApiPaymentSplitGetResponseDto>;
};

/**
 * Filter by status
 */
export type ApiPaymentSplitListPaidRequestPaymentSplitStatus =
  | "PENDING"
  | "AWAITING_CREDIT"
  | "CANCELLED"
  | "DONE"
  | "REFUNDED"
  | "BLOCKED_BY_VALUE_DIVERGENCE";

/**
 * Filter by status
 */
export const ApiPaymentSplitListPaidRequestPaymentSplitStatus = {
  PENDING: "PENDING",
  AWAITING_CREDIT: "AWAITING_CREDIT",
  CANCELLED: "CANCELLED",
  DONE: "DONE",
  REFUNDED: "REFUNDED",
  BLOCKED_BY_VALUE_DIVERGENCE: "BLOCKED_BY_VALUE_DIVERGENCE",
} as const;

/**
 * Filter by status
 */
export type ApiPaymentSplitListReceivedRequestPaymentSplitStatus =
  | "PENDING"
  | "AWAITING_CREDIT"
  | "CANCELLED"
  | "DONE"
  | "REFUNDED"
  | "BLOCKED_BY_VALUE_DIVERGENCE";

/**
 * Filter by status
 */
export const ApiPaymentSplitListReceivedRequestPaymentSplitStatus = {
  PENDING: "PENDING",
  AWAITING_CREDIT: "AWAITING_CREDIT",
  CANCELLED: "CANCELLED",
  DONE: "DONE",
  REFUNDED: "REFUNDED",
  BLOCKED_BY_VALUE_DIVERGENCE: "BLOCKED_BY_VALUE_DIVERGENCE",
} as const;

export type ApiPaymentViewingInfoResponseDto = {
  /**
   * Invoice viewing date and time
   */
  invoiceViewedDate?: Date;
  /**
   * Bill viewing date and time
   */
  boletoViewedDate?: Date;
};

export type ApiPushNotificationConfigGetResponseDto = {
  /**
   * Unique Webhook Identifier
   */
  id?: string;
  /**
   * Webhook name
   */
  name?: string;
  /**
   * Webhook URL
   */
  url?: string;
  /**
   * Email that will receive notifications about the Webhook
   */
  email?: string;
  /**
   * Set whether the Webhook is active
   */
  enabled?: boolean;
  /**
   * Set whether the sync queue is stopped
   */
  interrupted?: boolean;
  /**
   * API Version
   */
  apiVersion?: number;
  /**
   * Webhook authentication token
   */
  authToken?: string;
  sendType?: ApiPushNotificationConfigGetResponsePushNotificationSendType;
  /**
   * List of events this Webhook will observe
   */
  events?: Array<string>;
};

/**
 * Sequential (SEQUENTIALLY) or non-sequential (NON_SEQUENTIALLY)
 */
export type ApiPushNotificationConfigGetResponsePushNotificationSendType =
  | "NON_SEQUENTIALLY"
  | "SEQUENTIALLY";

/**
 * Sequential (SEQUENTIALLY) or non-sequential (NON_SEQUENTIALLY)
 */
export const ApiPushNotificationConfigGetResponsePushNotificationSendType = {
  NON_SEQUENTIALLY: "NON_SEQUENTIALLY",
  SEQUENTIALLY: "SEQUENTIALLY",
} as const;

export type ApiPushNotificationConfigGetResponsePushNotificationRequestEvent =
  string;

export type ApiPushNotificationConfigUpdateRequestDto = {
  /**
   * Webhook name
   */
  name?: string;
  /**
   * Event destination URL
   */
  url?: string;
  sendType?: ApiPushNotificationConfigUpdateRequestPushNotificationSendType;
  /**
   * Set whether the Webhook is active
   */
  enabled?: boolean;
  /**
   * Set whether the sync queue is stopped
   */
  interrupted?: boolean;
  /**
   * Webhook authentication token
   */
  authToken?: string;
  /**
   * List of events this Webhook will observe
   */
  events?: Array<string>;
};

/**
 * Sequential (SEQUENTIALLY) or non-sequential (NON_SEQUENTIALLY)
 */
export type ApiPushNotificationConfigUpdateRequestPushNotificationSendType =
  | "NON_SEQUENTIALLY"
  | "SEQUENTIALLY";

/**
 * Sequential (SEQUENTIALLY) or non-sequential (NON_SEQUENTIALLY)
 */
export const ApiPushNotificationConfigUpdateRequestPushNotificationSendType = {
  NON_SEQUENTIALLY: "NON_SEQUENTIALLY",
  SEQUENTIALLY: "SEQUENTIALLY",
} as const;

export type ApiPushNotificationConfigUpdateRequestPushNotificationRequestEvent =
  string;

export type ApiPushNotificationConfigListResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<ApiPushNotificationConfigGetResponseDto>;
};

export type ApiPushNotificationConfigDeleteResponseDto = {
  /**
   * Indicates whether the Webhook was removed
   */
  deleted?: boolean;
  /**
   * Unique Webhook Identifier
   */
  id?: string;
};

export type ApiReceivableAnticipationConfigurationGetResponseDto = {
  /**
   * Indicates whether automatic anticipation is enabled for credit card payments
   */
  creditCardAutomaticEnabled?: boolean;
};

export type ApiReceivableAnticipationConfigurationUpdateRequestDto = {
  /**
   * Define whether automatic anticipation is enabled for credit card payments
   */
  creditCardAutomaticEnabled?: boolean;
};

export type ApiReceivableAnticipationPathIdRequestDto = {
  [key: string]: unknown;
};

export type ApiReceivableAnticipationGetResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Unique identifier of anticipation in Asaas
   */
  id?: string;
  /**
   * Unique identifier of the installment to be anticipated
   */
  installment?: string;
  /**
   * Unique identifier of the payment to be anticipated.
   */
  payment?: string;
  status?: ApiReceivableAnticipationGetResponseReceivableAnticipationStatus;
  /**
   * Anticipation request date
   */
  anticipationDate?: Date;
  /**
   * Request due date
   */
  dueDate?: Date;
  /**
   * Anticipation request date
   */
  requestDate?: Date;
  /**
   * Anticipation fee
   */
  fee?: number;
  /**
   * Number of days that were anticipated
   */
  anticipationDays?: number;
  /**
   * Net value discounted the anticipation fee
   */
  netValue?: number;
  /**
   * Total amount of the payment to be anticipated
   */
  totalValue?: number;
  /**
   * Anticipation value
   */
  value?: number;
  /**
   * Reason for rejecting the anticipation payment
   */
  denialObservation?: string;
};

/**
 * Anticipation status
 */
export type ApiReceivableAnticipationGetResponseReceivableAnticipationStatus =
  | "PENDING"
  | "DENIED"
  | "CREDITED"
  | "DEBITED"
  | "CANCELLED"
  | "OVERDUE"
  | "SCHEDULED";

/**
 * Anticipation status
 */
export const ApiReceivableAnticipationGetResponseReceivableAnticipationStatus =
  {
    PENDING: "PENDING",
    DENIED: "DENIED",
    CREDITED: "CREDITED",
    DEBITED: "DEBITED",
    CANCELLED: "CANCELLED",
    OVERDUE: "OVERDUE",
    SCHEDULED: "SCHEDULED",
  } as const;

export type ApiReceivableAnticipationSaveRequestDto = {
  /**
   * ID of the installment to be anticipated
   */
  installment?: string;
  /**
   * ID of the payment to be anticipated
   */
  payment?: string;
  documents?: File;
};

export type ApiReceivableAnticipationListResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<ApiReceivableAnticipationGetResponseDto>;
};

/**
 * Filter by status
 */
export type ApiReceivableAnticipationListRequestReceivableAnticipationStatus =
  | "PENDING"
  | "DENIED"
  | "CREDITED"
  | "DEBITED"
  | "CANCELLED"
  | "OVERDUE"
  | "SCHEDULED";

/**
 * Filter by status
 */
export const ApiReceivableAnticipationListRequestReceivableAnticipationStatus =
  {
    PENDING: "PENDING",
    DENIED: "DENIED",
    CREDITED: "CREDITED",
    DEBITED: "DEBITED",
    CANCELLED: "CANCELLED",
    OVERDUE: "OVERDUE",
    SCHEDULED: "SCHEDULED",
  } as const;

export type ApiReceivableAnticipationSimulateRequestDto = {
  /**
   * ID of the installment to be anticipated
   */
  installment?: string;
  /**
   * ID of the payment to be anticipated
   */
  payment?: string;
};

export type ApiReceivableAnticipationSimulateResponseDto = {
  /**
   * Unique identifier of the installment to be anticipated
   */
  installment?: string;
  /**
   * Unique identifier of the payment to be anticipated
   */
  payment?: string;
  /**
   * Anticipation request date
   */
  anticipationDate?: Date;
  /**
   * Request due date
   */
  dueDate?: Date;
  /**
   * Anticipation fee
   */
  fee?: number;
  /**
   * Number of days that were anticipated
   */
  anticipationDays?: number;
  /**
   * Net value discounted the anticipation fee
   */
  netValue?: number;
  /**
   * Total amount of the payment to be anticipated
   */
  totalValue?: number;
  /**
   * Anticipation value
   */
  value?: number;
  /**
   * Determines the obligation to send electronic invoices or service provision contracts when requesting anticipation payment
   */
  isDocumentationRequired?: boolean;
};

export type ApiReceivableAnticipationLimitsResponseDto = {
  creditCard?: ApiReceivableAnticipationLimitsInfoResponseDto;
  bankSlip?: ApiReceivableAnticipationLimitsInfoResponseDto;
};

/**
 * Credit card anticipation limits
 */
export type ApiReceivableAnticipationLimitsInfoResponseDto = {
  /**
   * Anticipation limit released on the account
   */
  total?: number;
  /**
   * Limit available to anticipate
   */
  available?: number;
};

/**
 * Filter by invoice status
 */
export type ApiSubscriptionGetInvoicesRequestInvoiceStatus =
  | "SCHEDULED"
  | "WAITING_OVERDUE_PAYMENT"
  | "PENDING"
  | "SYNCHRONIZED"
  | "AUTHORIZED"
  | "PROCESSING_CANCELLATION"
  | "CANCELLED"
  | "CANCELLATION_DENIED"
  | "ERROR"
  | "NONE"
  | "CANCELED";

/**
 * Filter by invoice status
 */
export const ApiSubscriptionGetInvoicesRequestInvoiceStatus = {
  SCHEDULED: "SCHEDULED",
  WAITING_OVERDUE_PAYMENT: "WAITING_OVERDUE_PAYMENT",
  PENDING: "PENDING",
  SYNCHRONIZED: "SYNCHRONIZED",
  AUTHORIZED: "AUTHORIZED",
  PROCESSING_CANCELLATION: "PROCESSING_CANCELLATION",
  CANCELLED: "CANCELLED",
  CANCELLATION_DENIED: "CANCELLATION_DENIED",
  ERROR: "ERROR",
  NONE: "NONE",
  CANCELED: "CANCELED",
} as const;

export type ApiSubscriptionInvoiceConfigUpdateRequestDto = {
  /**
   * Deductions. Deductions do not change the total value of the invoice, but they do change the ISS calculation basis.
   */
  deductions?: number;
  /**
   * When the invoice will be issued
   */
  effectiveDatePeriod?:
    | "ON_PAYMENT_CONFIRMATION"
    | "ON_PAYMENT_DUE_DATE"
    | "BEFORE_PAYMENT_DUE_DATE"
    | "ON_DUE_DATE_MONTH"
    | "ON_NEXT_MONTH";
  /**
   * Issue only for paid charges
   */
  receivedOnly?: boolean;
  /**
   * Number of days before billing due date
   */
  daysBeforeDueDate?: number;
  /**
   * Additional notes on the invoice
   */
  observations?: string;
  taxes?: ApiCustomerInvoiceTaxesDto;
};

export type ApiSubscriptionInvoiceConfigGetResponseDto = {
  /**
   * Unique municipal service identifier
   */
  municipalServiceId?: string;
  /**
   * Municipal Service Code
   */
  municipalServiceCode?: string;
  /**
   * Name of municipal service
   */
  municipalServiceName?: string;
  /**
   * Deductions. Deductions do not change the total value of the invoice, but they do change the ISS calculation basis.
   */
  deductions?: number;
  /**
   * When the invoice will be issued
   */
  invoiceCreationPeriod?:
    | "ON_PAYMENT_CONFIRMATION"
    | "ON_PAYMENT_DUE_DATE"
    | "BEFORE_PAYMENT_DUE_DATE"
    | "ON_DUE_DATE_MONTH"
    | "ON_NEXT_MONTH";
  /**
   * Number of days before billing due date
   */
  daysBeforeDueDate?: number;
  /**
   * Issue only for paid charges
   */
  receivedOnly?: boolean;
  /**
   * Additional notes on the invoice
   */
  observations?: string;
  taxes?: ApiCustomerInvoiceTaxesDto;
};

export type ApiSubscriptionDeleteInvoiceConfigResponseDto = {
  /**
   * Informs if configurations have been removed
   */
  deleted?: boolean;
  /**
   * Unique subscription identifier in Asaas
   */
  id?: string;
};

export type ApiSubscriptionPaymentBookResponseDto = {
  [key: string]: unknown;
};

export type ApiSubscriptionGetResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Unique subscription identifier in Asaas
   */
  id?: string;
  /**
   * Subscription creation date
   */
  dateCreated?: Date;
  /**
   * Unique customer identifier
   */
  customer?: string;
  /**
   * Unique identifier of the payments link to which the subscription belongs
   */
  paymentLink?: string;
  billingType?: ApiSubscriptionGetResponseBillingType;
  cycle?: ApiSubscriptionGetResponseCycle;
  /**
   * Subscription value
   */
  value?: number;
  /**
   * Due date of the next payment to be generated
   */
  nextDueDate?: Date;
  /**
   * Deadline for payments to be due
   */
  endDate?: Date;
  /**
   * Subscription description
   */
  description?: string;
  status?: ApiSubscriptionGetResponseSubscriptionStatus;
  discount?: ApiPaymentDiscountDto;
  fine?: ApiPaymentFineResponseDto;
  interest?: ApiPaymentInterestResponseDto;
  /**
   * Informs if the subscription has been removed
   */
  deleted?: boolean;
  /**
   * Maximum number of payments to be generated for this subscription
   */
  maxPayments?: number;
  /**
   * Subscription identifier on your system
   */
  externalReference?: string;
  /**
   * Split information
   */
  split?: Array<{
    /**
     * Asaas wallet identifier that will be transferred
     */
    walletId?: string;
    /**
     * Fixed amount to be transferred to the account when the payment is received
     */
    fixedValue?: number;
    /**
     * Percentage of the net value of the charge to be transferred when received
     */
    percentualValue?: number;
    /**
     * Split identifier in your system
     */
    externalReference?: string;
    /**
     * Split description
     */
    description?: string;
    status?: ApiSubscriptionSplitResponseSubscriptionSplitStatus;
    disabledReason?: ApiSubscriptionSplitResponseSubscriptionSplitDisabledReason;
  }>;
};

/**
 * Billing type
 */
export type ApiSubscriptionGetResponseBillingType =
  | "UNDEFINED"
  | "BOLETO"
  | "CREDIT_CARD"
  | "DEBIT_CARD"
  | "TRANSFER"
  | "DEPOSIT"
  | "PIX";

/**
 * Billing type
 */
export const ApiSubscriptionGetResponseBillingType = {
  UNDEFINED: "UNDEFINED",
  BOLETO: "BOLETO",
  CREDIT_CARD: "CREDIT_CARD",
  DEBIT_CARD: "DEBIT_CARD",
  TRANSFER: "TRANSFER",
  DEPOSIT: "DEPOSIT",
  PIX: "PIX",
} as const;

/**
 * Billing frequency
 */
export type ApiSubscriptionGetResponseCycle =
  | "WEEKLY"
  | "BIWEEKLY"
  | "MONTHLY"
  | "BIMONTHLY"
  | "QUARTERLY"
  | "SEMIANNUALLY"
  | "YEARLY";

/**
 * Billing frequency
 */
export const ApiSubscriptionGetResponseCycle = {
  WEEKLY: "WEEKLY",
  BIWEEKLY: "BIWEEKLY",
  MONTHLY: "MONTHLY",
  BIMONTHLY: "BIMONTHLY",
  QUARTERLY: "QUARTERLY",
  SEMIANNUALLY: "SEMIANNUALLY",
  YEARLY: "YEARLY",
} as const;

/**
 * Subscription status
 */
export type ApiSubscriptionGetResponseSubscriptionStatus =
  | "ACTIVE"
  | "EXPIRED"
  | "INACTIVE";

/**
 * Subscription status
 */
export const ApiSubscriptionGetResponseSubscriptionStatus = {
  ACTIVE: "ACTIVE",
  EXPIRED: "EXPIRED",
  INACTIVE: "INACTIVE",
} as const;

export type ApiSubscriptionSplitResponseDto = {
  /**
   * Asaas wallet identifier that will be transferred
   */
  walletId?: string;
  /**
   * Fixed amount to be transferred to the account when the payment is received
   */
  fixedValue?: number;
  /**
   * Percentage of the net value of the charge to be transferred when received
   */
  percentualValue?: number;
  /**
   * Split identifier in your system
   */
  externalReference?: string;
  /**
   * Split description
   */
  description?: string;
  status?: ApiSubscriptionSplitResponseSubscriptionSplitStatus;
  disabledReason?: ApiSubscriptionSplitResponseSubscriptionSplitDisabledReason;
};

/**
 * Subscription split status
 */
export type ApiSubscriptionSplitResponseSubscriptionSplitStatus =
  | "ACTIVE"
  | "DISABLED";

/**
 * Subscription split status
 */
export const ApiSubscriptionSplitResponseSubscriptionSplitStatus = {
  ACTIVE: "ACTIVE",
  DISABLED: "DISABLED",
} as const;

/**
 * Reason why subscription split was disabled
 */
export type ApiSubscriptionSplitResponseSubscriptionSplitDisabledReason =
  | "WALLET_UNABLE_TO_RECEIVE"
  | "VALUE_DIVERGENCE";

/**
 * Reason why subscription split was disabled
 */
export const ApiSubscriptionSplitResponseSubscriptionSplitDisabledReason = {
  WALLET_UNABLE_TO_RECEIVE: "WALLET_UNABLE_TO_RECEIVE",
  VALUE_DIVERGENCE: "VALUE_DIVERGENCE",
} as const;

export type ApiSubscriptionSaveRequestDto = {
  /**
   * Unique customer identifier in Asaas
   */
  customer: string;
  billingType: ApiSubscriptionSaveRequestBillingType;
  /**
   * Subscription value
   */
  value: number;
  /**
   * First payment due
   */
  nextDueDate: Date;
  discount?: ApiPaymentDiscountDto;
  interest?: ApiPaymentInterestRequestDto;
  fine?: ApiPaymentFineRequestDto;
  cycle: ApiSubscriptionSaveRequestCycle;
  /**
   * Subscription description (max. 500 characters)
   */
  description?: string;
  /**
   * Deadline for payments to be due
   */
  endDate?: Date;
  /**
   * Maximum number of payments to be generated for this subscription
   */
  maxPayments?: number;
  /**
   * Subscription identifier on your system
   */
  externalReference?: string;
  /**
   * Split information
   */
  split?: Array<{
    /**
     * Asaas wallet identifier that will be transferred
     */
    walletId: string;
    /**
     * Fixed amount to be transferred to the account when the payment is received
     */
    fixedValue?: number;
    /**
     * Percentage of the net value of the charge to be transferred when received
     */
    percentualValue?: number;
    /**
     * Split identifier in your system
     */
    externalReference?: string;
    /**
     * Split description
     */
    description?: string;
  }>;
  callback?: ApiPaymentCallbackRequestDto;
};

/**
 * Billing type
 */
export type ApiSubscriptionSaveRequestBillingType =
  | "UNDEFINED"
  | "BOLETO"
  | "CREDIT_CARD"
  | "PIX";

/**
 * Billing type
 */
export const ApiSubscriptionSaveRequestBillingType = {
  UNDEFINED: "UNDEFINED",
  BOLETO: "BOLETO",
  CREDIT_CARD: "CREDIT_CARD",
  PIX: "PIX",
} as const;

/**
 * Billing frequency
 */
export type ApiSubscriptionSaveRequestCycle =
  | "WEEKLY"
  | "BIWEEKLY"
  | "MONTHLY"
  | "BIMONTHLY"
  | "QUARTERLY"
  | "SEMIANNUALLY"
  | "YEARLY";

/**
 * Billing frequency
 */
export const ApiSubscriptionSaveRequestCycle = {
  WEEKLY: "WEEKLY",
  BIWEEKLY: "BIWEEKLY",
  MONTHLY: "MONTHLY",
  BIMONTHLY: "BIMONTHLY",
  QUARTERLY: "QUARTERLY",
  SEMIANNUALLY: "SEMIANNUALLY",
  YEARLY: "YEARLY",
} as const;

export type ApiSubscriptionSplitRequestDto = {
  /**
   * Asaas wallet identifier that will be transferred
   */
  walletId: string;
  /**
   * Fixed amount to be transferred to the account when the payment is received
   */
  fixedValue?: number;
  /**
   * Percentage of the net value of the charge to be transferred when received
   */
  percentualValue?: number;
  /**
   * Split identifier in your system
   */
  externalReference?: string;
  /**
   * Split description
   */
  description?: string;
};

export type ApiSubscriptionUpdateRequestDto = {
  billingType?: ApiSubscriptionUpdateRequestBillingType;
  status?: ApiSubscriptionUpdateRequestSubscriptionStatus;
  /**
   * First payment due
   */
  nextDueDate?: Date;
  discount?: ApiPaymentDiscountDto;
  interest?: ApiPaymentInterestRequestDto;
  fine?: ApiPaymentFineRequestDto;
  cycle?: ApiSubscriptionUpdateRequestCycle;
  /**
   * Subscription description (max. 500 characters)
   */
  description?: string;
  /**
   * Deadline for payments to be due
   */
  endDate?: Date;
  /**
   * true to update the possible properties of already existing pending payments
   */
  updatePendingPayments?: boolean;
  /**
   * Subscription identifier on your system
   */
  externalReference?: string;
  /**
   * Split information
   */
  split?: Array<ApiSubscriptionSplitRequestDto>;
  callback?: ApiPaymentCallbackRequestDto;
};

/**
 * Billing type
 */
export type ApiSubscriptionUpdateRequestBillingType =
  | "UNDEFINED"
  | "BOLETO"
  | "CREDIT_CARD"
  | "PIX";

/**
 * Billing type
 */
export const ApiSubscriptionUpdateRequestBillingType = {
  UNDEFINED: "UNDEFINED",
  BOLETO: "BOLETO",
  CREDIT_CARD: "CREDIT_CARD",
  PIX: "PIX",
} as const;

/**
 * Subscription status
 */
export type ApiSubscriptionUpdateRequestSubscriptionStatus =
  | "ACTIVE"
  | "INACTIVE";

/**
 * Subscription status
 */
export const ApiSubscriptionUpdateRequestSubscriptionStatus = {
  ACTIVE: "ACTIVE",
  INACTIVE: "INACTIVE",
} as const;

/**
 * Billing frequency
 */
export type ApiSubscriptionUpdateRequestCycle =
  | "WEEKLY"
  | "BIWEEKLY"
  | "MONTHLY"
  | "BIMONTHLY"
  | "QUARTERLY"
  | "SEMIANNUALLY"
  | "YEARLY";

/**
 * Billing frequency
 */
export const ApiSubscriptionUpdateRequestCycle = {
  WEEKLY: "WEEKLY",
  BIWEEKLY: "BIWEEKLY",
  MONTHLY: "MONTHLY",
  BIMONTHLY: "BIMONTHLY",
  QUARTERLY: "QUARTERLY",
  SEMIANNUALLY: "SEMIANNUALLY",
  YEARLY: "YEARLY",
} as const;

export type ApiSubscriptionConfigureInvoiceRequestDto = {
  /**
   * Unique municipal service identifier
   */
  municipalServiceId?: string;
  /**
   * Municipal Service Code
   */
  municipalServiceCode?: string;
  /**
   * Name of municipal service
   */
  municipalServiceName?: string;
  /**
   * Update the Payment amount with the invoice taxes already deducted.
   */
  updatePayment?: boolean;
  /**
   * Deductions. Deductions do not change the total value of the invoice, but they do change the ISS calculation basis.
   */
  deductions?: number;
  /**
   * When the invoice will be issued
   */
  effectiveDatePeriod?:
    | "ON_PAYMENT_CONFIRMATION"
    | "ON_PAYMENT_DUE_DATE"
    | "BEFORE_PAYMENT_DUE_DATE"
    | "ON_DUE_DATE_MONTH"
    | "ON_NEXT_MONTH";
  /**
   * Issue only for paid charges
   */
  receivedOnly?: boolean;
  /**
   * Number of days before billing due date
   */
  daysBeforeDueDate?: number;
  /**
   * Additional notes on the invoice
   */
  observations?: string;
  taxes?: ApiCustomerInvoiceTaxesDto;
};

export type ApiSubscriptionListResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<ApiSubscriptionGetResponseDto>;
};

/**
 * Filter by billing type
 */
export type ApiSubscriptionListRequestBillingType =
  | "UNDEFINED"
  | "BOLETO"
  | "CREDIT_CARD"
  | "DEBIT_CARD"
  | "TRANSFER"
  | "DEPOSIT"
  | "PIX";

/**
 * Filter by billing type
 */
export const ApiSubscriptionListRequestBillingType = {
  UNDEFINED: "UNDEFINED",
  BOLETO: "BOLETO",
  CREDIT_CARD: "CREDIT_CARD",
  DEBIT_CARD: "DEBIT_CARD",
  TRANSFER: "TRANSFER",
  DEPOSIT: "DEPOSIT",
  PIX: "PIX",
} as const;

/**
 * Filter by status
 */
export type ApiSubscriptionListRequestSubscriptionStatus =
  | "ACTIVE"
  | "EXPIRED"
  | "INACTIVE";

/**
 * Filter by status
 */
export const ApiSubscriptionListRequestSubscriptionStatus = {
  ACTIVE: "ACTIVE",
  EXPIRED: "EXPIRED",
  INACTIVE: "INACTIVE",
} as const;

export type ApiSubscriptionDeleteResponseDto = {
  /**
   * Informs if the subscription has been removed
   */
  deleted?: boolean;
  /**
   * Unique subscription identifier in Asaas
   */
  id?: string;
};

export type ApiTransferGetResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Unique transfer identifier in Asaas
   */
  id?: string;
  /**
   * Type of transfer
   */
  type?: "PIX" | "TED" | "INTERNAL";
  /**
   * Transfer request date
   */
  dateCreated?: Date;
  /**
   * Transfer amount
   */
  value?: number;
  /**
   * Net value minus transfer fee
   */
  netValue?: number;
  status?: ApiTransferGetResponseTransferStatus;
  /**
   * Transfer rate
   */
  transferFee?: number;
  /**
   * Effective date
   */
  effectiveDate?: Date;
  /**
   * Schedule date
   */
  scheduleDate?: Date;
  /**
   * Unique identifier of the Pix transaction at the Central Bank
   */
  endToEndIdentifier?: string;
  /**
   * `false` when awaiting authorization via SMS Token
   */
  authorized?: boolean;
  /**
   * Reason for transfer failure
   */
  failReason?: string;
  /**
   * Transfer identifier in your system
   */
  externalReference?: string;
  /**
   * Proof of transfer will be available after the transfer is confirmed
   */
  transactionReceiptUrl?: string;
  operationType?: ApiTransferGetResponseTransferType;
  /**
   * Transfer description
   */
  description?: string;
  /**
   * Unique recurrence identifier in Asaas
   */
  recurring?: string;
  bankAccount?: ApiTransferBankAccountGetResponseDto;
};

/**
 * Transfer status
 */
export type ApiTransferGetResponseTransferStatus =
  | "PENDING"
  | "BANK_PROCESSING"
  | "DONE"
  | "CANCELLED"
  | "FAILED";

/**
 * Transfer status
 */
export const ApiTransferGetResponseTransferStatus = {
  PENDING: "PENDING",
  BANK_PROCESSING: "BANK_PROCESSING",
  DONE: "DONE",
  CANCELLED: "CANCELLED",
  FAILED: "FAILED",
} as const;

/**
 * Transfer method
 */
export type ApiTransferGetResponseTransferType = "PIX" | "TED" | "INTERNAL";

/**
 * Transfer method
 */
export const ApiTransferGetResponseTransferType = {
  PIX: "PIX",
  TED: "TED",
  INTERNAL: "INTERNAL",
} as const;

/**
 * Bank account details
 */
export type ApiTransferBankAccountGetResponseDto = {
  bank?: ApiTransferBankGetResponseDto;
  /**
   * Name of bank account owner
   */
  accountName?: string;
  /**
   * Name of bank account owner
   */
  ownerName?: string;
  /**
   * CPF or CNPJ of the bank account owner
   */
  cpfCnpj?: string;
  /**
   * Non-digit agency number
   */
  agency?: string;
  /**
   * Agency digit
   */
  agencyDigit?: string;
  /**
   * Non-digit bank account number
   */
  account?: string;
  /**
   * Bank account digit
   */
  accountDigit?: string;
  /**
   * Pix key address
   */
  pixAddressKey?: string;
};

/**
 * Bank account name
 */
export type ApiTransferBankGetResponseDto = {
  /**
   * Identifier in the Brazilian Payment System
   */
  ispb?: string;
  /**
   * Bank clearing code in the banking system
   */
  code?: string;
  /**
   * Bank name
   */
  name?: string;
};

export type ApiTransferSaveRequestDto = {
  /**
   * Amount to be transferred
   */
  value: number;
  bankAccount?: ApiTransferBankAccountSaveRequestDto;
  operationType?: ApiTransferSaveRequestTransferType;
  /**
   * Enter the Pix key if it is a transfer to a Pix key
   */
  pixAddressKey?: string;
  pixAddressKeyType?: ApiTransferSaveRequestPixAddressKeyType;
  /**
   * Transfers via Pix allow description
   */
  description?: string;
  /**
   * For scheduled transfers, if not informed, payment is instantaneous
   */
  scheduleDate?: Date;
  /**
   * Transfer identifier in your system
   */
  externalReference?: string;
  recurring?: ApiTransferRecurringSaveRequestDto;
};

/**
 * Enter your account details if it is a transfer to a bank account
 */
export type ApiTransferBankAccountSaveRequestDto = {
  bank?: ApiTransferBankSaveRequestDto;
  /**
   * Bank account name
   */
  accountName?: string;
  /**
   * Name of bank account owner
   */
  ownerName: string;
  /**
   * Account owner's date of birth. Only when the bank account does not belong to the same CPF or CNPJ as the Asaas account.
   */
  ownerBirthDate?: Date;
  /**
   * CPF or CNPJ of the bank account owner
   */
  cpfCnpj: string;
  /**
   * Non-digit agency number
   */
  agency: string;
  /**
   * Non-digit bank account number
   */
  account: string;
  /**
   * Bank account digit
   */
  accountDigit: string;
  bankAccountType?: ApiTransferBankAccountSaveRequestBankAccountType;
  /**
   * Identifier in the Brazilian Payment System
   */
  ispb?: string;
};

/**
 * Details of the bank account to which the transfer will be made
 */
export type ApiTransferBankSaveRequestDto = {
  /**
   * Bank clearing code in the banking system
   */
  code: string;
};

/**
 * Account type
 */
export type ApiTransferBankAccountSaveRequestBankAccountType =
  | "CONTA_CORRENTE"
  | "CONTA_POUPANCA";

/**
 * Account type
 */
export const ApiTransferBankAccountSaveRequestBankAccountType = {
  CONTA_CORRENTE: "CONTA_CORRENTE",
  CONTA_POUPANCA: "CONTA_POUPANCA",
} as const;

/**
 * Transfer modality. If not informed and the receiving institution is a Pix participant, the transfer is via Pix. Otherwise via TED.
 */
export type ApiTransferSaveRequestTransferType = "PIX" | "TED";

/**
 * Transfer modality. If not informed and the receiving institution is a Pix participant, the transfer is via Pix. Otherwise via TED.
 */
export const ApiTransferSaveRequestTransferType = {
  PIX: "PIX",
  TED: "TED",
} as const;

/**
 * Enter the type of key if it is a transfer to a Pix key
 */
export type ApiTransferSaveRequestPixAddressKeyType =
  | "CPF"
  | "CNPJ"
  | "EMAIL"
  | "PHONE"
  | "EVP";

/**
 * Enter the type of key if it is a transfer to a Pix key
 */
export const ApiTransferSaveRequestPixAddressKeyType = {
  CPF: "CPF",
  CNPJ: "CNPJ",
  EMAIL: "EMAIL",
  PHONE: "PHONE",
  EVP: "EVP",
} as const;

/**
 * Recurrence information. Only for Pix transfers
 */
export type ApiTransferRecurringSaveRequestDto = {
  frequency?: ApiTransferRecurringSaveRequestRecurringCheckoutScheduleFrequency;
  /**
   * Number of repetitions. This transfer will be included as the first transaction of the recurrence.
   * For the `WEEKLY` frequency, the maximum accepted is: `52`
   * For the `MONTHLY` frequency, the maximum accepted is: `12`
   */
  quantity?: number;
};

/**
 * Frequency
 */
export type ApiTransferRecurringSaveRequestRecurringCheckoutScheduleFrequency =
  | "WEEKLY"
  | "MONTHLY";

/**
 * Frequency
 */
export const ApiTransferRecurringSaveRequestRecurringCheckoutScheduleFrequency =
  {
    WEEKLY: "WEEKLY",
    MONTHLY: "MONTHLY",
  } as const;

export type ApiTransferListResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<ApiTransferGetResponseDto>;
};

export type ApiWalletShowResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<{
    /**
     * Object type
     */
    object?: string;
    /**
     * Unique wallet identifier in Asaas
     */
    id?: string;
  }>;
};

export type ApiWalletGetResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Unique wallet identifier in Asaas
   */
  id?: string;
};

export type ApiPaymentLeanGetResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Unique payment identifier in Asaas
   */
  id?: string;
  /**
   * Payment creation date
   */
  dateCreated?: Date;
  /**
   * Unique identifier of the customer to whom the payment belongs
   */
  customerId?: string;
  /**
   * Unique subscription identifier (when recurring billing)
   */
  subscriptionId?: string;
  /**
   * Unique installment identifier (when billing in installments)
   */
  installmentId?: string;
  /**
   * Unique identifier of the payments link to which the payment belongs
   */
  paymentLinkId?: string;
  /**
   * Payment amount
   */
  value?: number;
  /**
   * Net value of the charge after discounting the Asaas fee
   */
  netValue?: number;
  /**
   * Original amount of charge (filled when paid with interest and fine)
   */
  originalValue?: number;
  /**
   * Calculated amount of interest and fine that must be paid after the charge is due
   */
  interestValue?: number;
  /**
   * Description of the payment
   */
  description?: string;
  billingType?: ApiPaymentLeanGetResponseBillingType;
  /**
   * Informs whether the charge can be paid after the due date (Only for bank slip)
   */
  canBePaidAfterDueDate?: boolean;
  /**
   * Billing confirmation date
   */
  confirmedDate?: Date;
  /**
   * Unique identifier of the Pix transaction to which the payment belongs
   */
  pixTransactionId?: string;
  status?: ApiPaymentLeanGetResponsePaymentStatus;
  /**
   * Payment due date
   */
  dueDate?: Date;
  /**
   * Original due date upon creation of the payment
   */
  originalDueDate?: Date;
  /**
   * Payment date on Asaas
   */
  paymentDate?: Date;
  /**
   * Date on which the customer paid the bank slip
   */
  customerPaymentDate?: Date;
  /**
   * Parcel number
   */
  installmentNumber?: number;
  /**
   * Free search field
   */
  externalReference?: string;
  /**
   * Determines if the payment has been removed
   */
  deleted?: boolean;
  /**
   * Defines whether the charge was anticipated or is in the process of being anticipated
   */
  anticipated?: boolean;
  /**
   * Determines whether the charge is anticipated
   */
  anticipable?: boolean;
  /**
   * Billing Credit date
   */
  creditDate?: string;
  /**
   * URL of proof of confirmation, receipt, reversal or removal
   */
  transactionReceiptUrl?: string;
  /**
   * Duplicate billing identifier (if true)
   */
  duplicatedPaymentId?: string;
  discount?: ApiPaymentDiscountDto;
  fine?: ApiPaymentFineResponseDto;
  interest?: ApiPaymentInterestResponseDto;
  /**
   * Define whether the payment will be sent via post
   */
  postalService?: boolean;
};

/**
 * Payment billing type
 */
export type ApiPaymentLeanGetResponseBillingType =
  | "UNDEFINED"
  | "BOLETO"
  | "CREDIT_CARD"
  | "DEBIT_CARD"
  | "TRANSFER"
  | "DEPOSIT"
  | "PIX";

/**
 * Payment billing type
 */
export const ApiPaymentLeanGetResponseBillingType = {
  UNDEFINED: "UNDEFINED",
  BOLETO: "BOLETO",
  CREDIT_CARD: "CREDIT_CARD",
  DEBIT_CARD: "DEBIT_CARD",
  TRANSFER: "TRANSFER",
  DEPOSIT: "DEPOSIT",
  PIX: "PIX",
} as const;

/**
 * Payment status
 */
export type ApiPaymentLeanGetResponsePaymentStatus =
  | "PENDING"
  | "RECEIVED"
  | "CONFIRMED"
  | "OVERDUE"
  | "REFUNDED"
  | "RECEIVED_IN_CASH"
  | "REFUND_REQUESTED"
  | "REFUND_IN_PROGRESS"
  | "CHARGEBACK_REQUESTED"
  | "CHARGEBACK_DISPUTE"
  | "AWAITING_CHARGEBACK_REVERSAL"
  | "DUNNING_REQUESTED"
  | "DUNNING_RECEIVED"
  | "AWAITING_RISK_ANALYSIS";

/**
 * Payment status
 */
export const ApiPaymentLeanGetResponsePaymentStatus = {
  PENDING: "PENDING",
  RECEIVED: "RECEIVED",
  CONFIRMED: "CONFIRMED",
  OVERDUE: "OVERDUE",
  REFUNDED: "REFUNDED",
  RECEIVED_IN_CASH: "RECEIVED_IN_CASH",
  REFUND_REQUESTED: "REFUND_REQUESTED",
  REFUND_IN_PROGRESS: "REFUND_IN_PROGRESS",
  CHARGEBACK_REQUESTED: "CHARGEBACK_REQUESTED",
  CHARGEBACK_DISPUTE: "CHARGEBACK_DISPUTE",
  AWAITING_CHARGEBACK_REVERSAL: "AWAITING_CHARGEBACK_REVERSAL",
  DUNNING_REQUESTED: "DUNNING_REQUESTED",
  DUNNING_RECEIVED: "DUNNING_RECEIVED",
  AWAITING_RISK_ANALYSIS: "AWAITING_RISK_ANALYSIS",
} as const;

export type ApiPaymentLeanListResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<ApiPaymentLeanGetResponseDto>;
};

export type ApiPixAddressKeyGetResponseDto = {
  /**
   * Unique Pix key identifier in Asaas
   */
  id?: string;
  /**
   * Key value
   */
  key?: string;
  type?: ApiPixAddressKeyGetResponsePixAddressKeyType;
  status?: ApiPixAddressKeyGetResponsePixAddressKeyStatus;
  /**
   * Key creation date
   */
  dateCreated?: Date;
  /**
   * Determines whether the key can be deleted
   */
  canBeDeleted?: boolean;
  /**
   * Reason it cannot be removed
   */
  cannotBeDeletedReason?: string;
  qrCode?: ApiPixAddressKeyQrCodeGetResponseDto;
};

/**
 * Pix key type
 */
export type ApiPixAddressKeyGetResponsePixAddressKeyType = "EVP";

/**
 * Pix key type
 */
export const ApiPixAddressKeyGetResponsePixAddressKeyType = {
  EVP: "EVP",
} as const;

/**
 * Key status
 */
export type ApiPixAddressKeyGetResponsePixAddressKeyStatus =
  | "AWAITING_ACTIVATION"
  | "ACTIVE"
  | "AWAITING_DELETION"
  | "AWAITING_ACCOUNT_DELETION"
  | "DELETED"
  | "ERROR";

/**
 * Key status
 */
export const ApiPixAddressKeyGetResponsePixAddressKeyStatus = {
  AWAITING_ACTIVATION: "AWAITING_ACTIVATION",
  ACTIVE: "ACTIVE",
  AWAITING_DELETION: "AWAITING_DELETION",
  AWAITING_ACCOUNT_DELETION: "AWAITING_ACCOUNT_DELETION",
  DELETED: "DELETED",
  ERROR: "ERROR",
} as const;

/**
 * Pix key QRCode
 */
export type ApiPixAddressKeyQrCodeGetResponseDto = {
  /**
   * QrCode image in base64
   */
  encodedImage?: string;
  /**
   * Copy and Paste the QrCode
   */
  payload?: string;
};

export type ApiPixAddressKeySaveRequestDto = {
  type: ApiPixAddressKeySaveRequestPixAddressKeyType;
};

/**
 * Pix key type
 */
export type ApiPixAddressKeySaveRequestPixAddressKeyType = "EVP";

/**
 * Pix key type
 */
export const ApiPixAddressKeySaveRequestPixAddressKeyType = {
  EVP: "EVP",
} as const;

export type ApiPixAddressKeyListResponseDto = {
  /**
   * List of objects
   */
  data?: Array<ApiPixAddressKeyGetResponseDto>;
};

/**
 * Filter by current key status
 */
export type ApiPixAddressKeyListRequestPixAddressKeyStatus =
  | "AWAITING_ACTIVATION"
  | "ACTIVE"
  | "AWAITING_DELETION"
  | "AWAITING_ACCOUNT_DELETION"
  | "DELETED"
  | "ERROR";

/**
 * Filter by current key status
 */
export const ApiPixAddressKeyListRequestPixAddressKeyStatus = {
  AWAITING_ACTIVATION: "AWAITING_ACTIVATION",
  ACTIVE: "ACTIVE",
  AWAITING_DELETION: "AWAITING_DELETION",
  AWAITING_ACCOUNT_DELETION: "AWAITING_ACCOUNT_DELETION",
  DELETED: "DELETED",
  ERROR: "ERROR",
} as const;

export type ApiPixQrCodeSaveRequestDto = {
  /**
   * Key that will receive QrCode payments
   */
  addressKey?: string;
  /**
   * QrCode Description
   */
  description?: string;
  /**
   * Value of the QrCode, if not informed, the payer can choose the value
   */
  value?: number;
  /**
   * QrCode Format
   */
  format?: "ALL" | "IMAGE" | "PAYLOAD";
  /**
   * QrCode expiration date/time, after this date all payments will be refused.
   */
  expirationDate?: Date;
  /**
   * Determines the expiration date in seconds.
   */
  expirationSeconds?: number;
  /**
   * Defines whether the QrCode can be paid multiple times, if not entered the default value is true.
   */
  allowsMultiplePayments?: boolean;
  /**
   * Free search field
   */
  externalReference?: string;
};

export type ApiPixQrCodeSaveResponseDto = {
  /**
   * qrCode image in base64
   */
  id?: string;
  /**
   * QrCode identifier
   */
  encodedImage?: string;
  /**
   * Copy and Paste the QrCode
   */
  payload?: string;
  /**
   * Indicates whether multiple payments are allowed
   */
  allowsMultiplePayments?: boolean;
  /**
   * QrCode expiration date/time, after this date all payments will be refused
   */
  expirationDate?: Date;
  /**
   * Free search field
   */
  externalReference?: string;
};

export type ApiPixQrCodeDecodeRequestDto = {
  /**
   * QRCode payload
   */
  payload: string;
  /**
   * Change amount (for QRCode Change)
   */
  changeValue?: number;
};

export type ApiPixQrCodeDecodeResponseDto = {
  /**
   * Copy and Paste of the QRCode
   */
  payload?: string;
  type?: ApiPixQrCodeDecodeResponsePixQrCodeType;
  transactionOriginType?: ApiPixQrCodeDecodeResponsePixTransactionOriginType;
  /**
   * Pix key used
   */
  pixKey?: string;
  /**
   * Unique Pix reconciliation identifier with Asaas
   */
  conciliationIdentifier?: string;
  /**
   * Unique identifier of the Pix transaction at the Banco Central
   */
  endToEndIdentifier?: string;
  /**
   * Due date
   */
  dueDate?: Date;
  /**
   * Expiration date
   */
  expirationDate?: Date;
  finality?: ApiPixQrCodeDecodeResponsePixTransactionCashValueFinality;
  /**
   * QRCode Value
   */
  value?: number;
  /**
   * Change value
   */
  changeValue?: number;
  /**
   * Interest value
   */
  interest?: number;
  /**
   * Fine value
   */
  fine?: number;
  /**
   * Discount value
   */
  discount?: number;
  /**
   * Total amount with fine, interest and discount applied
   */
  totalValue?: number;
  /**
   * Informs if the QRCode can be paid with another amount
   */
  canBePaidWithDifferentValue?: boolean;
  /**
   * Informs whether the change can be paid with another amount
   */
  canBeModifyChangeValue?: boolean;
  receiver?: ApiPixQrCodeDecodeReceiverDto;
  payer?: ApiPixTransactionQrCodePayerResponseDto;
  /**
   * Description provided during the creation of the QRCode
   */
  description?: string;
  /**
   * Informs if the QRCode can be paid
   */
  canBePaid?: boolean;
  /**
   * Informs why QRCode cannot be paid
   */
  cannotBePaidReason?: string;
};

/**
 * QRCode Type
 */
export type ApiPixQrCodeDecodeResponsePixQrCodeType =
  | "STATIC"
  | "DYNAMIC"
  | "DYNAMIC_WITH_ASAAS_ADDRESS_KEY";

/**
 * QRCode Type
 */
export const ApiPixQrCodeDecodeResponsePixQrCodeType = {
  STATIC: "STATIC",
  DYNAMIC: "DYNAMIC",
  DYNAMIC_WITH_ASAAS_ADDRESS_KEY: "DYNAMIC_WITH_ASAAS_ADDRESS_KEY",
} as const;

/**
 * Transaction origin
 */
export type ApiPixQrCodeDecodeResponsePixTransactionOriginType =
  | "MANUAL"
  | "ADDRESS_KEY"
  | "STATIC_QRCODE"
  | "DYNAMIC_QRCODE"
  | "PAYMENT_INITIATION_SERVICE";

/**
 * Transaction origin
 */
export const ApiPixQrCodeDecodeResponsePixTransactionOriginType = {
  MANUAL: "MANUAL",
  ADDRESS_KEY: "ADDRESS_KEY",
  STATIC_QRCODE: "STATIC_QRCODE",
  DYNAMIC_QRCODE: "DYNAMIC_QRCODE",
  PAYMENT_INITIATION_SERVICE: "PAYMENT_INITIATION_SERVICE",
} as const;

/**
 * Used to indicate whether it is a Withdrawal or Change
 */
export type ApiPixQrCodeDecodeResponsePixTransactionCashValueFinality =
  | "WITHDRAWAL"
  | "CHANGE";

/**
 * Used to indicate whether it is a Withdrawal or Change
 */
export const ApiPixQrCodeDecodeResponsePixTransactionCashValueFinality = {
  WITHDRAWAL: "WITHDRAWAL",
  CHANGE: "CHANGE",
} as const;

/**
 * Information about the receiver
 */
export type ApiPixQrCodeDecodeReceiverDto = {
  /**
   * Financial institution code
   */
  ispb?: string;
  /**
   * Name of the financial institution
   */
  ispbName?: string;
  /**
   * Receiver name
   */
  name?: string;
  /**
   * Receiver's trade name
   */
  tradingName?: string;
  /**
   * CPF or CNPJ of the receiver
   */
  cpfCnpj?: string;
  personType?: ApiPixQrCodeDecodeReceiverPersonType;
  accountType?: ApiPixQrCodeDecodeReceiverPixAccountType;
};

/**
 * Person type
 */
export type ApiPixQrCodeDecodeReceiverPersonType = "JURIDICA" | "FISICA";

/**
 * Person type
 */
export const ApiPixQrCodeDecodeReceiverPersonType = {
  JURIDICA: "JURIDICA",
  FISICA: "FISICA",
} as const;

/**
 * Receiver account type
 */
export type ApiPixQrCodeDecodeReceiverPixAccountType =
  | "CHECKING_ACCOUNT"
  | "SALARY_ACCOUNT"
  | "INVESTIMENT_ACCOUNT"
  | "PAYMENT_ACCOUNT";

/**
 * Receiver account type
 */
export const ApiPixQrCodeDecodeReceiverPixAccountType = {
  CHECKING_ACCOUNT: "CHECKING_ACCOUNT",
  SALARY_ACCOUNT: "SALARY_ACCOUNT",
  INVESTIMENT_ACCOUNT: "INVESTIMENT_ACCOUNT",
  PAYMENT_ACCOUNT: "PAYMENT_ACCOUNT",
} as const;

/**
 * Information about the payer
 */
export type ApiPixTransactionQrCodePayerResponseDto = {
  /**
   * Payer's name
   */
  name?: string;
  /**
   * CPF or CNPJ of the payer
   */
  cpfCnpj?: string;
};

export type ApiPixQrCodeDeleteResponseDto = {
  /**
   * QR Code identifier
   */
  id?: string;
  /**
   * Indicates whether the QR Code has been removed
   */
  deleted?: boolean;
};

export type ApiPixTransactionCancelRequestDto = {
  [key: string]: unknown;
};

export type ApiPixTransactionGetResponseDto = {
  /**
   * Unique identifier of the Pix transaction in Asaas
   */
  id?: string;
  /**
   * Pix transaction identifier at the Central Bank
   */
  endToEndIdentifier?: string;
  finality?: ApiPixTransactionGetResponsePixTransactionCashValueFinality;
  /**
   * Transaction or Withdrawal Value
   */
  value?: number;
  /**
   * Change value
   */
  changeValue?: number;
  /**
   * Value reversed
   */
  refundedValue?: number;
  /**
   * Transaction date
   */
  effectiveDate?: Date;
  /**
   * Schedule date
   */
  scheduledDate?: Date;
  status?: ApiPixTransactionGetResponsePixTransactionStatus;
  type?: ApiPixTransactionGetResponsePixTransactionType;
  originType?: ApiPixTransactionGetResponsePixTransactionOriginType;
  /**
   * QrCode identifier linked to the transaction
   */
  conciliationIdentifier?: string;
  /**
   * Description about the transaction
   */
  description?: string;
  /**
   * Proof of transaction will be available after the transaction is confirmed.
   */
  transactionReceiptUrl?: string;
  /**
   * Reason why the transaction was declined
   */
  refusalReason?: string;
  /**
   * Indicates whether the transaction can be canceled
   */
  canBeCanceled?: boolean;
  originalTransaction?: ApiPixOriginalTransactionResponseDto;
  externalAccount?: ApiPixTransactionExternalAccountResponseDto;
  qrCode?: ApiPixTransactionQrCodeResponseDto;
  /**
   * Unique billing identifier
   */
  payment?: string;
  /**
   * Indicates whether the transaction can be refunded
   */
  canBeRefunded?: boolean;
  /**
   * Reason why the chargeback was disabled
   */
  refundDisabledReason?: string;
  /**
   * Debit or credit fee for the transaction
   */
  chargedFeeValue?: number;
  /**
   * Transaction creation date
   */
  dateCreated?: Date;
  /**
   * Pix key when the transaction is a credit
   */
  addressKey?: string;
  addressKeyType?: ApiPixTransactionGetResponsePixAddressKeyType;
  /**
   * Transfer identifier
   */
  transferId?: string;
  /**
   * Free search field
   */
  externalReference?: string;
};

/**
 * Used to indicate whether it is a Withdrawal or Change
 */
export type ApiPixTransactionGetResponsePixTransactionCashValueFinality =
  | "WITHDRAWAL"
  | "CHANGE";

/**
 * Used to indicate whether it is a Withdrawal or Change
 */
export const ApiPixTransactionGetResponsePixTransactionCashValueFinality = {
  WITHDRAWAL: "WITHDRAWAL",
  CHANGE: "CHANGE",
} as const;

/**
 * Transaction status
 */
export type ApiPixTransactionGetResponsePixTransactionStatus =
  | "AWAITING_BALANCE_VALIDATION"
  | "AWAITING_INSTANT_PAYMENT_ACCOUNT_BALANCE"
  | "AWAITING_CRITICAL_ACTION_AUTHORIZATION"
  | "AWAITING_CHECKOUT_RISK_ANALYSIS_REQUEST"
  | "AWAITING_CASH_IN_RISK_ANALYSIS_REQUEST"
  | "SCHEDULED"
  | "AWAITING_REQUEST"
  | "REQUESTED"
  | "DONE"
  | "REFUSED"
  | "CANCELLED";

/**
 * Transaction status
 */
export const ApiPixTransactionGetResponsePixTransactionStatus = {
  AWAITING_BALANCE_VALIDATION: "AWAITING_BALANCE_VALIDATION",
  AWAITING_INSTANT_PAYMENT_ACCOUNT_BALANCE:
    "AWAITING_INSTANT_PAYMENT_ACCOUNT_BALANCE",
  AWAITING_CRITICAL_ACTION_AUTHORIZATION:
    "AWAITING_CRITICAL_ACTION_AUTHORIZATION",
  AWAITING_CHECKOUT_RISK_ANALYSIS_REQUEST:
    "AWAITING_CHECKOUT_RISK_ANALYSIS_REQUEST",
  AWAITING_CASH_IN_RISK_ANALYSIS_REQUEST:
    "AWAITING_CASH_IN_RISK_ANALYSIS_REQUEST",
  SCHEDULED: "SCHEDULED",
  AWAITING_REQUEST: "AWAITING_REQUEST",
  REQUESTED: "REQUESTED",
  DONE: "DONE",
  REFUSED: "REFUSED",
  CANCELLED: "CANCELLED",
} as const;

/**
 * Transaction type
 */
export type ApiPixTransactionGetResponsePixTransactionType =
  | "DEBIT"
  | "CREDIT"
  | "CREDIT_REFUND"
  | "DEBIT_REFUND"
  | "DEBIT_REFUND_CANCELLATION";

/**
 * Transaction type
 */
export const ApiPixTransactionGetResponsePixTransactionType = {
  DEBIT: "DEBIT",
  CREDIT: "CREDIT",
  CREDIT_REFUND: "CREDIT_REFUND",
  DEBIT_REFUND: "DEBIT_REFUND",
  DEBIT_REFUND_CANCELLATION: "DEBIT_REFUND_CANCELLATION",
} as const;

/**
 * Indicates the origin of the transaction
 */
export type ApiPixTransactionGetResponsePixTransactionOriginType =
  | "MANUAL"
  | "ADDRESS_KEY"
  | "STATIC_QRCODE"
  | "DYNAMIC_QRCODE"
  | "PAYMENT_INITIATION_SERVICE";

/**
 * Indicates the origin of the transaction
 */
export const ApiPixTransactionGetResponsePixTransactionOriginType = {
  MANUAL: "MANUAL",
  ADDRESS_KEY: "ADDRESS_KEY",
  STATIC_QRCODE: "STATIC_QRCODE",
  DYNAMIC_QRCODE: "DYNAMIC_QRCODE",
  PAYMENT_INITIATION_SERVICE: "PAYMENT_INITIATION_SERVICE",
} as const;

/**
 * Original transaction information if a chargeback has occurred
 */
export type ApiPixOriginalTransactionResponseDto = {
  /**
   * Unique transaction identifier
   */
  id?: string;
  /**
   * Unique identifier of the Pix transaction at the Central Bank
   */
  endToEndIdentifier?: string;
  /**
   * Original transaction value
   */
  value?: number;
  /**
   * Transaction date
   */
  effectiveDate?: Date;
};

/**
 * Information about the recipient
 */
export type ApiPixTransactionExternalAccountResponseDto = {
  /**
   * Payment Institution Identifier
   */
  ispb?: string;
  /**
   * Name of Payment Institution
   */
  ispbName?: string;
  /**
   * Receiver name
   */
  name?: string;
  /**
   * CPF or CNPJ of the recipient
   */
  cpfCnpj?: string;
  /**
   * Pix Key
   */
  addressKey?: string;
  addressKeyType?: ApiPixTransactionExternalAccountResponsePixAddressKeyType;
};

/**
 * Pix key type
 */
export type ApiPixTransactionExternalAccountResponsePixAddressKeyType =
  | "CPF"
  | "CNPJ"
  | "EMAIL"
  | "PHONE"
  | "EVP";

/**
 * Pix key type
 */
export const ApiPixTransactionExternalAccountResponsePixAddressKeyType = {
  CPF: "CPF",
  CNPJ: "CNPJ",
  EMAIL: "EMAIL",
  PHONE: "PHONE",
  EVP: "EVP",
} as const;

/**
 * Information about QrCode
 */
export type ApiPixTransactionQrCodeResponseDto = {
  payer?: ApiPixTransactionQrCodePayerResponseDto;
  /**
   * Unique Pix reconciliation identifier with Asaas
   */
  conciliationIdentifier?: string;
  /**
   * Original transaction value
   */
  originalValue?: number;
  /**
   * Due date
   */
  dueDate?: Date;
  /**
   * Interest value
   */
  interest?: number;
  /**
   * Fine value
   */
  fine?: number;
  /**
   * Discount amount
   */
  discount?: number;
  /**
   * Expiration date
   */
  expirationDate?: Date;
};

/**
 * Pix key type
 */
export type ApiPixTransactionGetResponsePixAddressKeyType =
  | "CPF"
  | "CNPJ"
  | "EMAIL"
  | "PHONE"
  | "EVP";

/**
 * Pix key type
 */
export const ApiPixTransactionGetResponsePixAddressKeyType = {
  CPF: "CPF",
  CNPJ: "CNPJ",
  EMAIL: "EMAIL",
  PHONE: "PHONE",
  EVP: "EVP",
} as const;

export type ApiPixTransactionSaveRequestDto = {
  qrCode: ApiPixTransactionQrCodeSaveRequestDto;
  /**
   * Value to be paid
   */
  value: number;
  /**
   * Payment Description
   */
  description?: string;
  /**
   * Used to schedule payment
   */
  scheduleDate?: Date;
};

/**
 * QRCode payload for payment
 */
export type ApiPixTransactionQrCodeSaveRequestDto = {
  /**
   * QRCode payload
   */
  payload?: string;
  /**
   * Change amount (for QRCode Change)
   */
  changeValue?: number;
};

export type ApiPixTransactionListResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<ApiPixTransactionGetResponseDto>;
};

/**
 * Filter by transaction status
 */
export type ApiPixTransactionListRequestPixTransactionStatus =
  | "AWAITING_BALANCE_VALIDATION"
  | "AWAITING_INSTANT_PAYMENT_ACCOUNT_BALANCE"
  | "AWAITING_CRITICAL_ACTION_AUTHORIZATION"
  | "AWAITING_CHECKOUT_RISK_ANALYSIS_REQUEST"
  | "AWAITING_CASH_IN_RISK_ANALYSIS_REQUEST"
  | "SCHEDULED"
  | "AWAITING_REQUEST"
  | "REQUESTED"
  | "DONE"
  | "REFUSED"
  | "CANCELLED";

/**
 * Filter by transaction status
 */
export const ApiPixTransactionListRequestPixTransactionStatus = {
  AWAITING_BALANCE_VALIDATION: "AWAITING_BALANCE_VALIDATION",
  AWAITING_INSTANT_PAYMENT_ACCOUNT_BALANCE:
    "AWAITING_INSTANT_PAYMENT_ACCOUNT_BALANCE",
  AWAITING_CRITICAL_ACTION_AUTHORIZATION:
    "AWAITING_CRITICAL_ACTION_AUTHORIZATION",
  AWAITING_CHECKOUT_RISK_ANALYSIS_REQUEST:
    "AWAITING_CHECKOUT_RISK_ANALYSIS_REQUEST",
  AWAITING_CASH_IN_RISK_ANALYSIS_REQUEST:
    "AWAITING_CASH_IN_RISK_ANALYSIS_REQUEST",
  SCHEDULED: "SCHEDULED",
  AWAITING_REQUEST: "AWAITING_REQUEST",
  REQUESTED: "REQUESTED",
  DONE: "DONE",
  REFUSED: "REFUSED",
  CANCELLED: "CANCELLED",
} as const;

/**
 * Filter by transaction type
 */
export type ApiPixTransactionListRequestPixTransactionType =
  | "DEBIT"
  | "CREDIT"
  | "CREDIT_REFUND"
  | "DEBIT_REFUND"
  | "DEBIT_REFUND_CANCELLATION";

/**
 * Filter by transaction type
 */
export const ApiPixTransactionListRequestPixTransactionType = {
  DEBIT: "DEBIT",
  CREDIT: "CREDIT",
  CREDIT_REFUND: "CREDIT_REFUND",
  DEBIT_REFUND: "DEBIT_REFUND",
  DEBIT_REFUND_CANCELLATION: "DEBIT_REFUND_CANCELLATION",
} as const;

export type ApiPixTransactionRecurringCheckoutScheduleCancelItemRequestDto = {
  [key: string]: unknown;
};

export type ApiPixTransactionRecurringCheckoutScheduleGetItemResponseDto = {
  /**
   * Unique recurrence item identifier in Asaas
   */
  id?: string;
  status?: ApiPixTransactionRecurringCheckoutScheduleGetItemResponseRecurringCheckoutSchedulePixItemStatus;
  /**
   * Recurrence item scheduled date
   */
  scheduledDate?: Date;
  /**
   * Whether the recurrence item can be cancelled
   */
  canBeCancelled?: boolean;
  /**
   * Recurrence number
   */
  recurrenceNumber?: number;
  /**
   * Number of repetitions
   */
  quantity?: number;
  /**
   * Recurrence value
   */
  value?: number;
  /**
   * Recurrence item refusal reason
   */
  refusalReasonDescription?: string;
  externalAccount?: ApiPixTransactionRecurringCheckoutScheduleExternalAccountDto;
};

/**
 * Recurrence item status
 */
export type ApiPixTransactionRecurringCheckoutScheduleGetItemResponseRecurringCheckoutSchedulePixItemStatus =
  "PENDING" | "CANCELLED" | "REFUSED" | "DONE";

/**
 * Recurrence item status
 */
export const ApiPixTransactionRecurringCheckoutScheduleGetItemResponseRecurringCheckoutSchedulePixItemStatus =
  {
    PENDING: "PENDING",
    CANCELLED: "CANCELLED",
    REFUSED: "REFUSED",
    DONE: "DONE",
  } as const;

/**
 * Receiver information
 */
export type ApiPixTransactionRecurringCheckoutScheduleExternalAccountDto = {
  /**
   * Receiver name
   */
  name?: string;
  /**
   * Payment institution name
   */
  financialInstitutionName?: string;
  /**
   * Receiver CPF or CNPJ
   */
  cpfCnpj?: string;
  /**
   * Receiver Pix key
   */
  pixKey?: string;
};

export type ApiPixTransactionRecurringCheckoutSchedulePathIdRequestDto = {
  [key: string]: unknown;
};

export type ApiPixTransactionRecurringCheckoutScheduleGetResponseDto = {
  /**
   * Unique recurrence identifier in Asaas
   */
  id?: string;
  status?: ApiPixTransactionRecurringCheckoutScheduleGetResponseRecurringCheckoutScheduleStatus;
  origin?: ApiPixTransactionRecurringCheckoutScheduleGetResponseRecurringCheckoutScheduleOrigin;
  /**
   * Recurrence value
   */
  value?: number;
  frequency?: ApiPixTransactionRecurringCheckoutScheduleGetResponseRecurringCheckoutScheduleFrequency;
  /**
   * Number of repetitions
   */
  quantity?: number;
  /**
   * Recurrence start date
   */
  startDate?: Date;
  /**
   * Recurrence finish date
   */
  finishDate?: Date;
  /**
   * Whether the recurrence can be cancelled
   */
  canBeCancelled?: boolean;
  externalAccount?: ApiPixTransactionRecurringCheckoutScheduleExternalAccountDto;
};

/**
 * Recurrence status
 */
export type ApiPixTransactionRecurringCheckoutScheduleGetResponseRecurringCheckoutScheduleStatus =

    | "AWAITING_CRITICAL_ACTION_AUTHORIZATION"
    | "PENDING"
    | "SCHEDULED"
    | "CANCELLED"
    | "DONE";

/**
 * Recurrence status
 */
export const ApiPixTransactionRecurringCheckoutScheduleGetResponseRecurringCheckoutScheduleStatus =
  {
    AWAITING_CRITICAL_ACTION_AUTHORIZATION:
      "AWAITING_CRITICAL_ACTION_AUTHORIZATION",
    PENDING: "PENDING",
    SCHEDULED: "SCHEDULED",
    CANCELLED: "CANCELLED",
    DONE: "DONE",
  } as const;

/**
 * Indicates the origin of the recurrence
 */
export type ApiPixTransactionRecurringCheckoutScheduleGetResponseRecurringCheckoutScheduleOrigin =
  "PIX";

/**
 * Indicates the origin of the recurrence
 */
export const ApiPixTransactionRecurringCheckoutScheduleGetResponseRecurringCheckoutScheduleOrigin =
  {
    PIX: "PIX",
  } as const;

/**
 * Recurrence frequency
 */
export type ApiPixTransactionRecurringCheckoutScheduleGetResponseRecurringCheckoutScheduleFrequency =
  "WEEKLY" | "MONTHLY";

/**
 * Recurrence frequency
 */
export const ApiPixTransactionRecurringCheckoutScheduleGetResponseRecurringCheckoutScheduleFrequency =
  {
    WEEKLY: "WEEKLY",
    MONTHLY: "MONTHLY",
  } as const;

export type ApiPixTransactionRecurringCheckoutScheduleListItemsResponseDto = {
  /**
   * List starting element
   */
  offset?: bigint;
  /**
   * Number of list elements (max: 100)
   */
  limit?: bigint;
  /**
   * List of objects
   */
  data?: Array<ApiPixTransactionRecurringCheckoutScheduleGetItemResponseDto>;
};

export type ApiPixTransactionRecurringCheckoutScheduleListResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Indicates whether there is another page to be searched
   */
  hasMore?: boolean;
  /**
   * Total number of items for the filters entered
   */
  totalCount?: number;
  /**
   * Number of objects per page
   */
  limit?: number;
  /**
   * Position of the object from which the page should be loaded
   */
  offset?: number;
  /**
   * List of objects
   */
  data?: Array<ApiPixTransactionRecurringCheckoutScheduleGetResponseDto>;
};

/**
 * Filter by recurrence status
 */
export type ApiPixTransactionRecurringCheckoutScheduleListRequestRecurringCheckoutScheduleStatus =

    | "AWAITING_CRITICAL_ACTION_AUTHORIZATION"
    | "PENDING"
    | "SCHEDULED"
    | "CANCELLED"
    | "DONE";

/**
 * Filter by recurrence status
 */
export const ApiPixTransactionRecurringCheckoutScheduleListRequestRecurringCheckoutScheduleStatus =
  {
    AWAITING_CRITICAL_ACTION_AUTHORIZATION:
      "AWAITING_CRITICAL_ACTION_AUTHORIZATION",
    PENDING: "PENDING",
    SCHEDULED: "SCHEDULED",
    CANCELLED: "CANCELLED",
    DONE: "DONE",
  } as const;

export type ApiPaymentSaveWithCreditCardRequestDto = {
  /**
   * Unique customer identifier in Asaas
   */
  customer: string;
  billingType: ApiPaymentSaveWithCreditCardRequestBillingType;
  /**
   * Payment amount
   */
  value: number;
  /**
   * Payment due date
   */
  dueDate: Date;
  /**
   * Payment description (max. 500 characters)
   */
  description?: string;
  /**
   * Days after registration cancellation deadline (only for bank slip)
   */
  daysAfterDueDateToRegistrationCancellation?: number;
  /**
   * Free search field
   */
  externalReference?: string;
  /**
   * Number of installments (only in the case of installment payment)
   */
  installmentCount?: number;
  /**
   * Enter the total amount of a charge that will be paid in installments (only in the case of an installment charge). If this field is sent, the installmentValue is not necessary, the calculation per installment will be automatic.
   */
  totalValue?: number;
  /**
   * Value of each installment (only in the case of installment payment). Send this field if you want to define the value of each installment.
   */
  installmentValue?: number;
  discount?: ApiPaymentDiscountDto;
  interest?: ApiPaymentInterestRequestDto;
  fine?: ApiPaymentFineRequestDto;
  /**
   * Define whether the payment will be sent via post
   */
  postalService?: boolean;
  /**
   * Split Settings
   */
  split?: Array<ApiPaymentSplitRequestDto>;
  callback?: ApiPaymentCallbackRequestDto;
  creditCard?: ApiCreditCardRequestDto;
  creditCardHolderInfo?: ApiCreditCardHolderInfoRequestDto;
  /**
   * Credit card token for using the credit card tokenization functionality
   */
  creditCardToken?: string;
  /**
   * Carry out only the Pre-Authorization of the payment
   */
  authorizeOnly?: boolean;
  /**
   * IP from where the customer is making the purchase. Your server's IP must not be entered.
   */
  remoteIp: string;
};

/**
 * Payment billing type
 */
export type ApiPaymentSaveWithCreditCardRequestBillingType =
  | "UNDEFINED"
  | "BOLETO"
  | "CREDIT_CARD"
  | "PIX";

/**
 * Payment billing type
 */
export const ApiPaymentSaveWithCreditCardRequestBillingType = {
  UNDEFINED: "UNDEFINED",
  BOLETO: "BOLETO",
  CREDIT_CARD: "CREDIT_CARD",
  PIX: "PIX",
} as const;

export type ApiPaymentLeanSaveWithCreditCardResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Unique payment identifier in Asaas
   */
  id?: string;
  /**
   * Payment creation date
   */
  dateCreated?: Date;
  /**
   * Unique identifier of the customer to whom the payment belongs
   */
  customerId?: string;
  /**
   * Unique subscription identifier (when recurring billing)
   */
  subscriptionId?: string;
  /**
   * Unique installment identifier (when billing in installments)
   */
  installmentId?: string;
  /**
   * Unique identifier of the payments link to which the payment belongs
   */
  paymentLinkId?: string;
  /**
   * Payment amount
   */
  value?: number;
  /**
   * Net value of the charge after discounting the Asaas fee
   */
  netValue?: number;
  /**
   * Original amount of charge (filled when paid with interest and fine)
   */
  originalValue?: number;
  /**
   * Calculated amount of interest and fine that must be paid after the charge is due
   */
  interestValue?: number;
  /**
   * Description of the payment
   */
  description?: string;
  billingType?: ApiPaymentLeanSaveWithCreditCardResponseBillingType;
  /**
   * Informs whether the charge can be paid after the due date (Only for bank slip)
   */
  canBePaidAfterDueDate?: boolean;
  /**
   * Billing confirmation date
   */
  confirmedDate?: Date;
  /**
   * Unique identifier of the Pix transaction to which the payment belongs
   */
  pixTransactionId?: string;
  status?: ApiPaymentLeanSaveWithCreditCardResponsePaymentStatus;
  /**
   * Payment due date
   */
  dueDate?: Date;
  /**
   * Original due date upon creation of the payment
   */
  originalDueDate?: Date;
  /**
   * Payment date on Asaas
   */
  paymentDate?: Date;
  /**
   * Date on which the customer paid the bank slip
   */
  customerPaymentDate?: Date;
  /**
   * Parcel number
   */
  installmentNumber?: number;
  /**
   * Free search field
   */
  externalReference?: string;
  /**
   * Determines if the payment has been removed
   */
  deleted?: boolean;
  /**
   * Defines whether the charge was anticipated or is in the process of being anticipated
   */
  anticipated?: boolean;
  /**
   * Determines whether the charge is anticipated
   */
  anticipable?: boolean;
  /**
   * Billing Credit date
   */
  creditDate?: string;
  /**
   * URL of proof of confirmation, receipt, reversal or removal
   */
  transactionReceiptUrl?: string;
  /**
   * Duplicate billing identifier (if true)
   */
  duplicatedPaymentId?: string;
  discount?: ApiPaymentDiscountDto;
  fine?: ApiPaymentFineResponseDto;
  interest?: ApiPaymentInterestResponseDto;
  /**
   * Define whether the payment will be sent via post
   */
  postalService?: boolean;
  creditCard?: ApiPaymentSaveWithCreditCardCreditCardDto;
};

/**
 * Payment billing type
 */
export type ApiPaymentLeanSaveWithCreditCardResponseBillingType =
  | "UNDEFINED"
  | "BOLETO"
  | "CREDIT_CARD"
  | "DEBIT_CARD"
  | "TRANSFER"
  | "DEPOSIT"
  | "PIX";

/**
 * Payment billing type
 */
export const ApiPaymentLeanSaveWithCreditCardResponseBillingType = {
  UNDEFINED: "UNDEFINED",
  BOLETO: "BOLETO",
  CREDIT_CARD: "CREDIT_CARD",
  DEBIT_CARD: "DEBIT_CARD",
  TRANSFER: "TRANSFER",
  DEPOSIT: "DEPOSIT",
  PIX: "PIX",
} as const;

/**
 * Payment status
 */
export type ApiPaymentLeanSaveWithCreditCardResponsePaymentStatus =
  | "PENDING"
  | "RECEIVED"
  | "CONFIRMED"
  | "OVERDUE"
  | "REFUNDED"
  | "RECEIVED_IN_CASH"
  | "REFUND_REQUESTED"
  | "REFUND_IN_PROGRESS"
  | "CHARGEBACK_REQUESTED"
  | "CHARGEBACK_DISPUTE"
  | "AWAITING_CHARGEBACK_REVERSAL"
  | "DUNNING_REQUESTED"
  | "DUNNING_RECEIVED"
  | "AWAITING_RISK_ANALYSIS";

/**
 * Payment status
 */
export const ApiPaymentLeanSaveWithCreditCardResponsePaymentStatus = {
  PENDING: "PENDING",
  RECEIVED: "RECEIVED",
  CONFIRMED: "CONFIRMED",
  OVERDUE: "OVERDUE",
  REFUNDED: "REFUNDED",
  RECEIVED_IN_CASH: "RECEIVED_IN_CASH",
  REFUND_REQUESTED: "REFUND_REQUESTED",
  REFUND_IN_PROGRESS: "REFUND_IN_PROGRESS",
  CHARGEBACK_REQUESTED: "CHARGEBACK_REQUESTED",
  CHARGEBACK_DISPUTE: "CHARGEBACK_DISPUTE",
  AWAITING_CHARGEBACK_REVERSAL: "AWAITING_CHARGEBACK_REVERSAL",
  DUNNING_REQUESTED: "DUNNING_REQUESTED",
  DUNNING_RECEIVED: "DUNNING_RECEIVED",
  AWAITING_RISK_ANALYSIS: "AWAITING_RISK_ANALYSIS",
} as const;

/**
 * Filter by payment status
 */
export type ApiSubscriptionListPaymentsRequestPaymentStatus =
  | "PENDING"
  | "RECEIVED"
  | "CONFIRMED"
  | "OVERDUE"
  | "REFUNDED"
  | "RECEIVED_IN_CASH"
  | "REFUND_REQUESTED"
  | "REFUND_IN_PROGRESS"
  | "CHARGEBACK_REQUESTED"
  | "CHARGEBACK_DISPUTE"
  | "AWAITING_CHARGEBACK_REVERSAL"
  | "DUNNING_REQUESTED"
  | "DUNNING_RECEIVED"
  | "AWAITING_RISK_ANALYSIS";

/**
 * Filter by payment status
 */
export const ApiSubscriptionListPaymentsRequestPaymentStatus = {
  PENDING: "PENDING",
  RECEIVED: "RECEIVED",
  CONFIRMED: "CONFIRMED",
  OVERDUE: "OVERDUE",
  REFUNDED: "REFUNDED",
  RECEIVED_IN_CASH: "RECEIVED_IN_CASH",
  REFUND_REQUESTED: "REFUND_REQUESTED",
  REFUND_IN_PROGRESS: "REFUND_IN_PROGRESS",
  CHARGEBACK_REQUESTED: "CHARGEBACK_REQUESTED",
  CHARGEBACK_DISPUTE: "CHARGEBACK_DISPUTE",
  AWAITING_CHARGEBACK_REVERSAL: "AWAITING_CHARGEBACK_REVERSAL",
  DUNNING_REQUESTED: "DUNNING_REQUESTED",
  DUNNING_RECEIVED: "DUNNING_RECEIVED",
  AWAITING_RISK_ANALYSIS: "AWAITING_RISK_ANALYSIS",
} as const;

export type ApiInstallmentSaveWithCreditCardRequestDto = {
  /**
   * Number of installments
   */
  installmentCount: number;
  /**
   * Unique customer identifier in Asaas
   */
  customer: string;
  /**
   * Value of each installment
   */
  value: number;
  /**
   * Total installment amount
   */
  totalValue?: number;
  billingType: ApiInstallmentSaveWithCreditCardRequestBillingType;
  /**
   * Due date of the first installment
   */
  dueDate: Date;
  /**
   * Installment description (max. 500 characters)
   */
  description?: string;
  /**
   * Define whether the payment will be sent via post
   */
  postalService?: boolean;
  /**
   * Days after registration cancellation deadline (only for bank slip)
   */
  daysAfterDueDateToRegistrationCancellation?: number;
  /**
   * Free search field
   */
  paymentExternalReference?: string;
  discount?: ApiPaymentDiscountDto;
  interest?: ApiPaymentInterestRequestDto;
  fine?: ApiPaymentFineRequestDto;
  /**
   * Split Settings
   */
  splits?: Array<ApiInstallmentSplitRequestDto>;
  creditCard?: ApiCreditCardRequestDto;
  creditCardHolderInfo?: ApiCreditCardHolderInfoRequestDto;
  /**
   * Credit card token for using the credit card tokenization functionality. If informed, the fields creditCard and creditCardHolderInfo are not mandatory.
   */
  creditCardToken?: string;
  /**
   * Carry out only the Pre-Authorization of the installment
   */
  authorizeOnly?: boolean;
  /**
   * IP from where the customer is making the purchase. Your server's IP must not be entered.
   */
  remoteIp: string;
};

/**
 * Payment billing type
 */
export type ApiInstallmentSaveWithCreditCardRequestBillingType =
  | "UNDEFINED"
  | "BOLETO"
  | "CREDIT_CARD"
  | "PIX";

/**
 * Payment billing type
 */
export const ApiInstallmentSaveWithCreditCardRequestBillingType = {
  UNDEFINED: "UNDEFINED",
  BOLETO: "BOLETO",
  CREDIT_CARD: "CREDIT_CARD",
  PIX: "PIX",
} as const;

export type ApiSubscriptionSaveWithCreditCardRequestDto = {
  /**
   * Unique customer identifier in Asaas
   */
  customer: string;
  billingType: ApiSubscriptionSaveWithCreditCardRequestBillingType;
  /**
   * Subscription value
   */
  value: number;
  /**
   * First payment due
   */
  nextDueDate: Date;
  discount?: ApiPaymentDiscountDto;
  interest?: ApiPaymentInterestRequestDto;
  fine?: ApiPaymentFineRequestDto;
  cycle: ApiSubscriptionSaveWithCreditCardRequestCycle;
  /**
   * Subscription description (max. 500 characters)
   */
  description?: string;
  /**
   * Deadline for payments to be due
   */
  endDate?: Date;
  /**
   * Maximum number of payments to be generated for this subscription
   */
  maxPayments?: number;
  /**
   * Subscription identifier on your system
   */
  externalReference?: string;
  /**
   * Split information
   */
  split?: Array<ApiSubscriptionSplitRequestDto>;
  callback?: ApiPaymentCallbackRequestDto;
  creditCard?: ApiCreditCardRequestDto;
  creditCardHolderInfo?: ApiCreditCardHolderInfoRequestDto;
  /**
   * Credit card token for using the credit card tokenization functionality. If informed, the fields above are not mandatory.
   */
  creditCardToken?: string;
  /**
   * IP from where the customer is making the purchase. Your server's IP must not be entered.
   */
  remoteIp: string;
};

/**
 * Billing type
 */
export type ApiSubscriptionSaveWithCreditCardRequestBillingType =
  | "UNDEFINED"
  | "BOLETO"
  | "CREDIT_CARD"
  | "PIX";

/**
 * Billing type
 */
export const ApiSubscriptionSaveWithCreditCardRequestBillingType = {
  UNDEFINED: "UNDEFINED",
  BOLETO: "BOLETO",
  CREDIT_CARD: "CREDIT_CARD",
  PIX: "PIX",
} as const;

/**
 * Billing frequency
 */
export type ApiSubscriptionSaveWithCreditCardRequestCycle =
  | "WEEKLY"
  | "BIWEEKLY"
  | "MONTHLY"
  | "BIMONTHLY"
  | "QUARTERLY"
  | "SEMIANNUALLY"
  | "YEARLY";

/**
 * Billing frequency
 */
export const ApiSubscriptionSaveWithCreditCardRequestCycle = {
  WEEKLY: "WEEKLY",
  BIWEEKLY: "BIWEEKLY",
  MONTHLY: "MONTHLY",
  BIMONTHLY: "BIMONTHLY",
  QUARTERLY: "QUARTERLY",
  SEMIANNUALLY: "SEMIANNUALLY",
  YEARLY: "YEARLY",
} as const;

export type ApiSubscriptionSaveWithCreditCardResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Unique subscription identifier in Asaas
   */
  id?: string;
  /**
   * Subscription creation date
   */
  dateCreated?: Date;
  /**
   * Unique customer identifier
   */
  customer?: string;
  /**
   * Unique identifier of the payments link to which the subscription belongs
   */
  paymentLink?: string;
  billingType?: ApiSubscriptionSaveWithCreditCardResponseBillingType;
  cycle?: ApiSubscriptionSaveWithCreditCardResponseCycle;
  /**
   * Subscription value
   */
  value?: number;
  /**
   * Due date of the next payment to be generated
   */
  nextDueDate?: Date;
  /**
   * Deadline for payments to be due
   */
  endDate?: Date;
  /**
   * Subscription description
   */
  description?: string;
  status?: ApiSubscriptionSaveWithCreditCardResponseSubscriptionStatus;
  discount?: ApiPaymentDiscountDto;
  fine?: ApiPaymentFineResponseDto;
  interest?: ApiPaymentInterestResponseDto;
  /**
   * Informs if the subscription has been removed
   */
  deleted?: boolean;
  /**
   * Maximum number of payments to be generated for this subscription
   */
  maxPayments?: number;
  /**
   * Subscription identifier on your system
   */
  externalReference?: string;
  /**
   * Split information
   */
  split?: Array<ApiSubscriptionSplitResponseDto>;
  creditCard?: ApiPaymentSaveWithCreditCardCreditCardDto;
};

/**
 * Billing type
 */
export type ApiSubscriptionSaveWithCreditCardResponseBillingType =
  | "UNDEFINED"
  | "BOLETO"
  | "CREDIT_CARD"
  | "DEBIT_CARD"
  | "TRANSFER"
  | "DEPOSIT"
  | "PIX";

/**
 * Billing type
 */
export const ApiSubscriptionSaveWithCreditCardResponseBillingType = {
  UNDEFINED: "UNDEFINED",
  BOLETO: "BOLETO",
  CREDIT_CARD: "CREDIT_CARD",
  DEBIT_CARD: "DEBIT_CARD",
  TRANSFER: "TRANSFER",
  DEPOSIT: "DEPOSIT",
  PIX: "PIX",
} as const;

/**
 * Billing frequency
 */
export type ApiSubscriptionSaveWithCreditCardResponseCycle =
  | "WEEKLY"
  | "BIWEEKLY"
  | "MONTHLY"
  | "BIMONTHLY"
  | "QUARTERLY"
  | "SEMIANNUALLY"
  | "YEARLY";

/**
 * Billing frequency
 */
export const ApiSubscriptionSaveWithCreditCardResponseCycle = {
  WEEKLY: "WEEKLY",
  BIWEEKLY: "BIWEEKLY",
  MONTHLY: "MONTHLY",
  BIMONTHLY: "BIMONTHLY",
  QUARTERLY: "QUARTERLY",
  SEMIANNUALLY: "SEMIANNUALLY",
  YEARLY: "YEARLY",
} as const;

/**
 * Subscription status
 */
export type ApiSubscriptionSaveWithCreditCardResponseSubscriptionStatus =
  | "ACTIVE"
  | "EXPIRED"
  | "INACTIVE";

/**
 * Subscription status
 */
export const ApiSubscriptionSaveWithCreditCardResponseSubscriptionStatus = {
  ACTIVE: "ACTIVE",
  EXPIRED: "EXPIRED",
  INACTIVE: "INACTIVE",
} as const;

export type ApiTransferSaveInternalTransferRequestDto = {
  /**
   * Amount to be transferred
   */
  value: number;
  /**
   * WalletId of the target account
   */
  walletId: string;
  /**
   * Transfer identifier in your system
   */
  externalReference?: string;
};

export type ApiTransferSaveInternalTransferResponseDto = {
  /**
   * Object type
   */
  object?: string;
  /**
   * Unique transfer identifier in Asaas
   */
  id?: string;
  /**
   * Type of transfer
   */
  type?: "PIX" | "TED" | "INTERNAL";
  /**
   * Transfer request date
   */
  dateCreated?: Date;
  /**
   * Transfer amount
   */
  value?: number;
  /**
   * Net value minus transfer fee
   */
  netValue?: number;
  status?: ApiTransferSaveInternalTransferResponseTransferStatus;
  /**
   * Transfer rate
   */
  transferFee?: number;
  /**
   * Effective date
   */
  effectiveDate?: Date;
  /**
   * Schedule date
   */
  scheduleDate?: Date;
  /**
   * Unique identifier of the Pix transaction at the Central Bank
   */
  endToEndIdentifier?: string;
  /**
   * `false` when awaiting authorization via SMS Token
   */
  authorized?: boolean;
  /**
   * Reason for transfer failure
   */
  failReason?: string;
  /**
   * Transfer identifier in your system
   */
  externalReference?: string;
  /**
   * Proof of transfer will be available after the transfer is confirmed
   */
  transactionReceiptUrl?: string;
  operationType?: ApiTransferSaveInternalTransferResponseTransferType;
  /**
   * Transfer description
   */
  description?: string;
  /**
   * Unique recurrence identifier in Asaas
   */
  recurring?: string;
  /**
   * Unique wallet identifier to split charges or transfer between Asaas accounts
   */
  walletId?: string;
  account?: ApiTransferSaveInternalTransferAccountDto;
};

/**
 * Transfer status
 */
export type ApiTransferSaveInternalTransferResponseTransferStatus =
  | "PENDING"
  | "BANK_PROCESSING"
  | "DONE"
  | "CANCELLED"
  | "FAILED";

/**
 * Transfer status
 */
export const ApiTransferSaveInternalTransferResponseTransferStatus = {
  PENDING: "PENDING",
  BANK_PROCESSING: "BANK_PROCESSING",
  DONE: "DONE",
  CANCELLED: "CANCELLED",
  FAILED: "FAILED",
} as const;

/**
 * Transfer method
 */
export type ApiTransferSaveInternalTransferResponseTransferType =
  | "PIX"
  | "TED"
  | "INTERNAL";

/**
 * Transfer method
 */
export const ApiTransferSaveInternalTransferResponseTransferType = {
  PIX: "PIX",
  TED: "TED",
  INTERNAL: "INTERNAL",
} as const;

/**
 * Target account basic information
 */
export type ApiTransferSaveInternalTransferAccountDto = {
  /**
   * Target account name
   */
  name?: string;
  /**
   * CPF or CNPJ of the destination account
   */
  cpfCnpj?: string;
  /**
   * Target account branch code
   */
  agency?: string;
  /**
   * Target account number
   */
  account?: string;
  /**
   * Target account digit
   */
  accountDigit?: string;
};

/**
 * Filter by payment status
 */
export type ApiInstallmentListPaymentsRequestPaymentStatus =
  | "PENDING"
  | "RECEIVED"
  | "CONFIRMED"
  | "OVERDUE"
  | "REFUNDED"
  | "RECEIVED_IN_CASH"
  | "REFUND_REQUESTED"
  | "REFUND_IN_PROGRESS"
  | "CHARGEBACK_REQUESTED"
  | "CHARGEBACK_DISPUTE"
  | "AWAITING_CHARGEBACK_REVERSAL"
  | "DUNNING_REQUESTED"
  | "DUNNING_RECEIVED"
  | "AWAITING_RISK_ANALYSIS";

/**
 * Filter by payment status
 */
export const ApiInstallmentListPaymentsRequestPaymentStatus = {
  PENDING: "PENDING",
  RECEIVED: "RECEIVED",
  CONFIRMED: "CONFIRMED",
  OVERDUE: "OVERDUE",
  REFUNDED: "REFUNDED",
  RECEIVED_IN_CASH: "RECEIVED_IN_CASH",
  REFUND_REQUESTED: "REFUND_REQUESTED",
  REFUND_IN_PROGRESS: "REFUND_IN_PROGRESS",
  CHARGEBACK_REQUESTED: "CHARGEBACK_REQUESTED",
  CHARGEBACK_DISPUTE: "CHARGEBACK_DISPUTE",
  AWAITING_CHARGEBACK_REVERSAL: "AWAITING_CHARGEBACK_REVERSAL",
  DUNNING_REQUESTED: "DUNNING_REQUESTED",
  DUNNING_RECEIVED: "DUNNING_RECEIVED",
  AWAITING_RISK_ANALYSIS: "AWAITING_RISK_ANALYSIS",
} as const;

export type ListPaymentsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Filter by unique installment identifier
     */
    installment?: string;
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
    /**
     * Filter by unique customer identifier
     */
    customer?: string;
    /**
     * Filter by customer group name
     */
    customerGroupName?: string;
    /**
     * Filter by billing type
     */
    billingType?: ApiPaymentListRequestBillingType;
    /**
     * Filter by status
     */
    status?: ApiPaymentListRequestPaymentStatus;
    /**
     * Filter by unique subscription identifier
     */
    subscription?: string;
    /**
     * Filter by your system identifier
     */
    externalReference?: string;
    /**
     * Filter by payment date
     */
    paymentDate?: string;
    /**
     * Filter to return charges that have or do not have an invoice
     */
    invoiceStatus?: ApiPaymentListRequestInvoiceStatus;
    /**
     * Filter by estimated credit date
     */
    estimatedCreditDate?: string;
    /**
     * Filter receipts originating from a static QrCode using the id generated when the QrCode was created
     */
    pixQrCodeId?: string;
    /**
     * Filter anticipated charges or not
     */
    anticipated?: boolean;
    /**
     * Filter anticipable charges or not
     */
    anticipable?: boolean;
    /**
     * Filter from initial creation date
     */
    "dateCreated[ge]"?: string;
    /**
     * Filter to final creation date
     */
    "dateCreated[le]"?: string;
    /**
     * Filter from initial payment date
     */
    "paymentDate[ge]"?: string;
    /**
     * Filter to final payment date
     */
    "paymentDate[le]"?: string;
    /**
     * Filter from estimated initial credit date
     */
    "estimatedCreditDate[ge]"?: string;
    /**
     * Filter to estimated end credit date
     */
    "estimatedCreditDate[le]"?: string;
    /**
     * Filter from initial due date
     */
    "dueDate[ge]"?: string;
    /**
     * Filter by final due date
     */
    "dueDate[le]"?: string;
    /**
     * Filter by the email address of the user who created the payment.
     */
    user?: string;
  };
  url: "/v3/payments";
};

export type ListPaymentsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type ListPaymentsResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<ApiPaymentGetResponseDto>;
  };
};

export type ListPaymentsResponse =
  ListPaymentsResponses[keyof ListPaymentsResponses];

export type CreateNewPaymentData = {
  body?: {
    /**
     * Unique customer identifier in Asaas
     */
    customer: string;
    billingType: ApiPaymentSaveRequestBillingType;
    /**
     * Payment amount
     */
    value: number;
    /**
     * Payment due date
     */
    dueDate: Date;
    /**
     * Payment description (max. 500 characters)
     */
    description?: string;
    /**
     * Days after registration cancellation deadline (only for bank slip)
     */
    daysAfterDueDateToRegistrationCancellation?: number;
    /**
     * Free search field
     */
    externalReference?: string;
    /**
     * Number of installments (only in the case of installment payment)
     */
    installmentCount?: number;
    /**
     * Enter the total amount of a charge that will be paid in installments (only in the case of an installment charge). If this field is sent, the installmentValue is not necessary, the calculation per installment will be automatic.
     */
    totalValue?: number;
    /**
     * Value of each installment (only in the case of installment payment). Send this field if you want to define the value of each installment.
     */
    installmentValue?: number;
    discount?: ApiPaymentDiscountDto;
    interest?: ApiPaymentInterestRequestDto;
    fine?: ApiPaymentFineRequestDto;
    /**
     * Define whether the payment will be sent via post
     */
    postalService?: boolean;
    /**
     * Split Settings
     */
    split?: Array<{
      /**
       * Asaas wallet identifier that will be transferred
       */
      walletId: string;
      /**
       * Fixed amount to be transferred to the account when the payment is received
       */
      fixedValue?: number;
      /**
       * Percentage of the net value of the charge to be transferred when received
       */
      percentualValue?: number;
      /**
       * (Instalments only). Amount that will be split relative to the total amount that will be paid in installments.
       */
      totalFixedValue?: number;
      /**
       * Split identifier in your system
       */
      externalReference?: string;
      /**
       * Split description
       */
      description?: string;
    }>;
    callback?: ApiPaymentCallbackRequestDto;
  };
  path?: never;
  query?: never;
  url: "/v3/payments";
};

export type CreateNewPaymentErrors = {
  /**
   * Bad Request
   */
  400: {
    /**
     * List of objects
     */
    errors?: Array<{
      /**
       * Error code
       */
      code?: string;
      /**
       * Error description
       */
      description?: string;
    }>;
  };
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateNewPaymentError =
  CreateNewPaymentErrors[keyof CreateNewPaymentErrors];

export type CreateNewPaymentResponses = {
  /**
   * OK
   */
  200: ApiPaymentGetResponseDto;
};

export type CreateNewPaymentResponse =
  CreateNewPaymentResponses[keyof CreateNewPaymentResponses];

export type CreateNewPaymentWithCreditCardData = {
  body?: ApiPaymentSaveWithCreditCardRequestDto;
  path?: never;
  query?: never;
  url: "/v3/payments/";
};

export type CreateNewPaymentWithCreditCardErrors = {
  /**
   * Bad Request
   */
  400: {
    /**
     * List of objects
     */
    errors?: Array<{
      /**
       * Error code
       */
      code?: string;
      /**
       * Error description
       */
      description?: string;
    }>;
  };
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateNewPaymentWithCreditCardError =
  CreateNewPaymentWithCreditCardErrors[keyof CreateNewPaymentWithCreditCardErrors];

export type CreateNewPaymentWithCreditCardResponses = {
  /**
   * OK
   */
  200: ApiPaymentGetResponseDto;
};

export type CreateNewPaymentWithCreditCardResponse =
  CreateNewPaymentWithCreditCardResponses[keyof CreateNewPaymentWithCreditCardResponses];

export type CapturePaymentWithPreAuthorizationData = {
  body?: ApiPaymentPathIdRequestDto;
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/payments/{id}/captureAuthorizedPayment";
};

export type CapturePaymentWithPreAuthorizationErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type CapturePaymentWithPreAuthorizationResponses = {
  /**
   * OK
   */
  200: ApiPaymentGetResponseDto;
};

export type CapturePaymentWithPreAuthorizationResponse =
  CapturePaymentWithPreAuthorizationResponses[keyof CapturePaymentWithPreAuthorizationResponses];

export type PayAChargeWithCreditCardData = {
  body?: {
    creditCard?: ApiCreditCardRequestDto;
    creditCardHolderInfo?: ApiCreditCardHolderInfoRequestDto;
    /**
     * Credit card token for using the credit card tokenization functionality. If informed, the fields above are not mandatory.
     */
    creditCardToken?: string;
  };
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/payments/{id}/payWithCreditCard";
};

export type PayAChargeWithCreditCardErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type PayAChargeWithCreditCardResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Unique payment identifier in Asaas
     */
    id?: string;
    /**
     * Payment creation date
     */
    dateCreated?: Date;
    /**
     * Unique identifier of the customer to whom the payment belongs
     */
    customer?: string;
    /**
     * Unique subscription identifier (when recurring billing)
     */
    subscription?: string;
    /**
     * Unique installment identifier (when billing in installments)
     */
    installment?: string;
    /**
     * Unique identifier of the payments link to which the payment belongs
     */
    paymentLink?: string;
    /**
     * Payment amount
     */
    value?: number;
    /**
     * Net value of the charge after discounting the Asaas fee
     */
    netValue?: number;
    /**
     * Original amount of charge (filled when paid with interest and fine)
     */
    originalValue?: number;
    /**
     * Calculated amount of interest and fine that must be paid after the charge is due
     */
    interestValue?: number;
    /**
     * Description of the payment
     */
    description?: string;
    billingType?: ApiPaymentGetResponseBillingType;
    creditCard?: ApiPaymentSaveWithCreditCardCreditCardDto;
    /**
     * Informs whether the charge can be paid after the due date (Only for bank slip)
     */
    canBePaidAfterDueDate?: boolean;
    /**
     * Unique identifier of the Pix transaction to which the payment belongs
     */
    pixTransaction?: string;
    /**
     * Unique identifier of the static QrCode generated for a given Pix key
     */
    pixQrCodeId?: string;
    status?: ApiPaymentGetResponsePaymentStatus;
    /**
     * Payment due date
     */
    dueDate?: Date;
    /**
     * Original due date upon creation of the payment
     */
    originalDueDate?: Date;
    /**
     * Payment date on Asaas
     */
    paymentDate?: Date;
    /**
     * Date on which the customer paid the bank slip
     */
    clientPaymentDate?: Date;
    /**
     * Parcel number
     */
    installmentNumber?: number;
    /**
     * Invoice URL
     */
    invoiceUrl?: string;
    /**
     * Bill number
     */
    invoiceNumber?: string;
    /**
     * Free search field
     */
    externalReference?: string;
    /**
     * Determines if the payment has been removed
     */
    deleted?: boolean;
    /**
     * Defines whether the charge was anticipated or is in the process of being anticipated
     */
    anticipated?: boolean;
    /**
     * Determines whether the charge is anticipated
     */
    anticipable?: boolean;
    /**
     * Date when the credit became available
     */
    creditDate?: Date;
    /**
     * Estimated date when the credit will be available
     */
    estimatedCreditDate?: Date;
    /**
     * URL of proof of confirmation, receipt, reversal or removal
     */
    transactionReceiptUrl?: string;
    /**
     * Unique identification of the bank slip
     */
    nossoNumero?: string;
    /**
     * URL to download the bank slip
     */
    bankSlipUrl?: string;
    discount?: ApiPaymentDiscountDto;
    fine?: ApiPaymentFineResponseDto;
    interest?: ApiPaymentInterestResponseDto;
    /**
     * Split Settings
     */
    split?: Array<{
      /**
       * Unique split identifier in Asaas
       */
      id?: string;
      /**
       * Asaas wallet identifier that will be transferred
       */
      walletId?: string;
      /**
       * Fixed amount to be transferred to the account when the charge is received
       */
      fixedValue?: number;
      /**
       * Percentage of the net value of the charge to be transferred when received
       */
      percentualValue?: number;
      /**
       * Amount that will be split relative to the total amount that will be paid
       */
      totalValue?: number;
      cancellationReason?: ApiPaymentSplitGetResponsePaymentSplitCancellationReason;
      status?: ApiPaymentSplitGetResponsePaymentSplitStatus;
      /**
       * Unique identifier of split in your system
       */
      externalReference?: string;
      /**
       * Split description
       */
      description?: string;
    }>;
    /**
     * Define whether the payment will be sent via post
     */
    postalService?: boolean;
    /**
     * Days after registration cancellation deadline (only for bank slip)
     */
    daysAfterDueDateToRegistrationCancellation?: number;
    chargeback?: ApiPaymentChargebackResponseDto;
    /**
     * Refunds information
     */
    refunds?: Array<{
      /**
       * Refund creation date
       */
      dateCreated?: Date;
      status?: ApiPaymentRefundGetResponsePaymentRefundStatus;
      /**
       * Refund value
       */
      value?: number;
      /**
       * (Pix only) Unique identifier of the Pix transaction at the Central Bank
       */
      endToEndIdentifier?: string;
      /**
       * Description of the refund
       */
      description?: string;
      /**
       * Refund effective date
       */
      effectiveDate?: Date;
      /**
       * Transaction receipt link
       */
      transactionReceiptUrl?: string;
      /**
       * Refunded Splits, if any
       */
      refundedSplits?: Array<{
        /**
         * Unique split identifier
         */
        id?: string;
        /**
         * Refunded value
         */
        value?: number;
        /**
         * Indicates whether the split was refunded
         */
        done?: boolean;
      }>;
    }>;
  };
};

export type PayAChargeWithCreditCardResponse =
  PayAChargeWithCreditCardResponses[keyof PayAChargeWithCreditCardResponses];

export type RetrievePaymentBillingInformationData = {
  body?: never;
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/payments/{id}/billingInfo";
};

export type RetrievePaymentBillingInformationErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrievePaymentBillingInformationResponses = {
  /**
   * OK
   */
  200: {
    pix?: ApiPaymentPixQrCodeResponseDto;
    creditCard?: ApiCreditCardTokenizeResponseDto;
    bankSlip?: ApiBankSlipBillingInfoResponseDto;
  };
};

export type RetrievePaymentBillingInformationResponse =
  RetrievePaymentBillingInformationResponses[keyof RetrievePaymentBillingInformationResponses];

export type PaymentViewingInformationData = {
  body?: never;
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/payments/{id}/viewingInfo";
};

export type PaymentViewingInformationErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type PaymentViewingInformationResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Invoice viewing date and time
     */
    invoiceViewedDate?: Date;
    /**
     * Bill viewing date and time
     */
    boletoViewedDate?: Date;
  };
};

export type PaymentViewingInformationResponse =
  PaymentViewingInformationResponses[keyof PaymentViewingInformationResponses];

export type DeletePaymentData = {
  body?: never;
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/payments/{id}";
};

export type DeletePaymentErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type DeletePaymentResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Indicates whether the charge has been removed
     */
    deleted?: boolean;
    /**
     * Unique payment identifier in Asaas
     */
    id?: string;
  };
};

export type DeletePaymentResponse =
  DeletePaymentResponses[keyof DeletePaymentResponses];

export type RetrieveASinglePaymentData = {
  body?: never;
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/payments/{id}";
};

export type RetrieveASinglePaymentErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrieveASinglePaymentResponses = {
  /**
   * OK
   */
  200: ApiPaymentGetResponseDto;
};

export type RetrieveASinglePaymentResponse =
  RetrieveASinglePaymentResponses[keyof RetrieveASinglePaymentResponses];

export type UpdateExistingPaymentData = {
  body?: {
    billingType: ApiPaymentUpdateRequestBillingType;
    /**
     * Payment amount
     */
    value: number;
    /**
     * Payment due date
     */
    dueDate: Date;
    /**
     * Payment description (max. 500 characters)
     */
    description?: string;
    /**
     * Days after registration cancellation deadline (only for bank slip)
     */
    daysAfterDueDateToRegistrationCancellation?: number;
    /**
     * Free search field
     */
    externalReference?: string;
    discount?: ApiPaymentDiscountDto;
    interest?: ApiPaymentInterestRequestDto;
    fine?: ApiPaymentFineRequestDto;
    /**
     * Define whether the payment will be sent via post
     */
    postalService?: boolean;
    /**
     * Split Settings
     */
    split?: Array<ApiPaymentSplitRequestDto>;
    callback?: ApiPaymentCallbackRequestDto;
  };
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/payments/{id}";
};

export type UpdateExistingPaymentErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type UpdateExistingPaymentResponses = {
  /**
   * OK
   */
  200: ApiPaymentGetResponseDto;
};

export type UpdateExistingPaymentResponse =
  UpdateExistingPaymentResponses[keyof UpdateExistingPaymentResponses];

export type RestoreRemovedPaymentData = {
  body?: {
    [key: string]: unknown;
  };
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/payments/{id}/restore";
};

export type RestoreRemovedPaymentErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RestoreRemovedPaymentResponses = {
  /**
   * OK
   */
  200: ApiPaymentGetResponseDto;
};

export type RestoreRemovedPaymentResponse =
  RestoreRemovedPaymentResponses[keyof RestoreRemovedPaymentResponses];

export type RetrieveStatusOfAPaymentData = {
  body?: never;
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/payments/{id}/status";
};

export type RetrieveStatusOfAPaymentErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrieveStatusOfAPaymentResponses = {
  /**
   * OK
   */
  200: {
    status?: ApiPaymentStatusResponsePaymentStatus;
  };
};

export type RetrieveStatusOfAPaymentResponse =
  RetrieveStatusOfAPaymentResponses[keyof RetrieveStatusOfAPaymentResponses];

export type RefundPaymentData = {
  body?: {
    /**
     * Amount to be refunded
     */
    value?: number;
    /**
     * Reason for the refund
     */
    description?: string;
  };
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/payments/{id}/refund";
};

export type RefundPaymentErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RefundPaymentResponses = {
  /**
   * OK
   */
  200: ApiPaymentGetResponseDto;
};

export type RefundPaymentResponse =
  RefundPaymentResponses[keyof RefundPaymentResponses];

export type GetDigitableBillLineData = {
  body?: never;
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/payments/{id}/identificationField";
};

export type GetDigitableBillLineErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type GetDigitableBillLineResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Digitable bill line
     */
    identificationField?: string;
    /**
     * Unique identification of the bank slip
     */
    nossoNumero?: string;
    /**
     * Bank slip bar code
     */
    barCode?: string;
  };
};

export type GetDigitableBillLineResponse =
  GetDigitableBillLineResponses[keyof GetDigitableBillLineResponses];

export type GetQrCodeForPixPaymentsData = {
  body?: never;
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/payments/{id}/pixQrCode";
};

export type GetQrCodeForPixPaymentsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type GetQrCodeForPixPaymentsResponses = {
  /**
   * OK
   */
  200: ApiPaymentPixQrCodeResponseDto;
};

export type GetQrCodeForPixPaymentsResponse =
  GetQrCodeForPixPaymentsResponses[keyof GetQrCodeForPixPaymentsResponses];

export type ConfirmCashReceiptData = {
  body?: {
    /**
     * Date the customer made the payment
     */
    paymentDate?: Date;
    /**
     * Amount paid by the customer
     */
    value?: number;
    /**
     * Send or not send notification of confirmed payment to the customer
     */
    notifyCustomer?: boolean;
  };
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/payments/{id}/receiveInCash";
};

export type ConfirmCashReceiptErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type ConfirmCashReceiptResponses = {
  /**
   * OK
   */
  200: ApiPaymentGetResponseDto;
};

export type ConfirmCashReceiptResponse =
  ConfirmCashReceiptResponses[keyof ConfirmCashReceiptResponses];

export type UndoCashReceiptConfirmationData = {
  body?: ApiPaymentPathIdRequestDto;
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/payments/{id}/undoReceivedInCash";
};

export type UndoCashReceiptConfirmationErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type UndoCashReceiptConfirmationResponses = {
  /**
   * OK
   */
  200: ApiPaymentGetResponseDto;
};

export type UndoCashReceiptConfirmationResponse =
  UndoCashReceiptConfirmationResponses[keyof UndoCashReceiptConfirmationResponses];

export type SalesSimulatorData = {
  body?: {
    /**
     * Total installment or billing amount
     */
    value: number;
    /**
     * Number of installments
     */
    installmentCount?: number;
    /**
     * Form of payment
     */
    billingTypes: Array<string>;
  };
  path?: never;
  query?: never;
  url: "/v3/payments/simulate";
};

export type SalesSimulatorErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type SalesSimulatorResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Total installment or billing amount
     */
    value?: number;
    creditCard?: ApiPaymentSimulateCreditCardResponseDto;
    bankSlip?: ApiPaymentSimulateBankSlipResponseDto;
    pix?: ApiPaymentSimulatePixResponseDto;
  };
};

export type SalesSimulatorResponse =
  SalesSimulatorResponses[keyof SalesSimulatorResponses];

export type RecoveringPaymentLimitsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v3/payments/limits";
};

export type RecoveringPaymentLimitsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type RecoveringPaymentLimitsResponses = {
  /**
   * OK
   */
  200: {
    creation?: ApiPaymentLimitsResponseCreationDto;
  };
};

export type RecoveringPaymentLimitsResponse =
  RecoveringPaymentLimitsResponses[keyof RecoveringPaymentLimitsResponses];

export type ListPaymentsWithSummaryDataData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
    /**
     * Filter by unique customer identifier
     */
    customer?: string;
    /**
     * Filter by customer group name
     */
    customerGroupName?: string;
    /**
     * Filter by billing type
     */
    billingType?: ApiPaymentListRequestBillingType;
    /**
     * Filter by status
     */
    status?: ApiPaymentListRequestPaymentStatus;
    /**
     * Filter by unique subscription identifier
     */
    subscription?: string;
    /**
     * Filter by unique installment identifier
     */
    installment?: string;
    /**
     * Filter by your system identifier
     */
    externalReference?: string;
    /**
     * Filter by payment date
     */
    paymentDate?: string;
    /**
     * Filter to return charges that have or do not have an invoice
     */
    invoiceStatus?: ApiPaymentListRequestInvoiceStatus;
    /**
     * Filter by estimated credit date
     */
    estimatedCreditDate?: string;
    /**
     * Filter receipts originating from a static QrCode using the id generated when the QrCode was created
     */
    pixQrCodeId?: string;
    /**
     * Filter anticipated charges or not
     */
    anticipated?: boolean;
    /**
     * Filter anticipable charges or not
     */
    anticipable?: boolean;
    /**
     * Filter from initial creation date
     */
    "dateCreated[ge]"?: string;
    /**
     * Filter to final creation date
     */
    "dateCreated[le]"?: string;
    /**
     * Filter from initial payment date
     */
    "paymentDate[ge]"?: string;
    /**
     * Filter to final payment date
     */
    "paymentDate[le]"?: string;
    /**
     * Filter from estimated initial credit date
     */
    "estimatedCreditDate[ge]"?: string;
    /**
     * Filter to estimated end credit date
     */
    "estimatedCreditDate[le]"?: string;
    /**
     * Filter from initial due date
     */
    "dueDate[ge]"?: string;
    /**
     * Filter by final due date
     */
    "dueDate[le]"?: string;
    /**
     * Filter by the email address of the user who created the payment.
     */
    user?: string;
  };
  url: "/v3/lean/payments";
};

export type ListPaymentsWithSummaryDataErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type ListPaymentsWithSummaryDataResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<ApiPaymentLeanGetResponseDto>;
  };
};

export type ListPaymentsWithSummaryDataResponse =
  ListPaymentsWithSummaryDataResponses[keyof ListPaymentsWithSummaryDataResponses];

export type CreateNewPaymentWithSummaryDataInResponseData = {
  body?: ApiPaymentSaveRequestDto;
  path?: never;
  query?: never;
  url: "/v3/lean/payments";
};

export type CreateNewPaymentWithSummaryDataInResponseErrors = {
  /**
   * Bad Request
   */
  400: {
    /**
     * List of objects
     */
    errors?: Array<{
      /**
       * Error code
       */
      code?: string;
      /**
       * Error description
       */
      description?: string;
    }>;
  };
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateNewPaymentWithSummaryDataInResponseError =
  CreateNewPaymentWithSummaryDataInResponseErrors[keyof CreateNewPaymentWithSummaryDataInResponseErrors];

export type CreateNewPaymentWithSummaryDataInResponseResponses = {
  /**
   * OK
   */
  200: ApiPaymentLeanGetResponseDto;
};

export type CreateNewPaymentWithSummaryDataInResponseResponse =
  CreateNewPaymentWithSummaryDataInResponseResponses[keyof CreateNewPaymentWithSummaryDataInResponseResponses];

export type CreateNewPaymentWithCreditCardWithSummaryDataInResponseData = {
  body?: {
    /**
     * Unique customer identifier in Asaas
     */
    customer: string;
    billingType: ApiPaymentSaveWithCreditCardRequestBillingType;
    /**
     * Payment amount
     */
    value: number;
    /**
     * Payment due date
     */
    dueDate: Date;
    /**
     * Payment description (max. 500 characters)
     */
    description?: string;
    /**
     * Days after registration cancellation deadline (only for bank slip)
     */
    daysAfterDueDateToRegistrationCancellation?: number;
    /**
     * Free search field
     */
    externalReference?: string;
    /**
     * Number of installments (only in the case of installment payment)
     */
    installmentCount?: number;
    /**
     * Enter the total amount of a charge that will be paid in installments (only in the case of an installment charge). If this field is sent, the installmentValue is not necessary, the calculation per installment will be automatic.
     */
    totalValue?: number;
    /**
     * Value of each installment (only in the case of installment payment). Send this field if you want to define the value of each installment.
     */
    installmentValue?: number;
    discount?: ApiPaymentDiscountDto;
    interest?: ApiPaymentInterestRequestDto;
    fine?: ApiPaymentFineRequestDto;
    /**
     * Define whether the payment will be sent via post
     */
    postalService?: boolean;
    /**
     * Split Settings
     */
    split?: Array<ApiPaymentSplitRequestDto>;
    callback?: ApiPaymentCallbackRequestDto;
    creditCard?: ApiCreditCardRequestDto;
    creditCardHolderInfo?: ApiCreditCardHolderInfoRequestDto;
    /**
     * Credit card token for using the credit card tokenization functionality
     */
    creditCardToken?: string;
    /**
     * Carry out only the Pre-Authorization of the payment
     */
    authorizeOnly?: boolean;
    /**
     * IP from where the customer is making the purchase. Your server's IP must not be entered.
     */
    remoteIp: string;
  };
  path?: never;
  query?: never;
  url: "/v3/lean/payments/";
};

export type CreateNewPaymentWithCreditCardWithSummaryDataInResponseErrors = {
  /**
   * Bad Request
   */
  400: {
    /**
     * List of objects
     */
    errors?: Array<{
      /**
       * Error code
       */
      code?: string;
      /**
       * Error description
       */
      description?: string;
    }>;
  };
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateNewPaymentWithCreditCardWithSummaryDataInResponseError =
  CreateNewPaymentWithCreditCardWithSummaryDataInResponseErrors[keyof CreateNewPaymentWithCreditCardWithSummaryDataInResponseErrors];

export type CreateNewPaymentWithCreditCardWithSummaryDataInResponseResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Unique payment identifier in Asaas
     */
    id?: string;
    /**
     * Payment creation date
     */
    dateCreated?: Date;
    /**
     * Unique identifier of the customer to whom the payment belongs
     */
    customerId?: string;
    /**
     * Unique subscription identifier (when recurring billing)
     */
    subscriptionId?: string;
    /**
     * Unique installment identifier (when billing in installments)
     */
    installmentId?: string;
    /**
     * Unique identifier of the payments link to which the payment belongs
     */
    paymentLinkId?: string;
    /**
     * Payment amount
     */
    value?: number;
    /**
     * Net value of the charge after discounting the Asaas fee
     */
    netValue?: number;
    /**
     * Original amount of charge (filled when paid with interest and fine)
     */
    originalValue?: number;
    /**
     * Calculated amount of interest and fine that must be paid after the charge is due
     */
    interestValue?: number;
    /**
     * Description of the payment
     */
    description?: string;
    billingType?: ApiPaymentLeanSaveWithCreditCardResponseBillingType;
    /**
     * Informs whether the charge can be paid after the due date (Only for bank slip)
     */
    canBePaidAfterDueDate?: boolean;
    /**
     * Billing confirmation date
     */
    confirmedDate?: Date;
    /**
     * Unique identifier of the Pix transaction to which the payment belongs
     */
    pixTransactionId?: string;
    status?: ApiPaymentLeanSaveWithCreditCardResponsePaymentStatus;
    /**
     * Payment due date
     */
    dueDate?: Date;
    /**
     * Original due date upon creation of the payment
     */
    originalDueDate?: Date;
    /**
     * Payment date on Asaas
     */
    paymentDate?: Date;
    /**
     * Date on which the customer paid the bank slip
     */
    customerPaymentDate?: Date;
    /**
     * Parcel number
     */
    installmentNumber?: number;
    /**
     * Free search field
     */
    externalReference?: string;
    /**
     * Determines if the payment has been removed
     */
    deleted?: boolean;
    /**
     * Defines whether the charge was anticipated or is in the process of being anticipated
     */
    anticipated?: boolean;
    /**
     * Determines whether the charge is anticipated
     */
    anticipable?: boolean;
    /**
     * Billing Credit date
     */
    creditDate?: string;
    /**
     * URL of proof of confirmation, receipt, reversal or removal
     */
    transactionReceiptUrl?: string;
    /**
     * Duplicate billing identifier (if true)
     */
    duplicatedPaymentId?: string;
    discount?: ApiPaymentDiscountDto;
    fine?: ApiPaymentFineResponseDto;
    interest?: ApiPaymentInterestResponseDto;
    /**
     * Define whether the payment will be sent via post
     */
    postalService?: boolean;
    creditCard?: ApiPaymentSaveWithCreditCardCreditCardDto;
  };
};

export type CreateNewPaymentWithCreditCardWithSummaryDataInResponseResponse =
  CreateNewPaymentWithCreditCardWithSummaryDataInResponseResponses[keyof CreateNewPaymentWithCreditCardWithSummaryDataInResponseResponses];

export type CapturePaymentWithPreAuthorizationWithSummaryDataInResponseData = {
  body?: ApiPaymentPathIdRequestDto;
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/lean/payments/{id}/captureAuthorizedPayment";
};

export type CapturePaymentWithPreAuthorizationWithSummaryDataInResponseErrors =
  {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Not found
     */
    404: unknown;
  };

export type CapturePaymentWithPreAuthorizationWithSummaryDataInResponseResponses =
  {
    /**
     * OK
     */
    200: ApiPaymentLeanGetResponseDto;
  };

export type CapturePaymentWithPreAuthorizationWithSummaryDataInResponseResponse =
  CapturePaymentWithPreAuthorizationWithSummaryDataInResponseResponses[keyof CapturePaymentWithPreAuthorizationWithSummaryDataInResponseResponses];

export type DeletePaymentWithSummaryDataData = {
  body?: never;
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/lean/payments/{id}";
};

export type DeletePaymentWithSummaryDataErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type DeletePaymentWithSummaryDataResponses = {
  /**
   * OK
   */
  200: ApiPaymentDeleteResponseDto;
};

export type DeletePaymentWithSummaryDataResponse =
  DeletePaymentWithSummaryDataResponses[keyof DeletePaymentWithSummaryDataResponses];

export type RetrieveASinglePaymentWithSummaryDataData = {
  body?: never;
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/lean/payments/{id}";
};

export type RetrieveASinglePaymentWithSummaryDataErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrieveASinglePaymentWithSummaryDataResponses = {
  /**
   * OK
   */
  200: ApiPaymentLeanGetResponseDto;
};

export type RetrieveASinglePaymentWithSummaryDataResponse =
  RetrieveASinglePaymentWithSummaryDataResponses[keyof RetrieveASinglePaymentWithSummaryDataResponses];

export type UpdateExistingPaymentWithSummaryDataInResponseData = {
  body?: ApiPaymentPathIdRequestDto;
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/lean/payments/{id}";
};

export type UpdateExistingPaymentWithSummaryDataInResponseErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type UpdateExistingPaymentWithSummaryDataInResponseResponses = {
  /**
   * OK
   */
  200: ApiPaymentLeanGetResponseDto;
};

export type UpdateExistingPaymentWithSummaryDataInResponseResponse =
  UpdateExistingPaymentWithSummaryDataInResponseResponses[keyof UpdateExistingPaymentWithSummaryDataInResponseResponses];

export type RestoreRemovedPaymentWithSummaryDataInResponseData = {
  body?: ApiPaymentPathIdRequestDto;
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/lean/payments/{id}/restore";
};

export type RestoreRemovedPaymentWithSummaryDataInResponseErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RestoreRemovedPaymentWithSummaryDataInResponseResponses = {
  /**
   * OK
   */
  200: ApiPaymentLeanGetResponseDto;
};

export type RestoreRemovedPaymentWithSummaryDataInResponseResponse =
  RestoreRemovedPaymentWithSummaryDataInResponseResponses[keyof RestoreRemovedPaymentWithSummaryDataInResponseResponses];

export type RefundPaymentWithSummaryDataInResponseData = {
  body?: ApiPaymentRefundRequestDto;
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/lean/payments/{id}/refund";
};

export type RefundPaymentWithSummaryDataInResponseErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RefundPaymentWithSummaryDataInResponseResponses = {
  /**
   * OK
   */
  200: ApiPaymentLeanGetResponseDto;
};

export type RefundPaymentWithSummaryDataInResponseResponse =
  RefundPaymentWithSummaryDataInResponseResponses[keyof RefundPaymentWithSummaryDataInResponseResponses];

export type ConfirmCashReceiptWithSummaryDataInResponseData = {
  body?: ApiPaymentReceiveInCashRequestDto;
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/lean/payments/{id}/receiveInCash";
};

export type ConfirmCashReceiptWithSummaryDataInResponseErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type ConfirmCashReceiptWithSummaryDataInResponseResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Unique payment identifier in Asaas
     */
    id?: string;
    /**
     * Payment creation date
     */
    dateCreated?: Date;
    /**
     * Unique identifier of the customer to whom the payment belongs
     */
    customerId?: string;
    /**
     * Unique subscription identifier (when recurring billing)
     */
    subscriptionId?: string;
    /**
     * Unique installment identifier (when billing in installments)
     */
    installmentId?: string;
    /**
     * Unique identifier of the payments link to which the payment belongs
     */
    paymentLinkId?: string;
    /**
     * Payment amount
     */
    value?: number;
    /**
     * Net value of the charge after discounting the Asaas fee
     */
    netValue?: number;
    /**
     * Original amount of charge (filled when paid with interest and fine)
     */
    originalValue?: number;
    /**
     * Calculated amount of interest and fine that must be paid after the charge is due
     */
    interestValue?: number;
    /**
     * Description of the payment
     */
    description?: string;
    billingType?: ApiPaymentLeanGetResponseBillingType;
    /**
     * Informs whether the charge can be paid after the due date (Only for bank slip)
     */
    canBePaidAfterDueDate?: boolean;
    /**
     * Billing confirmation date
     */
    confirmedDate?: Date;
    /**
     * Unique identifier of the Pix transaction to which the payment belongs
     */
    pixTransactionId?: string;
    status?: ApiPaymentLeanGetResponsePaymentStatus;
    /**
     * Payment due date
     */
    dueDate?: Date;
    /**
     * Original due date upon creation of the payment
     */
    originalDueDate?: Date;
    /**
     * Payment date on Asaas
     */
    paymentDate?: Date;
    /**
     * Date on which the customer paid the bank slip
     */
    customerPaymentDate?: Date;
    /**
     * Parcel number
     */
    installmentNumber?: number;
    /**
     * Free search field
     */
    externalReference?: string;
    /**
     * Determines if the payment has been removed
     */
    deleted?: boolean;
    /**
     * Defines whether the charge was anticipated or is in the process of being anticipated
     */
    anticipated?: boolean;
    /**
     * Determines whether the charge is anticipated
     */
    anticipable?: boolean;
    /**
     * Billing Credit date
     */
    creditDate?: string;
    /**
     * URL of proof of confirmation, receipt, reversal or removal
     */
    transactionReceiptUrl?: string;
    /**
     * Duplicate billing identifier (if true)
     */
    duplicatedPaymentId?: string;
    discount?: ApiPaymentDiscountDto;
    fine?: ApiPaymentFineResponseDto;
    interest?: ApiPaymentInterestResponseDto;
    /**
     * Define whether the payment will be sent via post
     */
    postalService?: boolean;
  };
};

export type ConfirmCashReceiptWithSummaryDataInResponseResponse =
  ConfirmCashReceiptWithSummaryDataInResponseResponses[keyof ConfirmCashReceiptWithSummaryDataInResponseResponses];

export type UndoCashReceiptConfirmationWithSummaryDataInResponseData = {
  body?: ApiPaymentPathIdRequestDto;
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/lean/payments/{id}/undoReceivedInCash";
};

export type UndoCashReceiptConfirmationWithSummaryDataInResponseErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type UndoCashReceiptConfirmationWithSummaryDataInResponseResponses = {
  /**
   * OK
   */
  200: ApiPaymentLeanGetResponseDto;
};

export type UndoCashReceiptConfirmationWithSummaryDataInResponseResponse =
  UndoCashReceiptConfirmationWithSummaryDataInResponseResponses[keyof UndoCashReceiptConfirmationWithSummaryDataInResponseResponses];

export type CreditCardTokenizationData = {
  body?: {
    /**
     * Unique customer identifier in Asaas
     */
    customer: string;
    creditCard: ApiCreditCardRequestDto;
    creditCardHolderInfo: ApiCreditCardHolderInfoRequestDto;
    /**
     * IP from where the customer is making the purchase. Your server's IP must not be entered.
     */
    remoteIp: string;
  };
  path?: never;
  query?: never;
  url: "/v3/creditCard/tokenizeCreditCard";
};

export type CreditCardTokenizationErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreditCardTokenizationResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Last 4 digits of the card used
     */
    creditCardNumber?: string;
    creditCardBrand?: ApiCreditCardTokenizeResponseCreditCardBrand;
    /**
     * Credit card token that can be sent in future transactions without the need to re-enter card and cardholder details.
     */
    creditCardToken?: string;
  };
};

export type CreditCardTokenizationResponse =
  CreditCardTokenizationResponses[keyof CreditCardTokenizationResponses];

export type RetrieveRefundsOfASinglePaymentData = {
  body?: never;
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/payments/{id}/refunds";
};

export type RetrieveRefundsOfASinglePaymentErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrieveRefundsOfASinglePaymentResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<ApiPaymentRefundGetResponseDto>;
  };
};

export type RetrieveRefundsOfASinglePaymentResponse =
  RetrieveRefundsOfASinglePaymentResponses[keyof RetrieveRefundsOfASinglePaymentResponses];

export type RefundBankSlipData = {
  body?: ApiPaymentPathIdRequestDto;
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/payments/{id}/bankSlip/refund";
};

export type RefundBankSlipErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RefundBankSlipResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Link to report refund details
     */
    requestUrl?: string;
  };
};

export type RefundBankSlipResponse =
  RefundBankSlipResponses[keyof RefundBankSlipResponses];

export type RetrieveASinglePaidSplitData = {
  body?: never;
  path: {
    /**
     * Unique split identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/payments/splits/paid/{id}";
};

export type RetrieveASinglePaidSplitErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrieveASinglePaidSplitResponses = {
  /**
   * OK
   */
  200: ApiPaymentSplitGetResponseDto;
};

export type RetrieveASinglePaidSplitResponse =
  RetrieveASinglePaidSplitResponses[keyof RetrieveASinglePaidSplitResponses];

export type ListPaidSplitsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
    /**
     * Filter by payment ID
     */
    paymentId?: string;
    /**
     * Filter by status
     */
    status?: ApiPaymentSplitListPaidRequestPaymentSplitStatus;
    /**
     * Filter from the initial payment confirmation date
     */
    "paymentConfirmedDate[ge]"?: string;
    /**
     * Filter from final payment confirmation date
     */
    "paymentConfirmedDate[le]"?: string;
    /**
     * Filter from the initial split sending date
     */
    "creditDate[ge]"?: string;
    /**
     * Filter from the final split sending date
     */
    "creditDate[le]"?: string;
  };
  url: "/v3/payments/splits/paid";
};

export type ListPaidSplitsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type ListPaidSplitsResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<ApiPaymentSplitGetResponseDto>;
  };
};

export type ListPaidSplitsResponse =
  ListPaidSplitsResponses[keyof ListPaidSplitsResponses];

export type RetrieveASingleReceivedSplitData = {
  body?: never;
  path: {
    /**
     * Unique split identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/payments/splits/received/{id}";
};

export type RetrieveASingleReceivedSplitErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrieveASingleReceivedSplitResponses = {
  /**
   * OK
   */
  200: ApiPaymentSplitGetResponseDto;
};

export type RetrieveASingleReceivedSplitResponse =
  RetrieveASingleReceivedSplitResponses[keyof RetrieveASingleReceivedSplitResponses];

export type ListReceivedSplitsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
    /**
     * Filter by payment ID
     */
    paymentId?: string;
    /**
     * Filter by status
     */
    status?: ApiPaymentSplitListReceivedRequestPaymentSplitStatus;
    /**
     * Filter from the initial payment confirmation date
     */
    "paymentConfirmedDate[ge]"?: string;
    /**
     * Filter from final payment confirmation date
     */
    "paymentConfirmedDate[le]"?: string;
    /**
     * Filter by date of receipt of initial split
     */
    "creditDate[ge]"?: string;
    /**
     * Filter by date of receipt of final split
     */
    "creditDate[le]"?: string;
  };
  url: "/v3/payments/splits/received";
};

export type ListReceivedSplitsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type ListReceivedSplitsResponses = {
  /**
   * OK
   */
  200: ApiPaymentSplitListResponseDto;
};

export type ListReceivedSplitsResponse =
  ListReceivedSplitsResponses[keyof ListReceivedSplitsResponses];

export type ListDocumentsOfAPaymentData = {
  body?: never;
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/payments/{id}/documents";
};

export type ListDocumentsOfAPaymentErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type ListDocumentsOfAPaymentResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<ApiPaymentDocumentGetResponseDto>;
  };
};

export type ListDocumentsOfAPaymentResponse =
  ListDocumentsOfAPaymentResponses[keyof ListDocumentsOfAPaymentResponses];

export type UploadPaymentDocumentsData = {
  body?: {
    /**
     * true to make the file available only after receipt of the payment
     */
    availableAfterPayment: boolean;
    type: ApiPaymentDocumentSaveRequestPaymentDocumentType;
    file?: File;
  };
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/payments/{id}/documents";
};

export type UploadPaymentDocumentsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type UploadPaymentDocumentsResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Unique document identifier
     */
    id?: string;
    /**
     * Document name
     */
    name?: string;
    type?: ApiPaymentDocumentGetResponsePaymentDocumentType;
    /**
     * Available only after payment
     */
    availableAfterPayment?: boolean;
    file?: ApiPaymentDocumentFileResponseDto;
    /**
     * Indicates whether the file was removed
     */
    deleted?: boolean;
  };
};

export type UploadPaymentDocumentsResponse =
  UploadPaymentDocumentsResponses[keyof UploadPaymentDocumentsResponses];

export type DeleteDocumentFromAPaymentData = {
  body?: never;
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
    /**
     * Unique document identifier
     */
    documentId: string;
  };
  query?: never;
  url: "/v3/payments/{id}/documents/{documentId}";
};

export type DeleteDocumentFromAPaymentErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type DeleteDocumentFromAPaymentResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Indicates whether the file was removed
     */
    deleted?: boolean;
    /**
     * Unique document identifier
     */
    id?: string;
  };
};

export type DeleteDocumentFromAPaymentResponse =
  DeleteDocumentFromAPaymentResponses[keyof DeleteDocumentFromAPaymentResponses];

export type RetrieveASingleDocumentOfAPaymentData = {
  body?: never;
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
    /**
     * Unique document identifier
     */
    documentId: string;
  };
  query?: never;
  url: "/v3/payments/{id}/documents/{documentId}";
};

export type RetrieveASingleDocumentOfAPaymentErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrieveASingleDocumentOfAPaymentResponses = {
  /**
   * OK
   */
  200: ApiPaymentDocumentGetResponseDto;
};

export type RetrieveASingleDocumentOfAPaymentResponse =
  RetrieveASingleDocumentOfAPaymentResponses[keyof RetrieveASingleDocumentOfAPaymentResponses];

export type UpdateSettingsOfADocumentOfAPaymentData = {
  body?: {
    /**
     * true to make the file available only after receipt of the payment
     */
    availableAfterPayment: boolean;
    type: ApiPaymentDocumentUpdateRequestPaymentDocumentType;
  };
  path: {
    /**
     * Unique payment identifier in Asaas
     */
    id: string;
    /**
     * Unique document identifier
     */
    documentId: string;
  };
  query?: never;
  url: "/v3/payments/{id}/documents/{documentId}";
};

export type UpdateSettingsOfADocumentOfAPaymentErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type UpdateSettingsOfADocumentOfAPaymentResponses = {
  /**
   * OK
   */
  200: ApiPaymentDocumentGetResponseDto;
};

export type UpdateSettingsOfADocumentOfAPaymentResponse =
  UpdateSettingsOfADocumentOfAPaymentResponses[keyof UpdateSettingsOfADocumentOfAPaymentResponses];

export type ListCustomersData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
    /**
     * Filter by name
     */
    name?: string;
    /**
     * Filter by email
     */
    email?: string;
    /**
     * Filter by CPF or CNPJ
     */
    cpfCnpj?: string;
    /**
     * Filter by group
     */
    groupName?: string;
    /**
     * Filter by your system identifier
     */
    externalReference?: string;
  };
  url: "/v3/customers";
};

export type ListCustomersErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type ListCustomersResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<ApiCustomerAccountGetResponseDto>;
  };
};

export type ListCustomersResponse =
  ListCustomersResponses[keyof ListCustomersResponses];

export type CreateNewCustomerData = {
  body?: {
    /**
     * Client name
     */
    name: string;
    /**
     * Customer CPF or CNPJ
     */
    cpfCnpj: string;
    /**
     * Customer email
     */
    email?: string;
    /**
     * Landline
     */
    phone?: string;
    /**
     * Cell phone
     */
    mobilePhone?: string;
    /**
     * Public place
     */
    address?: string;
    /**
     * Address number
     */
    addressNumber?: string;
    /**
     * Address complement (max. 255 characters)
     */
    complement?: string;
    /**
     * Neighborhood
     */
    province?: string;
    /**
     * Address zip code
     */
    postalCode?: string;
    /**
     * Customer identifier in your system
     */
    externalReference?: string;
    /**
     * true to disable sending billing notifications
     */
    notificationDisabled?: boolean;
    /**
     * Additional emails for sending billing notifications separated by ","
     */
    additionalEmails?: string;
    /**
     * Customer municipal registration
     */
    municipalInscription?: string;
    /**
     * Customer state registration
     */
    stateInscription?: string;
    /**
     * Additional observations
     */
    observations?: string;
    /**
     * Name of the group the customer belongs to
     */
    groupName?: string;
    /**
     * Company
     */
    company?: string;
    /**
     * inform true if it's a non-brazilian customer
     */
    foreignCustomer?: boolean;
  };
  path?: never;
  query?: never;
  url: "/v3/customers";
};

export type CreateNewCustomerErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateNewCustomerResponses = {
  /**
   * OK
   */
  200: ApiCustomerAccountGetResponseDto;
};

export type CreateNewCustomerResponse =
  CreateNewCustomerResponses[keyof CreateNewCustomerResponses];

export type RemoveCustomerData = {
  body?: never;
  path: {
    /**
     * Unique identifier of the customer to be removed
     */
    id: string;
  };
  query?: never;
  url: "/v3/customers/{id}";
};

export type RemoveCustomerErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RemoveCustomerResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Indicates whether the client has been removed
     */
    deleted?: boolean;
    /**
     * Unique customer identifier
     */
    id?: string;
  };
};

export type RemoveCustomerResponse =
  RemoveCustomerResponses[keyof RemoveCustomerResponses];

export type RetrieveASingleCustomerData = {
  body?: never;
  path: {
    /**
     * Unique customer identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/customers/{id}";
};

export type RetrieveASingleCustomerErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrieveASingleCustomerResponses = {
  /**
   * OK
   */
  200: ApiCustomerAccountGetResponseDto;
};

export type RetrieveASingleCustomerResponse =
  RetrieveASingleCustomerResponses[keyof RetrieveASingleCustomerResponses];

export type UpdateExistingCustomerData = {
  body?: {
    /**
     * Client name
     */
    name?: string;
    /**
     * Customer CPF or CNPJ
     */
    cpfCnpj?: string;
    /**
     * Customer email
     */
    email?: string;
    /**
     * Landline
     */
    phone?: string;
    /**
     * Cell phone
     */
    mobilePhone?: string;
    /**
     * Public place
     */
    address?: string;
    /**
     * Address number
     */
    addressNumber?: string;
    /**
     * Address complement
     */
    complement?: string;
    /**
     * Neighborhood
     */
    province?: string;
    /**
     * Address zip code
     */
    postalCode?: string;
    /**
     * Customer identifier in your system
     */
    externalReference?: string;
    /**
     * true to disable sending billing notifications
     */
    notificationDisabled?: boolean;
    /**
     * Additional emails for sending billing notifications separated by ","
     */
    additionalEmails?: string;
    /**
     * Customer municipal registration
     */
    municipalInscription?: string;
    /**
     * Customer state registration
     */
    stateInscription?: string;
    /**
     * Additional observations
     */
    observations?: string;
    /**
     * Name of the group the customer belongs to
     */
    groupName?: string;
    /**
     * Company
     */
    company?: string;
    /**
     * inform true if it's a non-brazilian customer
     */
    foreignCustomer?: boolean;
  };
  path: {
    /**
     * Unique identifier of the customer to be updated.
     */
    id: string;
  };
  query?: never;
  url: "/v3/customers/{id}";
};

export type UpdateExistingCustomerErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type UpdateExistingCustomerResponses = {
  /**
   * OK
   */
  200: ApiCustomerAccountGetResponseDto;
};

export type UpdateExistingCustomerResponse =
  UpdateExistingCustomerResponses[keyof UpdateExistingCustomerResponses];

export type RestoreRemovedCustomerData = {
  body?: {
    [key: string]: unknown;
  };
  path: {
    /**
     * Unique identifier of the client to be restored.
     */
    id: string;
  };
  query?: never;
  url: "/v3/customers/{id}/restore";
};

export type RestoreRemovedCustomerErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RestoreRemovedCustomerResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Unique customer identifier
     */
    id?: string;
    /**
     * Customer creation date
     */
    dateCreated?: string;
    /**
     * Client name
     */
    name?: string;
    /**
     * Customer email
     */
    email?: string;
    /**
     * Customer phone
     */
    phone?: string;
    /**
     * Customer cell phone
     */
    mobilePhone?: string;
    /**
     * Customer address
     */
    address?: string;
    /**
     * Customer address number
     */
    addressNumber?: string;
    /**
     * Customer address complement
     */
    complement?: string;
    /**
     * Customer address neighborhood
     */
    province?: string;
    /**
     * Unique city identifier in Asaas
     */
    city?: string;
    /**
     * City of customer address
     */
    cityName?: string;
    /**
     * Customer address status
     */
    state?: string;
    /**
     * Customer country
     */
    country?: string;
    /**
     * Customer address zip code
     */
    postalCode?: string;
    /**
     * Customer CPF or CNPJ
     */
    cpfCnpj?: string;
    personType?: ApiCustomerAccountGetResponsePersonType;
    /**
     * Indicates whether it is a deleted client
     */
    deleted?: boolean;
    /**
     * Additional customer emails
     */
    additionalEmails?: string;
    /**
     * External customer reference
     */
    externalReference?: string;
    /**
     * Indicates whether notifications are disabled
     */
    notificationDisabled?: boolean;
    /**
     * Customer Observations
     */
    observations?: string;
    /**
     * Indicates if it's non-brazilian customer
     */
    foreignCustomer?: boolean;
  };
};

export type RestoreRemovedCustomerResponse =
  RestoreRemovedCustomerResponses[keyof RestoreRemovedCustomerResponses];

export type RetrieveNotificationsFromACustomerData = {
  body?: never;
  path: {
    /**
     * Unique customer identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/customers/{id}/notifications";
};

export type RetrieveNotificationsFromACustomerErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrieveNotificationsFromACustomerResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<ApiNotificationGetResponseDto>;
  };
};

export type RetrieveNotificationsFromACustomerResponse =
  RetrieveNotificationsFromACustomerResponses[keyof RetrieveNotificationsFromACustomerResponses];

export type UpdateExistingNotificationData = {
  body?: ApiNotificationUpdateRequestDto;
  path: {
    /**
     * Unique identifier of the notification to be updated
     */
    id: string;
  };
  query?: never;
  url: "/v3/notifications/{id}";
};

export type UpdateExistingNotificationErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type UpdateExistingNotificationResponses = {
  /**
   * OK
   */
  200: ApiNotificationGetResponseDto;
};

export type UpdateExistingNotificationResponse =
  UpdateExistingNotificationResponses[keyof UpdateExistingNotificationResponses];

export type UpdateExistingNotificationsInBatchData = {
  body?: {
    /**
     * Unique customer identifier in Asaas
     */
    customer: string;
    /**
     * List of notification information
     */
    notifications?: Array<{
      /**
       * Unique identifier of the notification to be updated
       */
      id: string;
      /**
       * Enable/disable notification
       */
      enabled?: boolean;
      /**
       * enable/disable the email sent to you
       */
      emailEnabledForProvider?: boolean;
      /**
       * enable/disable the SMS sent to you
       */
      smsEnabledForProvider?: boolean;
      /**
       * enable/disable the email sent to your customer
       */
      emailEnabledForCustomer?: boolean;
      /**
       * enable/disable the SMS sent to your customer
       */
      smsEnabledForCustomer?: boolean;
      /**
       * enable/disable voice notification sent to your customer
       */
      phoneCallEnabledForCustomer?: boolean;
      /**
       * enable/disable WhatsApp messages for your customer
       */
      whatsappEnabledForCustomer?: boolean;
      /**
       * Specifies how many days before the due date the notification must be sent.
       * For the `PAYMENT_DUEDATE_WARNING` event, the accepted values are: `0`, `5`, `10`, `15` and `30`
       * For the `PAYMENT_OVERDUE` event, the accepted values are: `1`, `7`, `15` and `30`
       */
      scheduleOffset?: 0 | 1 | 5 | 7 | 10 | 15 | 30;
    }>;
  };
  path?: never;
  query?: never;
  url: "/v3/notifications/batch";
};

export type UpdateExistingNotificationsInBatchErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type UpdateExistingNotificationsInBatchResponses = {
  /**
   * OK
   */
  200: {
    /**
     * List of notification information
     */
    notifications?: Array<{
      /**
       * Object type
       */
      object?: string;
      /**
       * Unique notification identifier
       */
      id?: string;
      /**
       * Unique customer identifier
       */
      customer?: string;
      /**
       * Indicates whether notification is enabled
       */
      enabled?: boolean;
      /**
       * Indicates whether the email sent to you is enabled or disabled
       */
      emailEnabledForProvider?: boolean;
      /**
       * Indicates whether the SMS sent to you is enabled or disabled
       */
      smsEnabledForProvider?: boolean;
      /**
       * Indicates whether the email sent to the customer is enabled or disabled
       */
      emailEnabledForCustomer?: boolean;
      /**
       * Indicates whether the SMS sent to the customer is enabled or disabled
       */
      smsEnabledForCustomer?: boolean;
      /**
       * Indicates whether voice notification to the customer is enabled or disabled
       */
      phoneCallEnabledForCustomer?: boolean;
      /**
       * Indicates whether the WhatsApp notification sent to the customer is enabled or disabled
       */
      whatsappEnabledForCustomer?: boolean;
      event?: ApiNotificationGetResponseNotificationEvent;
      /**
       * Specifies how many days before the due date the notification must be sent. Valid only for the `PAYMENT_DUEDATE_WARNING` and `PAYMENT_OVERDUE` events
       */
      scheduleOffset?: 0 | 1 | 5 | 7 | 10 | 15 | 30;
      /**
       * Indicates whether the notification was deleted
       */
      deleted?: boolean;
    }>;
  };
};

export type UpdateExistingNotificationsInBatchResponse =
  UpdateExistingNotificationsInBatchResponses[keyof UpdateExistingNotificationsInBatchResponses];

export type ListInstallmentsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
  };
  url: "/v3/installments";
};

export type ListInstallmentsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type ListInstallmentsResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<ApiInstallmentGetResponseDto>;
  };
};

export type ListInstallmentsResponse =
  ListInstallmentsResponses[keyof ListInstallmentsResponses];

export type CreateInstallmentData = {
  body?: {
    /**
     * Number of installments
     */
    installmentCount: number;
    /**
     * Unique customer identifier in Asaas
     */
    customer: string;
    /**
     * Value of each installment
     */
    value: number;
    /**
     * Total installment amount
     */
    totalValue?: number;
    billingType: ApiInstallmentSaveRequestBillingType;
    /**
     * Due date of the first installment
     */
    dueDate: Date;
    /**
     * Installment description (max. 500 characters)
     */
    description?: string;
    /**
     * Define whether the payment will be sent via post
     */
    postalService?: boolean;
    /**
     * Days after registration cancellation deadline (only for bank slip)
     */
    daysAfterDueDateToRegistrationCancellation?: number;
    /**
     * Free search field
     */
    paymentExternalReference?: string;
    discount?: ApiPaymentDiscountDto;
    interest?: ApiPaymentInterestRequestDto;
    fine?: ApiPaymentFineRequestDto;
    /**
     * Split Settings
     */
    splits?: Array<{
      /**
       * Asaas wallet identifier that will be transferred
       */
      walletId: string;
      /**
       * Fixed amount to be transferred to the account when the payment is received
       */
      fixedValue?: number;
      /**
       * Percentage of the net value of the charge to be transferred when received
       */
      percentualValue?: number;
      /**
       * (Instalments only). Amount that will be split relative to the total amount that will be paid in installments.
       */
      totalFixedValue?: number;
      /**
       * Split identifier in your system
       */
      externalReference?: string;
      /**
       * Split description
       */
      description?: string;
      /**
       * Installment number to which the split will be linked. Cannot be provided along with the 'totalFixedValue' field
       */
      installmentNumber?: number;
    }>;
  };
  path?: never;
  query?: never;
  url: "/v3/installments";
};

export type CreateInstallmentErrors = {
  /**
   * Bad Request
   */
  400: {
    /**
     * List of objects
     */
    errors?: Array<{
      /**
       * Error code
       */
      code?: string;
      /**
       * Error description
       */
      description?: string;
    }>;
  };
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateInstallmentError =
  CreateInstallmentErrors[keyof CreateInstallmentErrors];

export type CreateInstallmentResponses = {
  /**
   * OK
   */
  200: ApiInstallmentGetResponseDto;
};

export type CreateInstallmentResponse =
  CreateInstallmentResponses[keyof CreateInstallmentResponses];

export type CreateInstallmentWithCreditCardData = {
  body?: {
    /**
     * Number of installments
     */
    installmentCount: number;
    /**
     * Unique customer identifier in Asaas
     */
    customer: string;
    /**
     * Value of each installment
     */
    value: number;
    /**
     * Total installment amount
     */
    totalValue?: number;
    billingType: ApiInstallmentSaveWithCreditCardRequestBillingType;
    /**
     * Due date of the first installment
     */
    dueDate: Date;
    /**
     * Installment description (max. 500 characters)
     */
    description?: string;
    /**
     * Define whether the payment will be sent via post
     */
    postalService?: boolean;
    /**
     * Days after registration cancellation deadline (only for bank slip)
     */
    daysAfterDueDateToRegistrationCancellation?: number;
    /**
     * Free search field
     */
    paymentExternalReference?: string;
    discount?: ApiPaymentDiscountDto;
    interest?: ApiPaymentInterestRequestDto;
    fine?: ApiPaymentFineRequestDto;
    /**
     * Split Settings
     */
    splits?: Array<ApiInstallmentSplitRequestDto>;
    creditCard?: ApiCreditCardRequestDto;
    creditCardHolderInfo?: ApiCreditCardHolderInfoRequestDto;
    /**
     * Credit card token for using the credit card tokenization functionality. If informed, the fields creditCard and creditCardHolderInfo are not mandatory.
     */
    creditCardToken?: string;
    /**
     * Carry out only the Pre-Authorization of the installment
     */
    authorizeOnly?: boolean;
    /**
     * IP from where the customer is making the purchase. Your server's IP must not be entered.
     */
    remoteIp: string;
  };
  path?: never;
  query?: never;
  url: "/v3/installments/";
};

export type CreateInstallmentWithCreditCardErrors = {
  /**
   * Bad Request
   */
  400: {
    /**
     * List of objects
     */
    errors?: Array<{
      /**
       * Error code
       */
      code?: string;
      /**
       * Error description
       */
      description?: string;
    }>;
  };
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateInstallmentWithCreditCardError =
  CreateInstallmentWithCreditCardErrors[keyof CreateInstallmentWithCreditCardErrors];

export type CreateInstallmentWithCreditCardResponses = {
  /**
   * OK
   */
  200: ApiInstallmentGetResponseDto;
};

export type CreateInstallmentWithCreditCardResponse =
  CreateInstallmentWithCreditCardResponses[keyof CreateInstallmentWithCreditCardResponses];

export type RemoveInstallmentData = {
  body?: never;
  path: {
    /**
     * Unique identifier of the installment to be removed.
     */
    id: string;
  };
  query?: never;
  url: "/v3/installments/{id}";
};

export type RemoveInstallmentErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RemoveInstallmentResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Indicates whether the installment plan is removed
     */
    deleted?: boolean;
    /**
     * Unique installment identifier in Asaas
     */
    id?: string;
  };
};

export type RemoveInstallmentResponse =
  RemoveInstallmentResponses[keyof RemoveInstallmentResponses];

export type RetrieveASingleInstallmentData = {
  body?: never;
  path: {
    /**
     * Unique installment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/installments/{id}";
};

export type RetrieveASingleInstallmentErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrieveASingleInstallmentResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Unique installment identifier in Asaas
     */
    id?: string;
    /**
     * Installment amount
     */
    value?: number;
    /**
     * Net installment amount
     */
    netValue?: number;
    /**
     * Value of each installment
     */
    paymentValue?: number;
    /**
     * Number of installments
     */
    installmentCount?: number;
    billingType?: ApiInstallmentGetResponseBillingType;
    /**
     * Bill settlement date on Asaas
     */
    paymentDate?: Date;
    /**
     * Description of the installment
     */
    description?: string;
    /**
     * Due date of each installment
     */
    expirationDay?: number;
    /**
     * Installment creation date
     */
    dateCreated?: Date;
    /**
     * Unique identifier of the customer to whom the installment belongs
     */
    customer?: string;
    /**
     * Unique identifier of the payment link to which the installment belongs
     */
    paymentLink?: string;
    /**
     * URL of proof of confirmation, receipt, reversal or removal.
     */
    transactionReceiptUrl?: string;
    chargeback?: ApiPaymentChargebackResponseDto;
    creditCard?: ApiPaymentSaveWithCreditCardCreditCardDto;
    /**
     * Indicates whether the installment has been removed
     */
    deleted?: boolean;
  };
};

export type RetrieveASingleInstallmentResponse =
  RetrieveASingleInstallmentResponses[keyof RetrieveASingleInstallmentResponses];

export type ListPaymentsOfAInstallmentData = {
  body?: never;
  path: {
    /**
     * Unique installment identifier in Asaas
     */
    id: string;
  };
  query?: {
    /**
     * Filter by payment status
     */
    status?: ApiInstallmentListPaymentsRequestPaymentStatus;
  };
  url: "/v3/installments/{id}/payments";
};

export type ListPaymentsOfAInstallmentErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type ListPaymentsOfAInstallmentResponses = {
  /**
   * OK
   */
  200: ApiPaymentListResponseDto;
};

export type ListPaymentsOfAInstallmentResponse =
  ListPaymentsOfAInstallmentResponses[keyof ListPaymentsOfAInstallmentResponses];

export type GenerateInstallmentBookletData = {
  body?: never;
  path: {
    /**
     * Unique installment identifier in Asaas
     */
    id: string;
  };
  query?: {
    /**
     * Filter by column name
     */
    sort?: string;
    /**
     * Column ordering
     */
    order?: string;
  };
  url: "/v3/installments/{id}/paymentBook";
};

export type GenerateInstallmentBookletErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type GenerateInstallmentBookletResponses = {
  /**
   * OK
   */
  200: {
    [key: string]: unknown;
  };
};

export type GenerateInstallmentBookletResponse =
  GenerateInstallmentBookletResponses[keyof GenerateInstallmentBookletResponses];

export type RefundInstallmentData = {
  body?: {
    [key: string]: unknown;
  };
  path: {
    /**
     * Unique identifier of the installment to be refunded.
     */
    id: string;
  };
  query?: never;
  url: "/v3/installments/{id}/refund";
};

export type RefundInstallmentErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RefundInstallmentResponses = {
  /**
   * OK
   */
  200: ApiInstallmentGetResponseDto;
};

export type RefundInstallmentResponse =
  RefundInstallmentResponses[keyof RefundInstallmentResponses];

export type UpdateInstallmentSplitsData = {
  body?: {
    /**
     * Split data to update
     */
    splits?: Array<ApiInstallmentSplitRequestDto>;
  };
  path: {
    /**
     * Installment ID
     */
    id: string;
  };
  query?: never;
  url: "/v3/installments/{id}/splits";
};

export type UpdateInstallmentSplitsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type UpdateInstallmentSplitsResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Split array
     */
    splits?: Array<{
      /**
       * Unique split identifier in Asaas
       */
      id?: string;
      /**
       * Asaas wallet identifier that will be transferred
       */
      walletId?: string;
      /**
       * Fixed amount to be transferred to the account when the charge is received
       */
      fixedValue?: number;
      /**
       * Percentage of the net value of the charge to be transferred when received
       */
      percentualValue?: number;
      /**
       * Amount that will be split relative to the total amount that will be paid
       */
      totalValue?: number;
      cancellationReason?: ApiInstallmentSplitGetResponsePaymentSplitCancellationReason;
      status?: ApiInstallmentSplitGetResponsePaymentSplitStatus;
      /**
       * Unique identifier of split in your system
       */
      externalReference?: string;
      /**
       * Split description
       */
      description?: string;
      /**
       * Installment to which the split is linked
       */
      installmentNumber?: number;
    }>;
  };
};

export type UpdateInstallmentSplitsResponse =
  UpdateInstallmentSplitsResponses[keyof UpdateInstallmentSplitsResponses];

export type ListSubscriptionsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
    /**
     * Filter by Unique Customer Identifier
     */
    customer?: string;
    /**
     * Filter by customer group name
     */
    customerGroupName?: string;
    /**
     * Filter by billing type
     */
    billingType?: ApiSubscriptionListRequestBillingType;
    /**
     * Filter by status
     */
    status?: ApiSubscriptionListRequestSubscriptionStatus;
    /**
     * Send true to return only removed subscriptions
     */
    deletedOnly?: string;
    /**
     * Send true to also recover removed subscriptions
     */
    includeDeleted?: string;
    /**
     * Filter by your system identifier
     */
    externalReference?: string;
    /**
     * Ascending or descending order
     */
    order?: string;
    /**
     * Which field will it be sorted by
     */
    sort?: string;
  };
  url: "/v3/subscriptions";
};

export type ListSubscriptionsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type ListSubscriptionsResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<ApiSubscriptionGetResponseDto>;
  };
};

export type ListSubscriptionsResponse =
  ListSubscriptionsResponses[keyof ListSubscriptionsResponses];

export type CreateNewSubscriptionData = {
  body?: {
    /**
     * Unique customer identifier in Asaas
     */
    customer: string;
    billingType: ApiSubscriptionSaveRequestBillingType;
    /**
     * Subscription value
     */
    value: number;
    /**
     * First payment due
     */
    nextDueDate: Date;
    discount?: ApiPaymentDiscountDto;
    interest?: ApiPaymentInterestRequestDto;
    fine?: ApiPaymentFineRequestDto;
    cycle: ApiSubscriptionSaveRequestCycle;
    /**
     * Subscription description (max. 500 characters)
     */
    description?: string;
    /**
     * Deadline for payments to be due
     */
    endDate?: Date;
    /**
     * Maximum number of payments to be generated for this subscription
     */
    maxPayments?: number;
    /**
     * Subscription identifier on your system
     */
    externalReference?: string;
    /**
     * Split information
     */
    split?: Array<{
      /**
       * Asaas wallet identifier that will be transferred
       */
      walletId: string;
      /**
       * Fixed amount to be transferred to the account when the payment is received
       */
      fixedValue?: number;
      /**
       * Percentage of the net value of the charge to be transferred when received
       */
      percentualValue?: number;
      /**
       * Split identifier in your system
       */
      externalReference?: string;
      /**
       * Split description
       */
      description?: string;
    }>;
    callback?: ApiPaymentCallbackRequestDto;
  };
  path?: never;
  query?: never;
  url: "/v3/subscriptions";
};

export type CreateNewSubscriptionErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateNewSubscriptionResponses = {
  /**
   * OK
   */
  200: ApiSubscriptionGetResponseDto;
};

export type CreateNewSubscriptionResponse =
  CreateNewSubscriptionResponses[keyof CreateNewSubscriptionResponses];

export type CreateSubscriptionWithCreditCardData = {
  body?: {
    /**
     * Unique customer identifier in Asaas
     */
    customer: string;
    billingType: ApiSubscriptionSaveWithCreditCardRequestBillingType;
    /**
     * Subscription value
     */
    value: number;
    /**
     * First payment due
     */
    nextDueDate: Date;
    discount?: ApiPaymentDiscountDto;
    interest?: ApiPaymentInterestRequestDto;
    fine?: ApiPaymentFineRequestDto;
    cycle: ApiSubscriptionSaveWithCreditCardRequestCycle;
    /**
     * Subscription description (max. 500 characters)
     */
    description?: string;
    /**
     * Deadline for payments to be due
     */
    endDate?: Date;
    /**
     * Maximum number of payments to be generated for this subscription
     */
    maxPayments?: number;
    /**
     * Subscription identifier on your system
     */
    externalReference?: string;
    /**
     * Split information
     */
    split?: Array<ApiSubscriptionSplitRequestDto>;
    callback?: ApiPaymentCallbackRequestDto;
    creditCard?: ApiCreditCardRequestDto;
    creditCardHolderInfo?: ApiCreditCardHolderInfoRequestDto;
    /**
     * Credit card token for using the credit card tokenization functionality. If informed, the fields above are not mandatory.
     */
    creditCardToken?: string;
    /**
     * IP from where the customer is making the purchase. Your server's IP must not be entered.
     */
    remoteIp: string;
  };
  path?: never;
  query?: never;
  url: "/v3/subscriptions/";
};

export type CreateSubscriptionWithCreditCardErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateSubscriptionWithCreditCardResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Unique subscription identifier in Asaas
     */
    id?: string;
    /**
     * Subscription creation date
     */
    dateCreated?: Date;
    /**
     * Unique customer identifier
     */
    customer?: string;
    /**
     * Unique identifier of the payments link to which the subscription belongs
     */
    paymentLink?: string;
    billingType?: ApiSubscriptionSaveWithCreditCardResponseBillingType;
    cycle?: ApiSubscriptionSaveWithCreditCardResponseCycle;
    /**
     * Subscription value
     */
    value?: number;
    /**
     * Due date of the next payment to be generated
     */
    nextDueDate?: Date;
    /**
     * Deadline for payments to be due
     */
    endDate?: Date;
    /**
     * Subscription description
     */
    description?: string;
    status?: ApiSubscriptionSaveWithCreditCardResponseSubscriptionStatus;
    discount?: ApiPaymentDiscountDto;
    fine?: ApiPaymentFineResponseDto;
    interest?: ApiPaymentInterestResponseDto;
    /**
     * Informs if the subscription has been removed
     */
    deleted?: boolean;
    /**
     * Maximum number of payments to be generated for this subscription
     */
    maxPayments?: number;
    /**
     * Subscription identifier on your system
     */
    externalReference?: string;
    /**
     * Split information
     */
    split?: Array<ApiSubscriptionSplitResponseDto>;
    creditCard?: ApiPaymentSaveWithCreditCardCreditCardDto;
  };
};

export type CreateSubscriptionWithCreditCardResponse =
  CreateSubscriptionWithCreditCardResponses[keyof CreateSubscriptionWithCreditCardResponses];

export type RemoveSubscriptionData = {
  body?: never;
  path: {
    /**
     * Unique subscription identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/subscriptions/{id}";
};

export type RemoveSubscriptionErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RemoveSubscriptionResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Informs if the subscription has been removed
     */
    deleted?: boolean;
    /**
     * Unique subscription identifier in Asaas
     */
    id?: string;
  };
};

export type RemoveSubscriptionResponse =
  RemoveSubscriptionResponses[keyof RemoveSubscriptionResponses];

export type RetrieveASingleSubscriptionData = {
  body?: never;
  path: {
    /**
     * Unique subscription identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/subscriptions/{id}";
};

export type RetrieveASingleSubscriptionErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrieveASingleSubscriptionResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Unique subscription identifier in Asaas
     */
    id?: string;
    /**
     * Subscription creation date
     */
    dateCreated?: Date;
    /**
     * Unique customer identifier
     */
    customer?: string;
    /**
     * Unique identifier of the payments link to which the subscription belongs
     */
    paymentLink?: string;
    billingType?: ApiSubscriptionGetResponseBillingType;
    cycle?: ApiSubscriptionGetResponseCycle;
    /**
     * Subscription value
     */
    value?: number;
    /**
     * Due date of the next payment to be generated
     */
    nextDueDate?: Date;
    /**
     * Deadline for payments to be due
     */
    endDate?: Date;
    /**
     * Subscription description
     */
    description?: string;
    status?: ApiSubscriptionGetResponseSubscriptionStatus;
    discount?: ApiPaymentDiscountDto;
    fine?: ApiPaymentFineResponseDto;
    interest?: ApiPaymentInterestResponseDto;
    /**
     * Informs if the subscription has been removed
     */
    deleted?: boolean;
    /**
     * Maximum number of payments to be generated for this subscription
     */
    maxPayments?: number;
    /**
     * Subscription identifier on your system
     */
    externalReference?: string;
    /**
     * Split information
     */
    split?: Array<{
      /**
       * Asaas wallet identifier that will be transferred
       */
      walletId?: string;
      /**
       * Fixed amount to be transferred to the account when the payment is received
       */
      fixedValue?: number;
      /**
       * Percentage of the net value of the charge to be transferred when received
       */
      percentualValue?: number;
      /**
       * Split identifier in your system
       */
      externalReference?: string;
      /**
       * Split description
       */
      description?: string;
      status?: ApiSubscriptionSplitResponseSubscriptionSplitStatus;
      disabledReason?: ApiSubscriptionSplitResponseSubscriptionSplitDisabledReason;
    }>;
  };
};

export type RetrieveASingleSubscriptionResponse =
  RetrieveASingleSubscriptionResponses[keyof RetrieveASingleSubscriptionResponses];

export type UpdateExistingSubscriptionData = {
  body?: {
    billingType?: ApiSubscriptionUpdateRequestBillingType;
    status?: ApiSubscriptionUpdateRequestSubscriptionStatus;
    /**
     * First payment due
     */
    nextDueDate?: Date;
    discount?: ApiPaymentDiscountDto;
    interest?: ApiPaymentInterestRequestDto;
    fine?: ApiPaymentFineRequestDto;
    cycle?: ApiSubscriptionUpdateRequestCycle;
    /**
     * Subscription description (max. 500 characters)
     */
    description?: string;
    /**
     * Deadline for payments to be due
     */
    endDate?: Date;
    /**
     * true to update the possible properties of already existing pending payments
     */
    updatePendingPayments?: boolean;
    /**
     * Subscription identifier on your system
     */
    externalReference?: string;
    /**
     * Split information
     */
    split?: Array<ApiSubscriptionSplitRequestDto>;
    callback?: ApiPaymentCallbackRequestDto;
  };
  path: {
    /**
     * Unique subscription identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/subscriptions/{id}";
};

export type UpdateExistingSubscriptionErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type UpdateExistingSubscriptionResponses = {
  /**
   * OK
   */
  200: ApiSubscriptionGetResponseDto;
};

export type UpdateExistingSubscriptionResponse =
  UpdateExistingSubscriptionResponses[keyof UpdateExistingSubscriptionResponses];

export type ListPaymentsOfASubscriptionData = {
  body?: never;
  path: {
    /**
     * Unique subscription identifier in Asaas
     */
    id: string;
  };
  query?: {
    /**
     * Filter by payment status
     */
    status?: ApiSubscriptionListPaymentsRequestPaymentStatus;
  };
  url: "/v3/subscriptions/{id}/payments";
};

export type ListPaymentsOfASubscriptionErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type ListPaymentsOfASubscriptionResponses = {
  /**
   * OK
   */
  200: ApiPaymentListResponseDto;
};

export type ListPaymentsOfASubscriptionResponse =
  ListPaymentsOfASubscriptionResponses[keyof ListPaymentsOfASubscriptionResponses];

export type GenerateSignatureBookletData = {
  body?: never;
  path: {
    /**
     * Unique subscription identifier in Asaas
     */
    id: string;
  };
  query: {
    /**
     * Final month for generating the booklet
     */
    month: number;
    /**
     * Final year for generating the booklet
     */
    year: number;
    /**
     * Filter by column name
     */
    sort?: string;
    /**
     * Column ordering
     */
    order?: string;
  };
  url: "/v3/subscriptions/{id}/paymentBook";
};

export type GenerateSignatureBookletErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type GenerateSignatureBookletResponses = {
  /**
   * OK
   */
  200: {
    [key: string]: unknown;
  };
};

export type GenerateSignatureBookletResponse =
  GenerateSignatureBookletResponses[keyof GenerateSignatureBookletResponses];

export type RemoveConfigurationForIssuanceOfInvoicesData = {
  body?: never;
  path: {
    /**
     * Unique subscription identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/subscriptions/{id}/invoiceSettings";
};

export type RemoveConfigurationForIssuanceOfInvoicesErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RemoveConfigurationForIssuanceOfInvoicesResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Informs if configurations have been removed
     */
    deleted?: boolean;
    /**
     * Unique subscription identifier in Asaas
     */
    id?: string;
  };
};

export type RemoveConfigurationForIssuanceOfInvoicesResponse =
  RemoveConfigurationForIssuanceOfInvoicesResponses[keyof RemoveConfigurationForIssuanceOfInvoicesResponses];

export type RetrieveConfigurationForIssuanceOfInvoicesData = {
  body?: never;
  path: {
    /**
     * Unique subscription identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/subscriptions/{id}/invoiceSettings";
};

export type RetrieveConfigurationForIssuanceOfInvoicesErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrieveConfigurationForIssuanceOfInvoicesResponses = {
  /**
   * OK
   */
  200: ApiSubscriptionInvoiceConfigGetResponseDto;
};

export type RetrieveConfigurationForIssuanceOfInvoicesResponse =
  RetrieveConfigurationForIssuanceOfInvoicesResponses[keyof RetrieveConfigurationForIssuanceOfInvoicesResponses];

export type CreateConfigurationForIssuanceOfInvoicesData = {
  body?: {
    /**
     * Unique municipal service identifier
     */
    municipalServiceId?: string;
    /**
     * Municipal Service Code
     */
    municipalServiceCode?: string;
    /**
     * Name of municipal service
     */
    municipalServiceName?: string;
    /**
     * Update the Payment amount with the invoice taxes already deducted.
     */
    updatePayment?: boolean;
    /**
     * Deductions. Deductions do not change the total value of the invoice, but they do change the ISS calculation basis.
     */
    deductions?: number;
    /**
     * When the invoice will be issued
     */
    effectiveDatePeriod?:
      | "ON_PAYMENT_CONFIRMATION"
      | "ON_PAYMENT_DUE_DATE"
      | "BEFORE_PAYMENT_DUE_DATE"
      | "ON_DUE_DATE_MONTH"
      | "ON_NEXT_MONTH";
    /**
     * Issue only for paid charges
     */
    receivedOnly?: boolean;
    /**
     * Number of days before billing due date
     */
    daysBeforeDueDate?: number;
    /**
     * Additional notes on the invoice
     */
    observations?: string;
    taxes?: ApiCustomerInvoiceTaxesDto;
  };
  path: {
    /**
     * Unique subscription identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/subscriptions/{id}/invoiceSettings";
};

export type CreateConfigurationForIssuanceOfInvoicesErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type CreateConfigurationForIssuanceOfInvoicesResponses = {
  /**
   * OK
   */
  200: ApiSubscriptionInvoiceConfigGetResponseDto;
};

export type CreateConfigurationForIssuanceOfInvoicesResponse =
  CreateConfigurationForIssuanceOfInvoicesResponses[keyof CreateConfigurationForIssuanceOfInvoicesResponses];

export type UpdateConfigurationForIssuanceOfInvoicesData = {
  body?: {
    /**
     * Deductions. Deductions do not change the total value of the invoice, but they do change the ISS calculation basis.
     */
    deductions?: number;
    /**
     * When the invoice will be issued
     */
    effectiveDatePeriod?:
      | "ON_PAYMENT_CONFIRMATION"
      | "ON_PAYMENT_DUE_DATE"
      | "BEFORE_PAYMENT_DUE_DATE"
      | "ON_DUE_DATE_MONTH"
      | "ON_NEXT_MONTH";
    /**
     * Issue only for paid charges
     */
    receivedOnly?: boolean;
    /**
     * Number of days before billing due date
     */
    daysBeforeDueDate?: number;
    /**
     * Additional notes on the invoice
     */
    observations?: string;
    taxes?: ApiCustomerInvoiceTaxesDto;
  };
  path: {
    /**
     * Unique subscription identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/subscriptions/{id}/invoiceSettings";
};

export type UpdateConfigurationForIssuanceOfInvoicesErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type UpdateConfigurationForIssuanceOfInvoicesResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Unique municipal service identifier
     */
    municipalServiceId?: string;
    /**
     * Municipal Service Code
     */
    municipalServiceCode?: string;
    /**
     * Name of municipal service
     */
    municipalServiceName?: string;
    /**
     * Deductions. Deductions do not change the total value of the invoice, but they do change the ISS calculation basis.
     */
    deductions?: number;
    /**
     * When the invoice will be issued
     */
    invoiceCreationPeriod?:
      | "ON_PAYMENT_CONFIRMATION"
      | "ON_PAYMENT_DUE_DATE"
      | "BEFORE_PAYMENT_DUE_DATE"
      | "ON_DUE_DATE_MONTH"
      | "ON_NEXT_MONTH";
    /**
     * Number of days before billing due date
     */
    daysBeforeDueDate?: number;
    /**
     * Issue only for paid charges
     */
    receivedOnly?: boolean;
    /**
     * Additional notes on the invoice
     */
    observations?: string;
    taxes?: ApiCustomerInvoiceTaxesDto;
  };
};

export type UpdateConfigurationForIssuanceOfInvoicesResponse =
  UpdateConfigurationForIssuanceOfInvoicesResponses[keyof UpdateConfigurationForIssuanceOfInvoicesResponses];

export type ListInvoicesForSubscriptionChargesData = {
  body?: never;
  path: {
    /**
     * Unique subscription identifier in Asaas
     */
    id: string;
  };
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
    /**
     * Filter from an issue date
     */
    "effectiveDate[ge]"?: string;
    /**
     * Filter until an issue date
     */
    "effectiveDate[le]"?: string;
    /**
     * Filter by invoice identifier in your system
     */
    externalReference?: string;
    /**
     * Filter by invoice status
     */
    status?: ApiSubscriptionGetInvoicesRequestInvoiceStatus;
    /**
     * Filter by unique customer identifier
     */
    customer?: string;
  };
  url: "/v3/subscriptions/{id}/invoices";
};

export type ListInvoicesForSubscriptionChargesErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type ListInvoicesForSubscriptionChargesResponses = {
  /**
   * OK
   */
  200: ApiCustomerInvoiceListResponseDto;
};

export type ListInvoicesForSubscriptionChargesResponse =
  ListInvoicesForSubscriptionChargesResponses[keyof ListInvoicesForSubscriptionChargesResponses];

export type ListKeysData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
    /**
     * Filter by current key status
     */
    status?: ApiPixAddressKeyListRequestPixAddressKeyStatus;
    /**
     * Filter by one or more key statuses
     */
    statusList?: string;
  };
  url: "/v3/pix/addressKeys";
};

export type ListKeysErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type ListKeysResponses = {
  /**
   * OK
   */
  200: {
    /**
     * List of objects
     */
    data?: Array<ApiPixAddressKeyGetResponseDto>;
  };
};

export type ListKeysResponse = ListKeysResponses[keyof ListKeysResponses];

export type CreateAKeyData = {
  body?: {
    type: ApiPixAddressKeySaveRequestPixAddressKeyType;
  };
  path?: never;
  query?: never;
  url: "/v3/pix/addressKeys";
};

export type CreateAKeyErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateAKeyResponses = {
  /**
   * OK
   */
  200: ApiPixAddressKeyGetResponseDto;
};

export type CreateAKeyResponse = CreateAKeyResponses[keyof CreateAKeyResponses];

export type RemoveKeyData = {
  body?: never;
  path: {
    /**
     * Unique Pix key identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/pix/addressKeys/{id}";
};

export type RemoveKeyErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RemoveKeyResponses = {
  /**
   * OK
   */
  200: ApiPixAddressKeyGetResponseDto;
};

export type RemoveKeyResponse = RemoveKeyResponses[keyof RemoveKeyResponses];

export type RetrieveASingleKeyData = {
  body?: never;
  path: {
    /**
     * Unique Pix key identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/pix/addressKeys/{id}";
};

export type RetrieveASingleKeyErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrieveASingleKeyResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Unique Pix key identifier in Asaas
     */
    id?: string;
    /**
     * Key value
     */
    key?: string;
    type?: ApiPixAddressKeyGetResponsePixAddressKeyType;
    status?: ApiPixAddressKeyGetResponsePixAddressKeyStatus;
    /**
     * Key creation date
     */
    dateCreated?: Date;
    /**
     * Determines whether the key can be deleted
     */
    canBeDeleted?: boolean;
    /**
     * Reason it cannot be removed
     */
    cannotBeDeletedReason?: string;
    qrCode?: ApiPixAddressKeyQrCodeGetResponseDto;
  };
};

export type RetrieveASingleKeyResponse =
  RetrieveASingleKeyResponses[keyof RetrieveASingleKeyResponses];

export type CreateStaticQrcodeData = {
  body?: {
    /**
     * Key that will receive QrCode payments
     */
    addressKey?: string;
    /**
     * QrCode Description
     */
    description?: string;
    /**
     * Value of the QrCode, if not informed, the payer can choose the value
     */
    value?: number;
    /**
     * QrCode Format
     */
    format?: "ALL" | "IMAGE" | "PAYLOAD";
    /**
     * QrCode expiration date/time, after this date all payments will be refused.
     */
    expirationDate?: Date;
    /**
     * Determines the expiration date in seconds.
     */
    expirationSeconds?: number;
    /**
     * Defines whether the QrCode can be paid multiple times, if not entered the default value is true.
     */
    allowsMultiplePayments?: boolean;
    /**
     * Free search field
     */
    externalReference?: string;
  };
  path?: never;
  query?: never;
  url: "/v3/pix/qrCodes/static";
};

export type CreateStaticQrcodeErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateStaticQrcodeResponses = {
  /**
   * OK
   */
  200: {
    /**
     * qrCode image in base64
     */
    id?: string;
    /**
     * QrCode identifier
     */
    encodedImage?: string;
    /**
     * Copy and Paste the QrCode
     */
    payload?: string;
    /**
     * Indicates whether multiple payments are allowed
     */
    allowsMultiplePayments?: boolean;
    /**
     * QrCode expiration date/time, after this date all payments will be refused
     */
    expirationDate?: Date;
    /**
     * Free search field
     */
    externalReference?: string;
  };
};

export type CreateStaticQrcodeResponse =
  CreateStaticQrcodeResponses[keyof CreateStaticQrcodeResponses];

export type DeleteStaticQrcodeData = {
  body?: never;
  path: {
    /**
     * Identifier of the QR Code that will be deleted.
     */
    id: string;
  };
  query?: never;
  url: "/v3/pix/qrCodes/static/{id}";
};

export type DeleteStaticQrcodeErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type DeleteStaticQrcodeResponses = {
  /**
   * OK
   */
  200: {
    /**
     * QR Code identifier
     */
    id?: string;
    /**
     * Indicates whether the QR Code has been removed
     */
    deleted?: boolean;
  };
};

export type DeleteStaticQrcodeResponse =
  DeleteStaticQrcodeResponses[keyof DeleteStaticQrcodeResponses];

export type PayAQrcodeData = {
  body?: {
    qrCode: ApiPixTransactionQrCodeSaveRequestDto;
    /**
     * Value to be paid
     */
    value: number;
    /**
     * Payment Description
     */
    description?: string;
    /**
     * Used to schedule payment
     */
    scheduleDate?: Date;
  };
  path?: never;
  query?: never;
  url: "/v3/pix/qrCodes/pay";
};

export type PayAQrcodeErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type PayAQrcodeResponses = {
  /**
   * OK
   */
  200: ApiPixTransactionGetResponseDto;
};

export type PayAQrcodeResponse = PayAQrcodeResponses[keyof PayAQrcodeResponses];

export type DecodeAQrcodeForPaymentData = {
  body?: {
    /**
     * QRCode payload
     */
    payload: string;
    /**
     * Change amount (for QRCode Change)
     */
    changeValue?: number;
  };
  path?: never;
  query?: never;
  url: "/v3/pix/qrCodes/decode";
};

export type DecodeAQrcodeForPaymentErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type DecodeAQrcodeForPaymentResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Copy and Paste of the QRCode
     */
    payload?: string;
    type?: ApiPixQrCodeDecodeResponsePixQrCodeType;
    transactionOriginType?: ApiPixQrCodeDecodeResponsePixTransactionOriginType;
    /**
     * Pix key used
     */
    pixKey?: string;
    /**
     * Unique Pix reconciliation identifier with Asaas
     */
    conciliationIdentifier?: string;
    /**
     * Unique identifier of the Pix transaction at the Banco Central
     */
    endToEndIdentifier?: string;
    /**
     * Due date
     */
    dueDate?: Date;
    /**
     * Expiration date
     */
    expirationDate?: Date;
    finality?: ApiPixQrCodeDecodeResponsePixTransactionCashValueFinality;
    /**
     * QRCode Value
     */
    value?: number;
    /**
     * Change value
     */
    changeValue?: number;
    /**
     * Interest value
     */
    interest?: number;
    /**
     * Fine value
     */
    fine?: number;
    /**
     * Discount value
     */
    discount?: number;
    /**
     * Total amount with fine, interest and discount applied
     */
    totalValue?: number;
    /**
     * Informs if the QRCode can be paid with another amount
     */
    canBePaidWithDifferentValue?: boolean;
    /**
     * Informs whether the change can be paid with another amount
     */
    canBeModifyChangeValue?: boolean;
    receiver?: ApiPixQrCodeDecodeReceiverDto;
    payer?: ApiPixTransactionQrCodePayerResponseDto;
    /**
     * Description provided during the creation of the QRCode
     */
    description?: string;
    /**
     * Informs if the QRCode can be paid
     */
    canBePaid?: boolean;
    /**
     * Informs why QRCode cannot be paid
     */
    cannotBePaidReason?: string;
  };
};

export type DecodeAQrcodeForPaymentResponse =
  DecodeAQrcodeForPaymentResponses[keyof DecodeAQrcodeForPaymentResponses];

export type RetrieveASingleTransactionData = {
  body?: never;
  path: {
    /**
     * Unique identifier of the Pix transaction in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/pix/transactions/{id}";
};

export type RetrieveASingleTransactionErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrieveASingleTransactionResponses = {
  /**
   * OK
   */
  200: ApiPixTransactionGetResponseDto;
};

export type RetrieveASingleTransactionResponse =
  RetrieveASingleTransactionResponses[keyof RetrieveASingleTransactionResponses];

export type RetrieveASingleAnticipationData = {
  body?: never;
  path: {
    /**
     * Unique identifier of anticipation in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/anticipations/{id}";
};

export type RetrieveASingleAnticipationErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrieveASingleAnticipationResponses = {
  /**
   * OK
   */
  200: ApiReceivableAnticipationGetResponseDto;
};

export type RetrieveASingleAnticipationResponse =
  RetrieveASingleAnticipationResponses[keyof RetrieveASingleAnticipationResponses];

export type ListTransactionsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
    /**
     * Filter by transaction status
     */
    status?: ApiPixTransactionListRequestPixTransactionStatus;
    /**
     * Filter by transaction type
     */
    type?: ApiPixTransactionListRequestPixTransactionType;
    /**
     * Filter by Pix transaction identifier at the Central Bank
     */
    endToEndIdentifier?: string;
  };
  url: "/v3/pix/transactions";
};

export type ListTransactionsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type ListTransactionsResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<ApiPixTransactionGetResponseDto>;
  };
};

export type ListTransactionsResponse =
  ListTransactionsResponses[keyof ListTransactionsResponses];

export type CancelAScheduledTransactionData = {
  body?: {
    [key: string]: unknown;
  };
  path: {
    /**
     * Unique identifier of the Pix transaction scheduled to be canceled.
     */
    id: string;
  };
  query?: never;
  url: "/v3/pix/transactions/{id}/cancel";
};

export type CancelAScheduledTransactionErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type CancelAScheduledTransactionResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Unique identifier of the Pix transaction in Asaas
     */
    id?: string;
    /**
     * Pix transaction identifier at the Central Bank
     */
    endToEndIdentifier?: string;
    finality?: ApiPixTransactionGetResponsePixTransactionCashValueFinality;
    /**
     * Transaction or Withdrawal Value
     */
    value?: number;
    /**
     * Change value
     */
    changeValue?: number;
    /**
     * Value reversed
     */
    refundedValue?: number;
    /**
     * Transaction date
     */
    effectiveDate?: Date;
    /**
     * Schedule date
     */
    scheduledDate?: Date;
    status?: ApiPixTransactionGetResponsePixTransactionStatus;
    type?: ApiPixTransactionGetResponsePixTransactionType;
    originType?: ApiPixTransactionGetResponsePixTransactionOriginType;
    /**
     * QrCode identifier linked to the transaction
     */
    conciliationIdentifier?: string;
    /**
     * Description about the transaction
     */
    description?: string;
    /**
     * Proof of transaction will be available after the transaction is confirmed.
     */
    transactionReceiptUrl?: string;
    /**
     * Reason why the transaction was declined
     */
    refusalReason?: string;
    /**
     * Indicates whether the transaction can be canceled
     */
    canBeCanceled?: boolean;
    originalTransaction?: ApiPixOriginalTransactionResponseDto;
    externalAccount?: ApiPixTransactionExternalAccountResponseDto;
    qrCode?: ApiPixTransactionQrCodeResponseDto;
    /**
     * Unique billing identifier
     */
    payment?: string;
    /**
     * Indicates whether the transaction can be refunded
     */
    canBeRefunded?: boolean;
    /**
     * Reason why the chargeback was disabled
     */
    refundDisabledReason?: string;
    /**
     * Debit or credit fee for the transaction
     */
    chargedFeeValue?: number;
    /**
     * Transaction creation date
     */
    dateCreated?: Date;
    /**
     * Pix key when the transaction is a credit
     */
    addressKey?: string;
    addressKeyType?: ApiPixTransactionGetResponsePixAddressKeyType;
    /**
     * Transfer identifier
     */
    transferId?: string;
    /**
     * Free search field
     */
    externalReference?: string;
  };
};

export type CancelAScheduledTransactionResponse =
  CancelAScheduledTransactionResponses[keyof CancelAScheduledTransactionResponses];

export type ListRecurrencesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
    /**
     * Filter by recurrence status
     */
    status?: ApiPixTransactionRecurringCheckoutScheduleListRequestRecurringCheckoutScheduleStatus;
    /**
     * Filter by recurrence value
     */
    value?: number;
    /**
     * Filter by receiver name
     */
    searchText?: string;
  };
  url: "/v3/pix/transactions/recurrings";
};

export type ListRecurrencesErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type ListRecurrencesResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<ApiPixTransactionRecurringCheckoutScheduleGetResponseDto>;
  };
};

export type ListRecurrencesResponse =
  ListRecurrencesResponses[keyof ListRecurrencesResponses];

export type RetrieveASingleRecurrenceData = {
  body?: never;
  path: {
    /**
     * Unique recurrence identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/pix/transactions/recurrings/{id}";
};

export type RetrieveASingleRecurrenceErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrieveASingleRecurrenceResponses = {
  /**
   * OK
   */
  200: ApiPixTransactionRecurringCheckoutScheduleGetResponseDto;
};

export type RetrieveASingleRecurrenceResponse =
  RetrieveASingleRecurrenceResponses[keyof RetrieveASingleRecurrenceResponses];

export type CancelARecurrenceData = {
  body?: {
    [key: string]: unknown;
  };
  path: {
    /**
     * Unique recurrence identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/pix/transactions/recurrings/{id}/cancel";
};

export type CancelARecurrenceErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type CancelARecurrenceResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Unique recurrence identifier in Asaas
     */
    id?: string;
    status?: ApiPixTransactionRecurringCheckoutScheduleGetResponseRecurringCheckoutScheduleStatus;
    origin?: ApiPixTransactionRecurringCheckoutScheduleGetResponseRecurringCheckoutScheduleOrigin;
    /**
     * Recurrence value
     */
    value?: number;
    frequency?: ApiPixTransactionRecurringCheckoutScheduleGetResponseRecurringCheckoutScheduleFrequency;
    /**
     * Number of repetitions
     */
    quantity?: number;
    /**
     * Recurrence start date
     */
    startDate?: Date;
    /**
     * Recurrence finish date
     */
    finishDate?: Date;
    /**
     * Whether the recurrence can be cancelled
     */
    canBeCancelled?: boolean;
    externalAccount?: ApiPixTransactionRecurringCheckoutScheduleExternalAccountDto;
  };
};

export type CancelARecurrenceResponse =
  CancelARecurrenceResponses[keyof CancelARecurrenceResponses];

export type ListRecurrenceItemsData = {
  body?: never;
  path: {
    /**
     * Unique recurrence identifier in Asaas
     */
    id: string;
  };
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
  };
  url: "/v3/pix/transactions/recurrings/{id}/items";
};

export type ListRecurrenceItemsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type ListRecurrenceItemsResponses = {
  /**
   * OK
   */
  200: {
    /**
     * List starting element
     */
    offset?: bigint;
    /**
     * Number of list elements (max: 100)
     */
    limit?: bigint;
    /**
     * List of objects
     */
    data?: Array<ApiPixTransactionRecurringCheckoutScheduleGetItemResponseDto>;
  };
};

export type ListRecurrenceItemsResponse =
  ListRecurrenceItemsResponses[keyof ListRecurrenceItemsResponses];

export type CancelARecurrenceItemData = {
  body?: {
    [key: string]: unknown;
  };
  path: {
    /**
     * Unique recurrence item identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/pix/transactions/recurrings/items/{id}/cancel";
};

export type CancelARecurrenceItemErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type CancelARecurrenceItemResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Unique recurrence item identifier in Asaas
     */
    id?: string;
    status?: ApiPixTransactionRecurringCheckoutScheduleGetItemResponseRecurringCheckoutSchedulePixItemStatus;
    /**
     * Recurrence item scheduled date
     */
    scheduledDate?: Date;
    /**
     * Whether the recurrence item can be cancelled
     */
    canBeCancelled?: boolean;
    /**
     * Recurrence number
     */
    recurrenceNumber?: number;
    /**
     * Number of repetitions
     */
    quantity?: number;
    /**
     * Recurrence value
     */
    value?: number;
    /**
     * Recurrence item refusal reason
     */
    refusalReasonDescription?: string;
    externalAccount?: ApiPixTransactionRecurringCheckoutScheduleExternalAccountDto;
  };
};

export type CancelARecurrenceItemResponse =
  CancelARecurrenceItemResponses[keyof CancelARecurrenceItemResponses];

export type ListPaymentsLinksData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
    /**
     * Filter by activated or deactivated payment link
     */
    active?: boolean;
    /**
     * True to also retrieve removed payment links
     */
    includeDeleted?: boolean;
    /**
     * Filter by payments link name
     */
    name?: string;
    /**
     * Filter by your system identifier
     */
    externalReference?: string;
  };
  url: "/v3/paymentLinks";
};

export type ListPaymentsLinksErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type ListPaymentsLinksResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<ApiPaymentCampaignGetResponseDto>;
  };
};

export type ListPaymentsLinksResponse =
  ListPaymentsLinksResponses[keyof ListPaymentsLinksResponses];

export type CreateAPaymentsLinkData = {
  body?: {
    /**
     * Payment link name
     */
    name: string;
    /**
     * Payments link description
     */
    description?: string;
    /**
     * End date
     */
    endDate?: string;
    /**
     * Value of the payment link, if not informed, the payer can inform how much they want to pay
     */
    value?: number;
    billingType: ApiPaymentCampaignSaveRequestBillingType;
    chargeType: ApiPaymentCampaignSaveRequestChargeType;
    /**
     * Number of business days that your customer can pay after the invoice is generated (For payment method such as Boleto)
     */
    dueDateLimitDays?: number;
    subscriptionCycle?: ApiPaymentCampaignSaveRequestCycle;
    /**
     * Maximum number of installments that your customer can pay in installments for the payment link if the billing method selected is Installments. If not informed, the default value will be 1 installment
     */
    maxInstallmentCount?: number;
    /**
     * Free search field.
     */
    externalReference?: string;
    /**
     * Defines whether customers registered via the payments link will have notifications enabled. If not informed, the default value will be true
     */
    notificationEnabled?: boolean;
    callback?: ApiPaymentCallbackRequestDto;
    /**
     * True to make it mandatory to fill in address data at checkout.
     */
    isAddressRequired?: boolean;
  };
  path?: never;
  query?: never;
  url: "/v3/paymentLinks";
};

export type CreateAPaymentsLinkErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateAPaymentsLinkResponses = {
  /**
   * OK
   */
  200: ApiPaymentCampaignGetResponseDto;
};

export type CreateAPaymentsLinkResponse =
  CreateAPaymentsLinkResponses[keyof CreateAPaymentsLinkResponses];

export type RemoveAPaymentsLinkData = {
  body?: never;
  path: {
    /**
     * Unique identifier for your payments link in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/paymentLinks/{id}";
};

export type RemoveAPaymentsLinkErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RemoveAPaymentsLinkResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Indicates whether the payment link has been removed
     */
    deleted?: boolean;
    /**
     * Unique identifier for your payments link in Asaas
     */
    id?: string;
  };
};

export type RemoveAPaymentsLinkResponse =
  RemoveAPaymentsLinkResponses[keyof RemoveAPaymentsLinkResponses];

export type RetrieveASinglePaymentsLinkData = {
  body?: never;
  path: {
    /**
     * Unique identifier for your payments link in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/paymentLinks/{id}";
};

export type RetrieveASinglePaymentsLinkErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrieveASinglePaymentsLinkResponses = {
  /**
   * OK
   */
  200: ApiPaymentCampaignGetResponseDto;
};

export type RetrieveASinglePaymentsLinkResponse =
  RetrieveASinglePaymentsLinkResponses[keyof RetrieveASinglePaymentsLinkResponses];

export type UpdateAPaymentsLinkData = {
  body?: {
    /**
     * Payment link name
     */
    name?: string;
    /**
     * Payments link description
     */
    description?: string;
    /**
     * End date
     */
    endDate?: string;
    /**
     * Value of the payment link, if not informed, the payer can inform how much they want to pay
     */
    value?: number;
    /**
     * Determines whether the payments link is active
     */
    active?: boolean;
    billingType?: ApiPaymentCampaignUpdateRequestBillingType;
    chargeType?: ApiPaymentCampaignUpdateRequestChargeType;
    /**
     * Number of business days that your customer can pay after the invoice is generated (For payment method such as Boleto)
     */
    dueDateLimitDays?: number;
    subscriptionCycle?: ApiPaymentCampaignUpdateRequestCycle;
    /**
     * Maximum number of installments that your customer can pay in installments for the payment link if the billing method selected is Installments. If not informed, the default value will be 1 installment
     */
    maxInstallmentCount?: number;
    /**
     * Free search field.
     */
    externalReference?: string;
    /**
     * Defines whether customers registered via the payments link will have notifications enabled. If not informed, the default value will be true
     */
    notificationEnabled?: boolean;
    callback?: ApiPaymentCallbackRequestDto;
  };
  path: {
    /**
     * Unique identifier for your payments link in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/paymentLinks/{id}";
};

export type UpdateAPaymentsLinkErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type UpdateAPaymentsLinkResponses = {
  /**
   * OK
   */
  200: ApiPaymentCampaignGetResponseDto;
};

export type UpdateAPaymentsLinkResponse =
  UpdateAPaymentsLinkResponses[keyof UpdateAPaymentsLinkResponses];

export type RestoreAPaymentsLinkData = {
  body?: {
    [key: string]: unknown;
  };
  path: {
    /**
     * Unique identifier for your payments link in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/paymentLinks/{id}/restore";
};

export type RestoreAPaymentsLinkErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RestoreAPaymentsLinkResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Unique identifier for your payments link in Asaas
     */
    id?: string;
    /**
     * Payment link name
     */
    name?: string;
    /**
     * Value of the payment link, if not informed, the payer can inform how much they want to pay
     */
    value?: number;
    /**
     * If the payments link is active
     */
    active?: boolean;
    chargeType?: ApiPaymentCampaignGetResponseChargeType;
    /**
     * Payments link access link
     */
    url?: string;
    billingType?: ApiPaymentCampaignGetResponseBillingType;
    subscriptionCycle?: ApiPaymentCampaignGetResponseCycle;
    /**
     * Payments link description
     */
    description?: string;
    /**
     * End date
     */
    endDate?: Date;
    /**
     * Indicates whether the payment link has been removed
     */
    deleted?: boolean;
    /**
     * The number of views of your payments link
     */
    viewCount?: number;
    /**
     * Maximum number of installments that your customer can pay in installments for the payment link, if it is Installment.
     */
    maxInstallmentCount?: number;
    /**
     * Number of business days that your customer can pay after the invoice is generated (For payment method such as Boleto)
     */
    dueDateLimitDays?: number;
    /**
     * Defines whether customers registered via the payments link will have notifications enabled
     */
    notificationEnabled?: boolean;
    /**
     * Defines whether filling in the address will be obligatory in the charges.
     */
    isAddressRequired?: boolean;
    /**
     * Free search field.
     */
    externalReference?: string;
  };
};

export type RestoreAPaymentsLinkResponse =
  RestoreAPaymentsLinkResponses[keyof RestoreAPaymentsLinkResponses];

export type ListImagesFromAPaymentsLinkData = {
  body?: never;
  path: {
    /**
     * Unique identifier for your payments link in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/paymentLinks/{id}/images";
};

export type ListImagesFromAPaymentsLinkErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type ListImagesFromAPaymentsLinkResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<ApiPaymentCampaignFileGetResponseDto>;
  };
};

export type ListImagesFromAPaymentsLinkResponse =
  ListImagesFromAPaymentsLinkResponses[keyof ListImagesFromAPaymentsLinkResponses];

export type AddAnImageToAPaymentsLinkData = {
  body?: {
    /**
     * true to set as the main image
     */
    main?: boolean;
    image?: File;
  };
  path: {
    /**
     * Unique identifier for your payments link in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/paymentLinks/{id}/images";
};

export type AddAnImageToAPaymentsLinkErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type AddAnImageToAPaymentsLinkResponses = {
  /**
   * OK
   */
  200: ApiPaymentCampaignFileGetResponseDto;
};

export type AddAnImageToAPaymentsLinkResponse =
  AddAnImageToAPaymentsLinkResponses[keyof AddAnImageToAPaymentsLinkResponses];

export type RemoveAnImageFromPaymentsLinkData = {
  body?: never;
  path: {
    /**
     * Unique identifier for your payments link in Asaas
     */
    paymentLinkId: string;
    /**
     * Unique payment link image identifier in Asaas
     */
    imageId: string;
  };
  query?: never;
  url: "/v3/paymentLinks/{paymentLinkId}/images/{imageId}";
};

export type RemoveAnImageFromPaymentsLinkErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RemoveAnImageFromPaymentsLinkResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Indicates whether the image was removed
     */
    deleted?: boolean;
    /**
     * Unique payment link image identifier in Asaas
     */
    id?: string;
  };
};

export type RemoveAnImageFromPaymentsLinkResponse =
  RemoveAnImageFromPaymentsLinkResponses[keyof RemoveAnImageFromPaymentsLinkResponses];

export type RetrieveASinglePaymentsLinkImageData = {
  body?: never;
  path: {
    /**
     * Unique identifier for your payments link in Asaas
     */
    paymentLinkId: string;
    /**
     * Unique payment link image identifier in Asaas
     */
    imageId: string;
  };
  query?: never;
  url: "/v3/paymentLinks/{paymentLinkId}/images/{imageId}";
};

export type RetrieveASinglePaymentsLinkImageErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrieveASinglePaymentsLinkImageResponses = {
  /**
   * OK
   */
  200: ApiPaymentCampaignFileGetResponseDto;
};

export type RetrieveASinglePaymentsLinkImageResponse =
  RetrieveASinglePaymentsLinkImageResponses[keyof RetrieveASinglePaymentsLinkImageResponses];

export type SetPaymentsLinkMainImageData = {
  body?: {
    [key: string]: unknown;
  };
  path: {
    /**
     * Unique identifier for your payments link in Asaas
     */
    paymentLinkId: string;
    /**
     * Unique payment link image identifier in Asaas
     */
    imageId: string;
  };
  query?: never;
  url: "/v3/paymentLinks/{paymentLinkId}/images/{imageId}/setAsMain";
};

export type SetPaymentsLinkMainImageErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type SetPaymentsLinkMainImageResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Unique payment link image identifier in Asaas
     */
    id?: string;
    /**
     * Determines if this is the main image
     */
    main?: boolean;
    image?: ApiPaymentCampaignFileImageResponseDto;
  };
};

export type SetPaymentsLinkMainImageResponse =
  SetPaymentsLinkMainImageResponses[keyof SetPaymentsLinkMainImageResponses];

export type ListTransfersData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Filter by initial creation date
     */
    "dateCreatedLe[ge]"?: string;
    /**
     * Filter by final creation date
     */
    "dateCreatedLe[le]"?: string;
    /**
     * Filter by the initial transfer effective date
     */
    "transferDate[ge]"?: string;
    /**
     * Filter by transfer end date
     */
    "transferDate[le]"?: string;
    /**
     * Filter by transfer type
     */
    type?: string;
  };
  url: "/v3/transfers";
};

export type ListTransfersErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type ListTransfersResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<ApiTransferGetResponseDto>;
  };
};

export type ListTransfersResponse =
  ListTransfersResponses[keyof ListTransfersResponses];

export type TransferToAnotherInstitutionAccountOrPixKeyData = {
  body?: {
    /**
     * Amount to be transferred
     */
    value: number;
    bankAccount?: ApiTransferBankAccountSaveRequestDto;
    operationType?: ApiTransferSaveRequestTransferType;
    /**
     * Enter the Pix key if it is a transfer to a Pix key
     */
    pixAddressKey?: string;
    pixAddressKeyType?: ApiTransferSaveRequestPixAddressKeyType;
    /**
     * Transfers via Pix allow description
     */
    description?: string;
    /**
     * For scheduled transfers, if not informed, payment is instantaneous
     */
    scheduleDate?: Date;
    /**
     * Transfer identifier in your system
     */
    externalReference?: string;
    recurring?: ApiTransferRecurringSaveRequestDto;
  };
  path?: never;
  query?: never;
  url: "/v3/transfers";
};

export type TransferToAnotherInstitutionAccountOrPixKeyErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type TransferToAnotherInstitutionAccountOrPixKeyResponses = {
  /**
   * OK
   */
  200: ApiTransferGetResponseDto;
};

export type TransferToAnotherInstitutionAccountOrPixKeyResponse =
  TransferToAnotherInstitutionAccountOrPixKeyResponses[keyof TransferToAnotherInstitutionAccountOrPixKeyResponses];

export type TransferToAsaasAccountData = {
  body?: {
    /**
     * Amount to be transferred
     */
    value: number;
    /**
     * WalletId of the target account
     */
    walletId: string;
    /**
     * Transfer identifier in your system
     */
    externalReference?: string;
  };
  path?: never;
  query?: never;
  url: "/v3/transfers/";
};

export type TransferToAsaasAccountErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type TransferToAsaasAccountResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Unique transfer identifier in Asaas
     */
    id?: string;
    /**
     * Type of transfer
     */
    type?: "PIX" | "TED" | "INTERNAL";
    /**
     * Transfer request date
     */
    dateCreated?: Date;
    /**
     * Transfer amount
     */
    value?: number;
    /**
     * Net value minus transfer fee
     */
    netValue?: number;
    status?: ApiTransferSaveInternalTransferResponseTransferStatus;
    /**
     * Transfer rate
     */
    transferFee?: number;
    /**
     * Effective date
     */
    effectiveDate?: Date;
    /**
     * Schedule date
     */
    scheduleDate?: Date;
    /**
     * Unique identifier of the Pix transaction at the Central Bank
     */
    endToEndIdentifier?: string;
    /**
     * `false` when awaiting authorization via SMS Token
     */
    authorized?: boolean;
    /**
     * Reason for transfer failure
     */
    failReason?: string;
    /**
     * Transfer identifier in your system
     */
    externalReference?: string;
    /**
     * Proof of transfer will be available after the transfer is confirmed
     */
    transactionReceiptUrl?: string;
    operationType?: ApiTransferSaveInternalTransferResponseTransferType;
    /**
     * Transfer description
     */
    description?: string;
    /**
     * Unique recurrence identifier in Asaas
     */
    recurring?: string;
    /**
     * Unique wallet identifier to split charges or transfer between Asaas accounts
     */
    walletId?: string;
    account?: ApiTransferSaveInternalTransferAccountDto;
  };
};

export type TransferToAsaasAccountResponse =
  TransferToAsaasAccountResponses[keyof TransferToAsaasAccountResponses];

export type RetrieveASingleTransferData = {
  body?: never;
  path: {
    /**
     * Unique transfer identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/transfers/{id}";
};

export type RetrieveASingleTransferErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrieveASingleTransferResponses = {
  /**
   * OK
   */
  200: ApiTransferGetResponseDto;
};

export type RetrieveASingleTransferResponse =
  RetrieveASingleTransferResponses[keyof RetrieveASingleTransferResponses];

export type CancelATransferData = {
  body?: never;
  path: {
    /**
     * Unique transfer identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/transfers/{id}/cancel";
};

export type CancelATransferErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type CancelATransferResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Unique transfer identifier in Asaas
     */
    id?: string;
    /**
     * Type of transfer
     */
    type?: "PIX" | "TED" | "INTERNAL";
    /**
     * Transfer request date
     */
    dateCreated?: Date;
    /**
     * Transfer amount
     */
    value?: number;
    /**
     * Net value minus transfer fee
     */
    netValue?: number;
    status?: ApiTransferGetResponseTransferStatus;
    /**
     * Transfer rate
     */
    transferFee?: number;
    /**
     * Effective date
     */
    effectiveDate?: Date;
    /**
     * Schedule date
     */
    scheduleDate?: Date;
    /**
     * Unique identifier of the Pix transaction at the Central Bank
     */
    endToEndIdentifier?: string;
    /**
     * `false` when awaiting authorization via SMS Token
     */
    authorized?: boolean;
    /**
     * Reason for transfer failure
     */
    failReason?: string;
    /**
     * Transfer identifier in your system
     */
    externalReference?: string;
    /**
     * Proof of transfer will be available after the transfer is confirmed
     */
    transactionReceiptUrl?: string;
    operationType?: ApiTransferGetResponseTransferType;
    /**
     * Transfer description
     */
    description?: string;
    /**
     * Unique recurrence identifier in Asaas
     */
    recurring?: string;
    bankAccount?: ApiTransferBankAccountGetResponseDto;
  };
};

export type CancelATransferResponse =
  CancelATransferResponses[keyof CancelATransferResponses];

export type ListAnticipationsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
    /**
     * Filter anticipations of a payment
     */
    payment?: string;
    /**
     * Filter advances for an installment payment
     */
    installment?: string;
    /**
     * Filter by status
     */
    status?: ApiReceivableAnticipationListRequestReceivableAnticipationStatus;
  };
  url: "/v3/anticipations";
};

export type ListAnticipationsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type ListAnticipationsResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<ApiReceivableAnticipationGetResponseDto>;
  };
};

export type ListAnticipationsResponse =
  ListAnticipationsResponses[keyof ListAnticipationsResponses];

export type RequestAnticipationData = {
  body?: {
    /**
     * ID of the installment to be anticipated
     */
    installment?: string;
    /**
     * ID of the payment to be anticipated
     */
    payment?: string;
    documents?: File;
  };
  path?: never;
  query?: never;
  url: "/v3/anticipations";
};

export type RequestAnticipationErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type RequestAnticipationResponses = {
  /**
   * OK
   */
  200: ApiReceivableAnticipationGetResponseDto;
};

export type RequestAnticipationResponse =
  RequestAnticipationResponses[keyof RequestAnticipationResponses];

export type SimulateAnticipationData = {
  body?: {
    /**
     * ID of the installment to be anticipated
     */
    installment?: string;
    /**
     * ID of the payment to be anticipated
     */
    payment?: string;
  };
  path?: never;
  query?: never;
  url: "/v3/anticipations/simulate";
};

export type SimulateAnticipationErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type SimulateAnticipationResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Unique identifier of the installment to be anticipated
     */
    installment?: string;
    /**
     * Unique identifier of the payment to be anticipated
     */
    payment?: string;
    /**
     * Anticipation request date
     */
    anticipationDate?: Date;
    /**
     * Request due date
     */
    dueDate?: Date;
    /**
     * Anticipation fee
     */
    fee?: number;
    /**
     * Number of days that were anticipated
     */
    anticipationDays?: number;
    /**
     * Net value discounted the anticipation fee
     */
    netValue?: number;
    /**
     * Total amount of the payment to be anticipated
     */
    totalValue?: number;
    /**
     * Anticipation value
     */
    value?: number;
    /**
     * Determines the obligation to send electronic invoices or service provision contracts when requesting anticipation payment
     */
    isDocumentationRequired?: boolean;
  };
};

export type SimulateAnticipationResponse =
  SimulateAnticipationResponses[keyof SimulateAnticipationResponses];

export type RetrieveStatusOfAutomaticAnticipationData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v3/anticipations/configurations";
};

export type RetrieveStatusOfAutomaticAnticipationErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type RetrieveStatusOfAutomaticAnticipationResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Indicates whether automatic anticipation is enabled for credit card payments
     */
    creditCardAutomaticEnabled?: boolean;
  };
};

export type RetrieveStatusOfAutomaticAnticipationResponse =
  RetrieveStatusOfAutomaticAnticipationResponses[keyof RetrieveStatusOfAutomaticAnticipationResponses];

export type UpdateStatusOfAutomaticAnticipationData = {
  body?: {
    /**
     * Define whether automatic anticipation is enabled for credit card payments
     */
    creditCardAutomaticEnabled?: boolean;
  };
  path?: never;
  query?: never;
  url: "/v3/anticipations/configurations";
};

export type UpdateStatusOfAutomaticAnticipationErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type UpdateStatusOfAutomaticAnticipationResponses = {
  /**
   * OK
   */
  200: ApiReceivableAnticipationConfigurationGetResponseDto;
};

export type UpdateStatusOfAutomaticAnticipationResponse =
  UpdateStatusOfAutomaticAnticipationResponses[keyof UpdateStatusOfAutomaticAnticipationResponses];

export type RetrieveAnticipationLimitsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v3/anticipations/limits";
};

export type RetrieveAnticipationLimitsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type RetrieveAnticipationLimitsResponses = {
  /**
   * OK
   */
  200: {
    creditCard?: ApiReceivableAnticipationLimitsInfoResponseDto;
    bankSlip?: ApiReceivableAnticipationLimitsInfoResponseDto;
  };
};

export type RetrieveAnticipationLimitsResponse =
  RetrieveAnticipationLimitsResponses[keyof RetrieveAnticipationLimitsResponses];

export type CancelAnticipationData = {
  body?: {
    [key: string]: unknown;
  };
  path: {
    /**
     * Unique identifier of anticipation in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/anticipations/{id}/cancel";
};

export type CancelAnticipationErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type CancelAnticipationResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Unique identifier of anticipation in Asaas
     */
    id?: string;
    /**
     * Unique identifier of the installment to be anticipated
     */
    installment?: string;
    /**
     * Unique identifier of the payment to be anticipated.
     */
    payment?: string;
    status?: ApiReceivableAnticipationGetResponseReceivableAnticipationStatus;
    /**
     * Anticipation request date
     */
    anticipationDate?: Date;
    /**
     * Request due date
     */
    dueDate?: Date;
    /**
     * Anticipation request date
     */
    requestDate?: Date;
    /**
     * Anticipation fee
     */
    fee?: number;
    /**
     * Number of days that were anticipated
     */
    anticipationDays?: number;
    /**
     * Net value discounted the anticipation fee
     */
    netValue?: number;
    /**
     * Total amount of the payment to be anticipated
     */
    totalValue?: number;
    /**
     * Anticipation value
     */
    value?: number;
    /**
     * Reason for rejecting the anticipation payment
     */
    denialObservation?: string;
  };
};

export type CancelAnticipationResponse =
  CancelAnticipationResponses[keyof CancelAnticipationResponses];

export type ListPaymentDunningsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
    /**
     * Filter by payment dunning status
     */
    status?: ApiPaymentDunningListRequestPaymentDunningStatus;
    /**
     * Filter by type of payment dunning
     */
    type?: ApiPaymentDunningListRequestPaymentDunningType;
    /**
     * Filter by dunnings for a specific payment
     */
    payment?: string;
    /**
     * Filter from initial request date
     */
    requestStartDate?: string;
    /**
     * Filter from end request date
     */
    requestEndDate?: string;
  };
  url: "/v3/paymentDunnings";
};

export type ListPaymentDunningsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type ListPaymentDunningsResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<ApiPaymentDunningShowResponseDto>;
  };
};

export type ListPaymentDunningsResponse =
  ListPaymentDunningsResponses[keyof ListPaymentDunningsResponses];

export type CreateAPaymentDunningData = {
  body?: {
    /**
     * Unique identifier of the payment to be recovered in Asaas
     */
    payment: string;
    type: ApiPaymentDunningSaveRequestPaymentDunningType;
    /**
     * Description of the product or service provided
     */
    description?: string;
    /**
     * Client name
     */
    customerName: string;
    /**
     * Customer CPF or CNPJ
     */
    customerCpfCnpj: string;
    /**
     * Customer main telephone number
     */
    customerPrimaryPhone: string;
    /**
     * Secondary customer phone number
     */
    customerSecondaryPhone?: string;
    /**
     * Customer address zip code
     */
    customerPostalCode: string;
    /**
     * Customer public address
     */
    customerAddress: string;
    /**
     * Customer address number
     */
    customerAddressNumber: string;
    /**
     * Customer address complement
     */
    customerComplement?: string;
    /**
     * Customer neighborhood
     */
    customerProvince: string;
    /**
     * Invoice and/or contract notarized
     */
    documents?: Blob | File;
  };
  path?: never;
  query?: never;
  url: "/v3/paymentDunnings";
};

export type CreateAPaymentDunningErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateAPaymentDunningResponses = {
  /**
   * OK
   */
  200: ApiPaymentDunningShowResponseDto;
};

export type CreateAPaymentDunningResponse =
  CreateAPaymentDunningResponses[keyof CreateAPaymentDunningResponses];

export type SimulateAPaymentDunningData = {
  body?: {
    [key: string]: unknown;
  };
  path?: never;
  query: {
    /**
     * Unique billing identifier in Asaas
     */
    payment: string;
  };
  url: "/v3/paymentDunnings/simulate";
};

export type SimulateAPaymentDunningErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type SimulateAPaymentDunningResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Unique identifier of the payment to be recovered in Asaas
     */
    payment?: string;
    /**
     * Payment amount
     */
    value?: number;
    /**
     * Simulation of denial request for each type of denial available
     */
    typeSimulations?: Array<{
      type?: ApiPaymentDunningSimulateResponseTypeSimulationItemPaymentDunningType;
      /**
       * Whether it is possible to request a payment dunning of this type
       */
      isAllowed?: boolean;
      /**
       * Reason why it is not possible to request a payment dunning for this type
       */
      notAllowedReason?: string;
      /**
       * Cost and/or payment dunning fee
       */
      feeValue?: number;
      /**
       * Net amount to be recovered
       */
      netValue?: number;
      /**
       * Expected start date of the payment dunning
       */
      startDate?: string;
    }>;
  };
};

export type SimulateAPaymentDunningResponse =
  SimulateAPaymentDunningResponses[keyof SimulateAPaymentDunningResponses];

export type RecoverASinglePaymentDunningData = {
  body?: never;
  path: {
    /**
     * Unique identifier of the payment dunning in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/paymentDunnings/{id}";
};

export type RecoverASinglePaymentDunningErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RecoverASinglePaymentDunningResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Unique identifier of the payment dunning in Asaas
     */
    id?: string;
    /**
     * Payment dunning number
     */
    dunningNumber?: number;
    status?: ApiPaymentDunningShowResponsePaymentDunningStatus;
    type?: ApiPaymentDunningShowResponsePaymentDunningType;
    /**
     * Request date
     */
    requestDate?: Date;
    /**
     * Description of the payment dunning
     */
    description?: string;
    /**
     * Payment amount
     */
    value?: number;
    /**
     * Cost and/or payment dunning fee
     */
    feeValue?: number;
    /**
     * Net amount to be recovered
     */
    netValue?: number;
    /**
     * Cash receipt fee
     */
    receivedInCashFeeValue?: number;
    /**
     * Reason for denial of payment dunning
     */
    denialReason?: string;
    /**
     * Fee charged in case of cancellation
     */
    cancellationFeeValue?: number;
    /**
     * Whether the payment dunning can be canceled
     */
    canBeCancelled?: boolean;
    /**
     * Reason for not being able to request cancellation
     */
    cannotBeCancelledReason?: string;
    /**
     * Determine whether documentation needs to be resubmitted
     */
    isNecessaryResendDocumentation?: boolean;
    /**
     * Unique identifier of the payment to be recovered in Asaas
     */
    payment?: string;
  };
};

export type RecoverASinglePaymentDunningResponse =
  RecoverASinglePaymentDunningResponses[keyof RecoverASinglePaymentDunningResponses];

export type EventHistoryListsData = {
  body?: never;
  path: {
    /**
     * Unique identifier of the payment dunning in Asaas
     */
    id: string;
  };
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
  };
  url: "/v3/paymentDunnings/{id}/history";
};

export type EventHistoryListsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type EventHistoryListsResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<{
      status?: ApiPaymentDunningListHistoryResponseDataPaymentDunningHistoryStatus;
      /**
       * Description of the event
       */
      description?: string;
      /**
       * Date the event occurred
       */
      eventDate?: string;
    }>;
  };
};

export type EventHistoryListsResponse =
  EventHistoryListsResponses[keyof EventHistoryListsResponses];

export type ListPaymentsReceivedData = {
  body?: never;
  path: {
    /**
     * Unique identifier of the payment dunning in Asaas
     */
    id: string;
  };
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
  };
  url: "/v3/paymentDunnings/{id}/partialPayments";
};

export type ListPaymentsReceivedErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type ListPaymentsReceivedResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<{
      /**
       * Amount paid
       */
      value?: number;
      /**
       * Payment Description
       */
      description?: string;
      /**
       * Pay day
       */
      paymentDate?: string;
    }>;
  };
};

export type ListPaymentsReceivedResponse =
  ListPaymentsReceivedResponses[keyof ListPaymentsReceivedResponses];

export type ListPaymentsAvailableForPaymentDunningData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
  };
  url: "/v3/paymentDunnings/paymentsAvailableForDunning";
};

export type ListPaymentsAvailableForPaymentDunningErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type ListPaymentsAvailableForPaymentDunningResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<{
      /**
       * Unique identifier of the payment to be recovered in Asaas
       */
      payment?: string;
      /**
       * Unique customer identifier
       */
      customer?: string;
      /**
       * Payment amount
       */
      value?: number;
      status?: ApiPaymentDunningPaymentsAvailableForDunningResponseDataPaymentStatus;
      billingType?: ApiPaymentDunningPaymentsAvailableForDunningResponseDataBillingType;
      /**
       * Due date
       */
      dueDate?: string;
      /**
       * Simulation of denial request for each type of payment dunning available
       */
      typeSimulations?: Array<{
        type?: ApiPaymentDunningPaymentsAvailableForDunningResponseDataTypeSimulationItemPaymentDunningType;
        /**
         * Whether it is possible to request a payment dunning of this type
         */
        isAllowed?: boolean;
        /**
         * Reason why it is not possible to request a payment dunning for this type
         */
        notAllowedReason?: string;
        /**
         * Cost and/or payment dunning fee
         */
        feeValue?: number;
        /**
         * Net amount to be recovered
         */
        netValue?: number;
        /**
         * Expected start date of the payment dunning
         */
        startDate?: string;
      }>;
    }>;
  };
};

export type ListPaymentsAvailableForPaymentDunningResponse =
  ListPaymentsAvailableForPaymentDunningResponses[keyof ListPaymentsAvailableForPaymentDunningResponses];

export type ResendDocumentsData = {
  body?: {
    /**
     * Invoice and/or contract notarized
     */
    documents: Blob | File;
  };
  path: {
    /**
     * Unique identifier of the payment dunning in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/paymentDunnings/{id}/documents";
};

export type ResendDocumentsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type ResendDocumentsResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Unique identifier of the payment dunning in Asaas
     */
    id?: string;
    /**
     * Payment dunning number
     */
    dunningNumber?: number;
    status?: ApiPaymentDunningSaveDocumentsResponsePaymentDunningStatus;
    type?: ApiPaymentDunningSaveDocumentsResponsePaymentDunningType;
    /**
     * Unique identifier of the payment to be recovered in Asaas
     */
    payment?: string;
    /**
     * Request date
     */
    requestDate?: Date;
    /**
     * Description of the payment dunning
     */
    description?: string;
    /**
     * Payment amount
     */
    value?: number;
    /**
     * Cost and/or payment dunning fee
     */
    feeValue?: number;
    /**
     * Net amount to be recovered
     */
    netValue?: number;
    /**
     * Cash receipt fee
     */
    receivedInCashFeeValue?: number;
    /**
     * Reason for denial of payment dunning
     */
    denialReason?: string;
    /**
     * Fee charged in case of cancellation
     */
    cancellationFeeValue?: number;
    /**
     * Whether the payment dunning can be canceled
     */
    canBeCancelled?: boolean;
    /**
     * Reason for not being able to request cancellation
     */
    cannotBeCancelledReason?: string;
    /**
     * Determine whether documentation needs to be resubmitted
     */
    isNecessaryResendDocumentation?: boolean;
  };
};

export type ResendDocumentsResponse =
  ResendDocumentsResponses[keyof ResendDocumentsResponses];

export type CancelPaymentDunningData = {
  body?: {
    [key: string]: unknown;
  };
  path: {
    /**
     * Unique identifier of the payment dunning to be cancelled.
     */
    id: string;
  };
  query?: never;
  url: "/v3/paymentDunnings/{id}/cancel";
};

export type CancelPaymentDunningErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type CancelPaymentDunningResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Unique identifier of the payment dunning in Asaas
     */
    id?: string;
    /**
     * Payment dunning number
     */
    dunningNumber?: number;
    status?: ApiPaymentDunningCancelResponsePaymentDunningStatus;
    type?: ApiPaymentDunningCancelResponsePaymentDunningType;
    /**
     * Unique identifier of the payment to be recovered in Asaas
     */
    payment?: string;
    /**
     * Request date
     */
    requestDate?: Date;
    /**
     * Description of the payment dunning
     */
    description?: string;
    /**
     * Payment amount
     */
    value?: number;
    /**
     * Cost and/or payment dunning fee
     */
    feeValue?: number;
    /**
     * Net amount to be recovered
     */
    netValue?: number;
    /**
     * Cash receipt fee
     */
    receivedInCashFeeValue?: number;
    /**
     * Reason for denial of payment dunning
     */
    denialReason?: string;
    /**
     * Fee charged in case of cancellation
     */
    cancellationFeeValue?: number;
    /**
     * Whether the payment dunning can be canceled
     */
    canBeCancelled?: boolean;
    /**
     * Reason for not being able to request cancellation
     */
    cannotBeCancelledReason?: string;
    /**
     * Determine whether documentation needs to be resubmitted
     */
    isNecessaryResendDocumentation?: boolean;
  };
};

export type CancelPaymentDunningResponse =
  CancelPaymentDunningResponses[keyof CancelPaymentDunningResponses];

export type ListBillPaymentsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
  };
  url: "/v3/bill";
};

export type ListBillPaymentsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type ListBillPaymentsResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<ApiBillGetResponseDto>;
  };
};

export type ListBillPaymentsResponse =
  ListBillPaymentsResponses[keyof ListBillPaymentsResponses];

export type CreateABillPaymentData = {
  body?: {
    /**
     * Digitizable bill line
     */
    identificationField: string;
    /**
     * Payment scheduling date
     */
    scheduleDate?: string;
    /**
     * Bill Payment Description
     */
    description?: string;
    /**
     * Discount attributed to payment
     */
    discount?: number;
    /**
     * Interest attributed to payment
     */
    interest?: number;
    /**
     * Fine assigned to payment
     */
    fine?: number;
    /**
     * Expiration date of the account if it is the type that does not have this information
     */
    dueDate?: Date;
    /**
     * Account value if it is the type that does not have this information (Ex: credit card invoices)
     */
    value?: number;
    /**
     * Unique identifier of the bill in your system
     */
    externalReference?: string;
  };
  path?: never;
  query?: never;
  url: "/v3/bill";
};

export type CreateABillPaymentErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateABillPaymentResponses = {
  /**
   * OK
   */
  200: ApiBillGetResponseDto;
};

export type CreateABillPaymentResponse =
  CreateABillPaymentResponses[keyof CreateABillPaymentResponses];

export type SimulateABillPaymentData = {
  body?: {
    /**
     * Digitizable bill line
     */
    identificationField?: string;
    /**
     * Ticket barcode
     */
    barCode?: string;
  };
  path?: never;
  query?: never;
  url: "/v3/bill/simulate";
};

export type SimulateABillPaymentErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type SimulateABillPaymentResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Minimum date allowed for scheduling
     */
    minimumScheduleDate?: Date;
    /**
     * Fee charged when paying the bill
     */
    fee?: number;
    bankSlipInfo?: ApiBillSimulateBankSlipInfoResponseDto;
  };
};

export type SimulateABillPaymentResponse =
  SimulateABillPaymentResponses[keyof SimulateABillPaymentResponses];

export type RetrieveASingleBillPaymentData = {
  body?: never;
  path: {
    /**
     * Unique bill payment identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/bill/{id}";
};

export type RetrieveASingleBillPaymentErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrieveASingleBillPaymentResponses = {
  /**
   * OK
   */
  200: ApiBillGetResponseDto;
};

export type RetrieveASingleBillPaymentResponse =
  RetrieveASingleBillPaymentResponses[keyof RetrieveASingleBillPaymentResponses];

export type CancelBillPaymentData = {
  body?: {
    [key: string]: unknown;
  };
  path: {
    /**
     * Unique identifier of the bill payment to be cancelled
     */
    id: string;
  };
  query?: never;
  url: "/v3/bill/{id}/cancel";
};

export type CancelBillPaymentErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type CancelBillPaymentResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Unique bill payment identifier in Asaas
     */
    id?: string;
    status?: ApiBillGetResponseBillStatus;
    /**
     * Amount to be paid
     */
    value?: number;
    /**
     * Discount attributed to payment
     */
    discount?: number;
    /**
     * Interest attributed to payment
     */
    interest?: number;
    /**
     * Fine assigned to payment
     */
    fine?: number;
    /**
     * Typeable line of the bill to be paid
     */
    identificationField?: string;
    /**
     * Billing due date
     */
    dueDate?: Date;
    /**
     * Payment scheduling date
     */
    scheduleDate?: Date;
    /**
     * Date on which payment was made
     */
    paymentDate?: Date;
    /**
     * Asaas fee for bill payment
     */
    fee?: number;
    /**
     * Bill Payment Description
     */
    description?: string;
    /**
     * Company/Body issuing the payment
     */
    companyName?: string;
    /**
     * Proof of bill payment
     */
    transactionReceiptUrl?: string;
    /**
     * Whether payment can be canceled
     */
    canBeCancelled?: boolean;
    /**
     * Unique identifier of the bill in your system
     */
    externalReference?: string;
    /**
     * List of reasons for payment failure
     */
    failReasons?: Array<string>;
  };
};

export type CancelBillPaymentResponse =
  CancelBillPaymentResponses[keyof CancelBillPaymentResponses];

export type ListMobileRechargesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
  };
  url: "/v3/mobilePhoneRecharges";
};

export type ListMobileRechargesErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type ListMobileRechargesResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<ApiMobilePhoneRechargeGetResponseDto>;
  };
};

export type ListMobileRechargesResponse =
  ListMobileRechargesResponses[keyof ListMobileRechargesResponses];

export type RequestRechargeData = {
  body?: {
    /**
     * Recharge value
     */
    value: number;
    /**
     * Cellphone number
     */
    phoneNumber: string;
  };
  path?: never;
  query?: never;
  url: "/v3/mobilePhoneRecharges";
};

export type RequestRechargeErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type RequestRechargeResponses = {
  /**
   * OK
   */
  200: ApiMobilePhoneRechargeGetResponseDto;
};

export type RequestRechargeResponse =
  RequestRechargeResponses[keyof RequestRechargeResponses];

export type RecoverASingleCellphoneRechargeData = {
  body?: never;
  path: {
    /**
     * Unique identifier for cell phone recharge on Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/mobilePhoneRecharges/{id}";
};

export type RecoverASingleCellphoneRechargeErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RecoverASingleCellphoneRechargeResponses = {
  /**
   * OK
   */
  200: ApiMobilePhoneRechargeGetResponseDto;
};

export type RecoverASingleCellphoneRechargeResponse =
  RecoverASingleCellphoneRechargeResponses[keyof RecoverASingleCellphoneRechargeResponses];

export type CancelACellphoneRechargeData = {
  body?: {
    [key: string]: unknown;
  };
  path: {
    /**
     * Unique identifier for cell phone recharge on Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/mobilePhoneRecharges/{id}/cancel";
};

export type CancelACellphoneRechargeErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type CancelACellphoneRechargeResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Unique identifier for cell phone recharge on Asaas
     */
    id?: string;
    /**
     * Recharge value
     */
    value?: number;
    /**
     * Cell phone number that was requested to be recharged
     */
    phoneNumber?: string;
    status?: ApiMobilePhoneRechargeGetResponseMobilePhoneRechargeStatus;
    /**
     * Whether the top-up can be canceled
     */
    canBeCancelled?: boolean;
    /**
     * Name of cell phone operator
     */
    operatorName?: string;
  };
};

export type CancelACellphoneRechargeResponse =
  CancelACellphoneRechargeResponses[keyof CancelACellphoneRechargeResponses];

export type SearchForCellPhoneProviderData = {
  body?: never;
  path: {
    /**
     * Cell phone number that will be consulted.
     */
    phoneNumber: string;
  };
  query?: never;
  url: "/v3/mobilePhoneRecharges/{phoneNumber}/provider";
};

export type SearchForCellPhoneProviderErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type SearchForCellPhoneProviderResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Name of cell phone operator
     */
    name?: string;
    /**
     * Amounts available for recharge
     */
    values?: Array<{
      /**
       * Package name
       */
      name?: string;
      /**
       * Package Description
       */
      description?: string;
      /**
       * Package Bonuses
       */
      bonus?: string;
      /**
       * Minimum top-up amount
       */
      minValue?: number;
      /**
       * Maximum recharge value
       */
      maxValue?: number;
    }>;
  };
};

export type SearchForCellPhoneProviderResponse =
  SearchForCellPhoneProviderResponses[keyof SearchForCellPhoneProviderResponses];

export type ListCreditBureauReportsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
    /**
     * Initial date of the creation
     */
    startDate?: string;
    /**
     * Final date of the creation
     */
    endDate?: string;
  };
  url: "/v3/creditBureauReport";
};

export type ListCreditBureauReportsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type ListCreditBureauReportsResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<ApiCreditBureauReportGetResponseDto>;
  };
};

export type ListCreditBureauReportsResponse =
  ListCreditBureauReportsResponses[keyof ListCreditBureauReportsResponses];

export type MakeConsultationData = {
  body?: {
    /**
     * Unique customer identifier in Asaas
     */
    customer?: string;
    /**
     * CPF or CNPJ of the customer. Enter this field if your client is not registered with Asaas
     */
    cpfCnpj?: string;
    state?: ApiCreditBureauReportSaveRequestState;
  };
  path?: never;
  query?: never;
  url: "/v3/creditBureauReport";
};

export type MakeConsultationErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type MakeConsultationResponses = {
  /**
   * OK
   */
  200: ApiCreditBureauReportGetResponseDto;
};

export type MakeConsultationResponse =
  MakeConsultationResponses[keyof MakeConsultationResponses];

export type RetrieveACreditBureauReportData = {
  body?: never;
  path: {
    /**
     * Unique report identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/creditBureauReport/{id}";
};

export type RetrieveACreditBureauReportErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrieveACreditBureauReportResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Unique report identifier in Asaas
     */
    id?: string;
    /**
     * Date of consultation
     */
    dateCreated?: Date;
    /**
     * CPF or CNPJ consulted manually
     */
    cpfCnpj?: string;
    state?: ApiCreditBureauReportGetResponseState;
    /**
     * Unique customer identifier in Asaas
     */
    customer?: string;
    /**
     * Url to download the report. Available until 11:59 pm on the day of the appointment.
     */
    downloadUrl?: string;
    /**
     * PDF of the query report in Base64 (this field is only returned when the report is created)
     */
    reportFile?: string;
  };
};

export type RetrieveACreditBureauReportResponse =
  RetrieveACreditBureauReportResponses[keyof RetrieveACreditBureauReportResponses];

export type RetrieveExtractData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
    /**
     * List start date
     */
    startDate?: string;
    /**
     * List end date
     */
    finishDate?: string;
    /**
     * Result ordering
     */
    order?: string;
  };
  url: "/v3/financialTransactions";
};

export type RetrieveExtractErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type RetrieveExtractResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<{
      /**
       * Object type
       */
      object?: string;
      /**
       * Unique transaction identifier in Asaas
       */
      id?: string;
      /**
       * Transaction value
       */
      value?: number;
      /**
       * Value in account at the time of the transaction
       */
      balance?: number;
      type?: ApiFinancialTransactionGetResponseFinancialTransactionType;
      /**
       * Transaction date
       */
      date?: Date;
      /**
       * Transaction description
       */
      description?: string;
      /**
       * Payment identifier (If any)
       */
      paymentId?: string;
      /**
       * Split identifier (If any)
       */
      splitId?: string;
      /**
       * Transfer identifier (If any)
       */
      transferId?: string;
      /**
       * Anticipation identifier (If any)
       */
      anticipationId?: string;
      /**
       * Bill payment identifier (If any)
       */
      billId?: string;
      /**
       * Invoice identifier (If any)
       */
      invoiceId?: string;
      /**
       * Payment dunning identifier (If any)
       */
      paymentDunningId?: string;
      /**
       * Serasa consultation identifier (If any)
       */
      creditBureauReportId?: string;
    }>;
  };
};

export type RetrieveExtractResponse =
  RetrieveExtractResponses[keyof RetrieveExtractResponses];

export type RetrieveAccountBalanceData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v3/finance/balance";
};

export type RetrieveAccountBalanceErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type RetrieveAccountBalanceResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Account balance
     */
    balance?: number;
  };
};

export type RetrieveAccountBalanceResponse =
  RetrieveAccountBalanceResponses[keyof RetrieveAccountBalanceResponses];

export type BillingStatisticsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Filter by unique customer identifier
     */
    customer?: string;
    /**
     * Filter by payment method
     */
    billingType?: ApiFinanceGetPaymentStatisticsRequestBillingType;
    /**
     * Filter by status
     */
    status?: ApiFinanceGetPaymentStatisticsRequestPaymentStatus;
    /**
     * Filter early registrations or not
     */
    anticipated?: boolean;
    /**
     * Filter from initial creation date
     */
    "dateCreated[ge]"?: string;
    /**
     * Filter from final creation date
     */
    "dateCreated[le]"?: string;
    /**
     * Filter from initial due date
     */
    "dueDate[ge]"?: string;
    /**
     * Filter by final due date
     */
    "dueDate[le]"?: string;
    /**
     * Filter from estimated initial credit date
     */
    "estimatedCreditDate[ge]"?: string;
    /**
     * Filter from estimated end credit date
     */
    "estimatedCreditDate[le]"?: string;
    /**
     * Filter by your system identifier
     */
    externalReference?: string;
  };
  url: "/v3/finance/payment/statistics";
};

export type BillingStatisticsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type BillingStatisticsResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Number of charges
     */
    quantity?: number;
    /**
     * Amount
     */
    value?: number;
    /**
     * Total net worth
     */
    netValue?: number;
  };
};

export type BillingStatisticsResponse =
  BillingStatisticsResponses[keyof BillingStatisticsResponses];

export type RetrieveSplitValuesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v3/finance/split/statistics";
};

export type RetrieveSplitValuesErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type RetrieveSplitValuesResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Amounts receivable
     */
    income?: number;
    /**
     * Values to be sent
     */
    value?: number;
  };
};

export type RetrieveSplitValuesResponse =
  RetrieveSplitValuesResponses[keyof RetrieveSplitValuesResponses];

export type RetrieveBusinessDataData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v3/myAccount/commercialInfo/";
};

export type RetrieveBusinessDataErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type RetrieveBusinessDataResponses = {
  /**
   * OK
   */
  200: {
    status?: ApiCustomerUpdateRequestGetResponseStatus;
    personType?: ApiCustomerUpdateRequestGetResponsePersonType;
    /**
     * CPF or CNPJ of the account owner
     */
    cpfCnpj?: string;
    /**
     * Account owner name
     */
    name?: string;
    /**
     * Birthday (Required if the information is from an individual)
     */
    birthDate?: Date;
    /**
     * Company Name
     */
    companyName?: string;
    companyType?: ApiCustomerUpdateRequestGetResponseCompanyType;
    /**
     * Billing/Monthly income
     */
    incomeValue?: number;
    /**
     * Account's email
     */
    email?: string;
    /**
     * Telephone
     */
    phone?: string;
    /**
     * Cell phone
     */
    mobilePhone?: string;
    /**
     * Address zip code
     */
    postalCode?: string;
    /**
     * Public place
     */
    address?: string;
    /**
     * Address number
     */
    addressNumber?: string;
    /**
     * Address complement
     */
    complement?: string;
    /**
     * Neighborhood
     */
    province?: string;
    city?: ApiCustomerUpdateRequestCityDto;
    /**
     * Reason why it is necessary to resend the information
     */
    denialReason?: string;
    /**
     * Display name (auto-populated)
     */
    tradingName?: string;
    /**
     * Web site
     */
    site?: string;
    commercialInfoExpiration?: ApiCustomerUpdateRequestCommercialInfoExpirationResponseDto;
  };
};

export type RetrieveBusinessDataResponse =
  RetrieveBusinessDataResponses[keyof RetrieveBusinessDataResponses];

export type UpdateBusinessDataData = {
  body?: {
    personType?: ApiCustomerUpdateRequestSaveRequestPersonType;
    /**
     * CPF or CNPJ of the account owner
     */
    cpfCnpj?: string;
    /**
     * Birthday (Required if the information is from an individual)
     */
    birthDate?: Date;
    companyType?: ApiCustomerUpdateRequestSaveRequestCompanyType;
    /**
     * Billing/Monthly income
     */
    incomeValue?: number;
    /**
     * Account's email
     */
    email?: string;
    /**
     * Telephone
     */
    phone?: string;
    /**
     * Cell phone
     */
    mobilePhone?: string;
    /**
     * Web site
     */
    site?: string;
    /**
     * Address zip code
     */
    postalCode?: string;
    /**
     * Public place
     */
    address?: string;
    /**
     * Address number
     */
    addressNumber?: string;
    /**
     * Address complement
     */
    complement?: string;
    /**
     * Neighborhood
     */
    province?: string;
  };
  path?: never;
  query?: never;
  url: "/v3/myAccount/commercialInfo/";
};

export type UpdateBusinessDataErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type UpdateBusinessDataResponses = {
  /**
   * OK
   */
  200: ApiCustomerUpdateRequestGetResponseDto;
};

export type UpdateBusinessDataResponse =
  UpdateBusinessDataResponses[keyof UpdateBusinessDataResponses];

export type RetrievePersonalizationSettingsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v3/myAccount/paymentCheckoutConfig/";
};

export type RetrievePersonalizationSettingsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type RetrievePersonalizationSettingsResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Logo background color
     */
    logoBackgroundColor?: string;
    /**
     * Background color of your information
     */
    infoBackgroundColor?: string;
    /**
     * Font color of your information
     */
    fontColor?: string;
    /**
     * Indicates whether personalization is enabled
     */
    enabled?: boolean;
    /**
     * Logo download link
     */
    logoUrl?: string;
    /**
     * Invoice personalization analysis notes
     */
    observations?: string;
    status?: ApiPaymentCheckoutConfigGetResponseCustomerInvoiceConfigStatus;
  };
};

export type RetrievePersonalizationSettingsResponse =
  RetrievePersonalizationSettingsResponses[keyof RetrievePersonalizationSettingsResponses];

export type SavePaymentCheckoutPersonalizationData = {
  body?: {
    /**
     * Logo background color
     */
    logoBackgroundColor: string;
    /**
     * Background color of your information
     */
    infoBackgroundColor: string;
    /**
     * Font color of your information
     */
    fontColor: string;
    /**
     * Indicates whether personalization is enabled
     */
    enabled?: boolean;
    logoFile?: File;
  };
  path?: never;
  query?: never;
  url: "/v3/myAccount/paymentCheckoutConfig/";
};

export type SavePaymentCheckoutPersonalizationErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type SavePaymentCheckoutPersonalizationResponses = {
  /**
   * OK
   */
  200: ApiPaymentCheckoutConfigGetResponseDto;
};

export type SavePaymentCheckoutPersonalizationResponse =
  SavePaymentCheckoutPersonalizationResponses[keyof SavePaymentCheckoutPersonalizationResponses];

export type RetrieveAsaasAccountNumberData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v3/myAccount/accountNumber";
};

export type RetrieveAsaasAccountNumberErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type RetrieveAsaasAccountNumberResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Account agency
     */
    agency?: string;
    /**
     * Account number
     */
    account?: string;
    /**
     * Account digit
     */
    accountDigit?: string;
  };
};

export type RetrieveAsaasAccountNumberResponse =
  RetrieveAsaasAccountNumberResponses[keyof RetrieveAsaasAccountNumberResponses];

export type RetrieveAccountFeesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v3/myAccount/fees/";
};

export type RetrieveAccountFeesErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type RetrieveAccountFeesResponses = {
  /**
   * OK
   */
  200: {
    payment?: ApiMyAccountGetAccountFeesPaymentDto;
    transfer?: ApiMyAccountGetAccountFeesTransferDto;
    notification?: ApiMyAccountGetAccountFeesNotificationDto;
    creditBureauReport?: ApiMyAccountGetAccountFeesCreditBureauReportDto;
    invoice?: ApiMyAccountGetAccountFeesInvoiceDto;
    anticipation?: ApiMyAccountGetAccountFeesAnticipationDto;
  };
};

export type RetrieveAccountFeesResponse =
  RetrieveAccountFeesResponses[keyof RetrieveAccountFeesResponses];

export type CheckAccountRegistrationStatusData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v3/myAccount/status/";
};

export type CheckAccountRegistrationStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type CheckAccountRegistrationStatusResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Unique account identifier in Asaas
     */
    id?: string;
    commercialInfo?: ApiMyAccountGetStatusResponseStatus;
    bankAccountInfo?: ApiMyAccountGetStatusResponseStatus;
    documentation?: ApiMyAccountGetStatusResponseStatus;
    general?: ApiMyAccountGetStatusResponseStatus;
  };
};

export type CheckAccountRegistrationStatusResponse =
  CheckAccountRegistrationStatusResponses[keyof CheckAccountRegistrationStatusResponses];

export type RetrieveWalletidData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v3/wallets/";
};

export type RetrieveWalletidErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type RetrieveWalletidResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<{
      /**
       * Object type
       */
      object?: string;
      /**
       * Unique wallet identifier in Asaas
       */
      id?: string;
    }>;
  };
};

export type RetrieveWalletidResponse =
  RetrieveWalletidResponses[keyof RetrieveWalletidResponses];

export type DeleteWhiteLabelSubaccountData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Reason for removal
     */
    removeReason: string;
  };
  url: "/v3/myAccount/";
};

export type DeleteWhiteLabelSubaccountErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type DeleteWhiteLabelSubaccountResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Deletion information
     */
    observations?: string;
  };
};

export type DeleteWhiteLabelSubaccountResponse =
  DeleteWhiteLabelSubaccountResponses[keyof DeleteWhiteLabelSubaccountResponses];

export type ListInvoicesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
    /**
     * Filter by an issue date
     */
    "effectiveDate[Ge]"?: string;
    /**
     * Filter by an issue date
     */
    "effectiveDate[Le]"?: string;
    /**
     * Filter by unique payment identifier
     */
    payment?: string;
    /**
     * Filter by the unique installment identifier
     */
    installment?: string;
    /**
     * Filter by invoice identifier in your system
     */
    externalReference?: string;
    /**
     * Filter by situation
     */
    status?: ApiCustomerInvoiceListRequestInvoiceStatus;
    /**
     * Filter by unique customer identifier
     */
    customer?: string;
  };
  url: "/v3/invoices";
};

export type ListInvoicesErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type ListInvoicesResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<ApiCustomerInvoiceGetResponseDto>;
  };
};

export type ListInvoicesResponse =
  ListInvoicesResponses[keyof ListInvoicesResponses];

export type ScheduleInvoiceData = {
  body?: {
    /**
     * Unique payment identifier in Asaas
     */
    payment?: string;
    /**
     * Unique installment identifier in Asaas
     */
    installment?: string;
    /**
     * Unique customer identifier
     */
    customer?: string;
    /**
     * Description of invoice services
     */
    serviceDescription: string;
    /**
     * Additional observations
     */
    observations: string;
    /**
     * Invoice identifier in your system
     */
    externalReference?: string;
    /**
     * Total value
     */
    value: number;
    /**
     * Deductions. Deductions do not change the total value of the invoice, but they do change the ISS calculation basis.
     */
    deductions: number;
    /**
     * Invoice issuance date
     */
    effectiveDate: Date;
    /**
     * Unique municipal service identifier
     */
    municipalServiceId?: string;
    /**
     * Municipal Service Code
     */
    municipalServiceCode?: string;
    /**
     * Name of the municipal service. If not provided, the municipalServiceCode attribute will be used as the name for identification.
     */
    municipalServiceName: string;
    /**
     * Update the Payment amount with the invoice taxes already deducted.
     */
    updatePayment?: boolean;
    taxes?: ApiCustomerInvoiceTaxesDto;
  };
  path?: never;
  query?: never;
  url: "/v3/invoices";
};

export type ScheduleInvoiceErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ScheduleInvoiceResponses = {
  /**
   * OK
   */
  200: ApiCustomerInvoiceGetResponseDto;
};

export type ScheduleInvoiceResponse =
  ScheduleInvoiceResponses[keyof ScheduleInvoiceResponses];

export type RetrieveASingleInvoiceData = {
  body?: never;
  path: {
    /**
     * Unique invoice identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/invoices/{id}";
};

export type RetrieveASingleInvoiceErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrieveASingleInvoiceResponses = {
  /**
   * OK
   */
  200: ApiCustomerInvoiceGetResponseDto;
};

export type RetrieveASingleInvoiceResponse =
  RetrieveASingleInvoiceResponses[keyof RetrieveASingleInvoiceResponses];

export type UpdateInvoiceData = {
  body?: {
    /**
     * Description of invoice services
     */
    serviceDescription?: string;
    /**
     * Additional observations
     */
    observations?: string;
    /**
     * Invoice identifier in your system
     */
    externalReference?: string;
    /**
     * Total value
     */
    value?: number;
    /**
     * Deductions. Deductions do not change the total value of the invoice, but they do change the ISS calculation basis.
     */
    deductions?: number;
    /**
     * Invoice issuance date
     */
    effectiveDate?: Date;
    /**
     * Update the Payment amount with the invoice taxes already deducted.
     */
    updatePayment?: boolean;
    taxes?: ApiCustomerInvoiceTaxesDto;
  };
  path: {
    /**
     * Unique invoice identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/invoices/{id}";
};

export type UpdateInvoiceErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type UpdateInvoiceResponses = {
  /**
   * OK
   */
  200: ApiCustomerInvoiceGetResponseDto;
};

export type UpdateInvoiceResponse =
  UpdateInvoiceResponses[keyof UpdateInvoiceResponses];

export type IssueAnInvoiceData = {
  body?: {
    [key: string]: unknown;
  };
  path: {
    /**
     * Unique invoice identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/invoices/{id}/authorize";
};

export type IssueAnInvoiceErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type IssueAnInvoiceResponses = {
  /**
   * OK
   */
  200: ApiCustomerInvoiceGetResponseDto;
};

export type IssueAnInvoiceResponse =
  IssueAnInvoiceResponses[keyof IssueAnInvoiceResponses];

export type CancelAnInvoiceData = {
  body?: {
    /**
     * Cancel invoice only on Asaas
     */
    cancelOnlyOnAsaas?: boolean;
  };
  path: {
    /**
     * Unique invoice identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/invoices/{id}/cancel";
};

export type CancelAnInvoiceErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type CancelAnInvoiceResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Unique invoice identifier in Asaas
     */
    id?: string;
    status?: ApiCustomerInvoiceGetResponseInvoiceStatus;
    /**
     * Unique customer identifier
     */
    customer?: string;
    /**
     * Unique payment identifier in Asaas
     */
    payment?: string;
    /**
     * Unique installment identifier in Asaas
     */
    installment?: string;
    /**
     * Invoice type
     */
    type?: "NFS-e";
    /**
     * Description of the current status of the invoice
     */
    statusDescription?: string;
    /**
     * Description of invoice services
     */
    serviceDescription?: string;
    /**
     * Link to pdf file of the invoice issued
     */
    pdfUrl?: string;
    /**
     * Link to xml file of the issued invoice
     */
    xmlUrl?: string;
    /**
     * Invoice series
     */
    rpsSerie?: string;
    /**
     * RPS converted to invoice
     */
    rpsNumber?: string;
    /**
     * Invoice number
     */
    number?: string;
    /**
     * Verification code
     */
    validationCode?: string;
    /**
     * Total value
     */
    value?: number;
    /**
     * Deductions. Deductions do not change the total value of the invoice, but they do change the ISS calculation basis.
     */
    deductions?: number;
    /**
     * Invoice issuance date
     */
    effectiveDate?: Date;
    /**
     * Additional observations
     */
    observations?: string;
    /**
     * Estimated tax invoice
     */
    estimatedTaxesDescription?: string;
    /**
     * Invoice identifier in your system
     */
    externalReference?: string;
    taxes?: ApiCustomerInvoiceTaxesDto;
    /**
     * Unique municipal service identifier
     */
    municipalServiceId?: string;
    /**
     * Municipal Service Code
     */
    municipalServiceCode?: string;
    /**
     * Name of municipal service
     */
    municipalServiceName?: string;
  };
};

export type CancelAnInvoiceResponse =
  CancelAnInvoiceResponses[keyof CancelAnInvoiceResponses];

export type ListMunicipalConfigurationsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v3/fiscalInfo/municipalOptions";
};

export type ListMunicipalConfigurationsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type ListMunicipalConfigurationsResponses = {
  /**
   * OK
   */
  200: {
    authenticationType?: ApiCustomerFiscalInfoMunicipalOptionsGetResponseEnotasTipoAutenticacao;
    /**
     * Whether or not it supports the cancellation of invoices automatically at your city hall
     */
    supportsCancellation?: boolean;
    /**
     * It is necessary to inform or not the special taxation regime. If used, enter it in the `specialTaxRegime` field of **Create or update tax information** according to the options returned in the `specialTaxRegimesList` list.
     */
    usesSpecialTaxRegimes?: boolean;
    /**
     * Whether or not to inform the item on the service list
     */
    usesServiceListItem?: boolean;
    /**
     * Tax calculation regime options
     */
    specialTaxRegimesList?: Array<{
      /**
       * Name of the special taxation regime
       */
      label?: string;
      /**
       * Special taxation regime identifier
       */
      value?: string;
    }>;
    /**
     * Special taxation regime options
     */
    nationalPortalTaxCalculationRegimeList?: Array<{
      /**
       * Name of the tax calculation regime
       */
      label?: string;
      /**
       * Identifier of the tax calculation regime
       */
      value?: string;
    }>;
    /**
     * Explanation of the tax calculation regime
     */
    nationalPortalTaxCalculationRegimeHelp?: string;
    /**
     * Explanation of the municipal registration format
     */
    municipalInscriptionHelp?: string;
    /**
     * Explanation of the special taxation regime
     */
    specialTaxRegimeHelp?: string;
    /**
     * Explanation of service list item format
     */
    serviceListItemHelp?: string;
    /**
     * Explanation of digital certificate
     */
    digitalCertificatedHelp?: string;
    /**
     * Token Explanation
     */
    accessTokenHelp?: string;
    /**
     * Explanation of municipal service code format
     */
    municipalServiceCodeHelp?: string;
  };
};

export type ListMunicipalConfigurationsResponse =
  ListMunicipalConfigurationsResponses[keyof ListMunicipalConfigurationsResponses];

export type RetrieveTaxInformationData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v3/fiscalInfo/";
};

export type RetrieveTaxInformationErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type RetrieveTaxInformationResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Email used by Asaas to send invoice notifications and alerts
     */
    email?: string;
    /**
     * Company municipal registration
     */
    municipalInscription?: string;
    /**
     * Indicates whether the company opts for the simple national system
     */
    simplesNacional?: boolean;
    /**
     * Identifies whether the company is classified as a cultural promoter
     */
    culturalProjectsPromoter?: boolean;
    /**
     * CNAE code
     */
    cnae?: string;
    /**
     * Special taxation regime identifier
     */
    specialTaxRegime?: string;
    /**
     * Service list item, as http://www.planalto.gov.br/ccivil_03/leis/LCP/Lcp116.htm
     */
    serviceListItem?: string;
    /**
     * Serial Number registered for the company
     */
    rpsSerie?: string;
    /**
     * RPS number used in the last invoice issued to your company
     */
    rpsNumber?: number;
    /**
     * Batch number used on the last invoice issued by your company
     */
    loteNumber?: number;
    /**
     * User to access your city's city hall website
     */
    username?: string;
    /**
     * Indicates whether the password to access the city hall website has been entered
     */
    passwordSent?: boolean;
    /**
     * Indicates whether the token for accessing the city hall website was provided
     */
    accessTokenSent?: boolean;
    /**
     * Indicates whether the digital certificate for access to the city hall website has been provided
     */
    certificateSent?: boolean;
    /**
     * Identifier of the tax calculation regime
     */
    nationalPortalTaxCalculationRegime?: string;
  };
};

export type RetrieveTaxInformationResponse =
  RetrieveTaxInformationResponses[keyof RetrieveTaxInformationResponses];

export type CreateAndUpdateTaxInformationData = {
  body?: {
    /**
     * Email used by Asaas to send invoice notifications and alerts
     */
    email: string;
    /**
     * Company municipal registration
     */
    municipalInscription?: string;
    /**
     * Indicates whether the company opts for the simple national system
     */
    simplesNacional: boolean;
    /**
     * Identifies whether the company is classified as a cultural promoter
     */
    culturalProjectsPromoter?: boolean;
    /**
     * CNAE code
     */
    cnae?: string;
    /**
     * Special taxation regime identifier
     */
    specialTaxRegime?: string;
    /**
     * Service list item, as http://www.planalto.gov.br/ccivil_03/leis/LCP/Lcp116.htm
     */
    serviceListItem?: string;
    /**
     * Serial Number used by your company to issue invoices. In most cities the serial number used is '1' or 'E'
     */
    rpsSerie?: string;
    /**
     * RPS number used on the last invoice issued by your company. If your last NF issued has an RPS equal to '100', this field must be filled in with '101'. If you have never issued invoices through your city hall's website, enter '1' in this field
     */
    rpsNumber?: number;
    /**
     * Batch number used on the last invoice issued by your company. If the last lot used in your city hall is '25', this field must be filled in with '26'. Only enter this field if your city hall requires the use of lots
     */
    loteNumber?: number;
    /**
     * User to access your city's city hall website
     */
    username?: string;
    /**
     * Password to access the city hall website
     */
    password?: string;
    /**
     * Token for access to the city hall website (If access to your city hall website is via Token)
     */
    accessToken?: string;
    certificateFile?: File;
    /**
     * Password for the digital certificate sent (If access to your city hall website through a digital certificate)
     */
    certificatePassword?: string;
    /**
     * Identifier of the tax calculation regime. It must only be completed by companies classified as ME or EPP opting for Simples Nacional. Consult the need for this information with your city hall or accounting department.
     */
    nationalPortalTaxCalculationRegime?: string;
  };
  path?: never;
  query?: never;
  url: "/v3/fiscalInfo/";
};

export type CreateAndUpdateTaxInformationErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateAndUpdateTaxInformationResponses = {
  /**
   * OK
   */
  200: ApiCustomerFiscalInfoGetResponseDto;
};

export type CreateAndUpdateTaxInformationResponse =
  CreateAndUpdateTaxInformationResponses[keyof CreateAndUpdateTaxInformationResponses];

export type ListMunicipalServicesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
    /**
     * Service Name
     */
    description?: string;
  };
  url: "/v3/fiscalInfo/services";
};

export type ListMunicipalServicesErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type ListMunicipalServicesResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<{
      /**
       * Unique service identifier
       */
      id?: string;
      /**
       * Service description
       */
      description?: string;
      /**
       * ISS percentage rate
       */
      issTax?: number;
    }>;
  };
};

export type ListMunicipalServicesResponse =
  ListMunicipalServicesResponses[keyof ListMunicipalServicesResponses];

export type ConfigureInvoiceIssuingPortalData = {
  body?: {
    /**
     * Indicates whether the issuing of invoices through the national portal should be enabled or not.
     */
    enabled: boolean;
  };
  path?: never;
  query?: never;
  url: "/v3/fiscalInfo/nationalPortal";
};

export type ConfigureInvoiceIssuingPortalErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ConfigureInvoiceIssuingPortalResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Status of the request to change the use status of national portal for issuing invoices.
     */
    success?: boolean;
  };
};

export type ConfigureInvoiceIssuingPortalResponse =
  ConfigureInvoiceIssuingPortalResponses[keyof ConfigureInvoiceIssuingPortalResponses];

export type ListWebhooksData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
  };
  url: "/v3/webhooks";
};

export type ListWebhooksErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type ListWebhooksResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<ApiPushNotificationConfigGetResponseDto>;
  };
};

export type ListWebhooksResponse =
  ListWebhooksResponses[keyof ListWebhooksResponses];

export type CreateNewWebhookData = {
  body?: ApiPushNotificationConfigSaveRequestDto;
  path?: never;
  query?: never;
  url: "/v3/webhooks";
};

export type CreateNewWebhookErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateNewWebhookResponses = {
  /**
   * OK
   */
  200: ApiPushNotificationConfigGetResponseDto;
};

export type CreateNewWebhookResponse =
  CreateNewWebhookResponses[keyof CreateNewWebhookResponses];

export type RemoveWebhookData = {
  body?: never;
  path: {
    /**
     * Unique Webhook Identifier
     */
    id: string;
  };
  query?: never;
  url: "/v3/webhooks/{id}";
};

export type RemoveWebhookErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RemoveWebhookResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Indicates whether the Webhook was removed
     */
    deleted?: boolean;
    /**
     * Unique Webhook Identifier
     */
    id?: string;
  };
};

export type RemoveWebhookResponse =
  RemoveWebhookResponses[keyof RemoveWebhookResponses];

export type RetrieveASingleWebhookData = {
  body?: never;
  path: {
    /**
     * Unique Webhook Identifier
     */
    id: string;
  };
  query?: never;
  url: "/v3/webhooks/{id}";
};

export type RetrieveASingleWebhookErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrieveASingleWebhookResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Unique Webhook Identifier
     */
    id?: string;
    /**
     * Webhook name
     */
    name?: string;
    /**
     * Webhook URL
     */
    url?: string;
    /**
     * Email that will receive notifications about the Webhook
     */
    email?: string;
    /**
     * Set whether the Webhook is active
     */
    enabled?: boolean;
    /**
     * Set whether the sync queue is stopped
     */
    interrupted?: boolean;
    /**
     * API Version
     */
    apiVersion?: number;
    /**
     * Webhook authentication token
     */
    authToken?: string;
    sendType?: ApiPushNotificationConfigGetResponsePushNotificationSendType;
    /**
     * List of events this Webhook will observe
     */
    events?: Array<string>;
  };
};

export type RetrieveASingleWebhookResponse =
  RetrieveASingleWebhookResponses[keyof RetrieveASingleWebhookResponses];

export type UpdateExistingWebhookData = {
  body?: {
    /**
     * Webhook name
     */
    name?: string;
    /**
     * Event destination URL
     */
    url?: string;
    sendType?: ApiPushNotificationConfigUpdateRequestPushNotificationSendType;
    /**
     * Set whether the Webhook is active
     */
    enabled?: boolean;
    /**
     * Set whether the sync queue is stopped
     */
    interrupted?: boolean;
    /**
     * Webhook authentication token
     */
    authToken?: string;
    /**
     * List of events this Webhook will observe
     */
    events?: Array<string>;
  };
  path: {
    /**
     * Unique Webhook Identifier
     */
    id: string;
  };
  query?: never;
  url: "/v3/webhooks/{id}";
};

export type UpdateExistingWebhookErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type UpdateExistingWebhookResponses = {
  /**
   * OK
   */
  200: ApiPushNotificationConfigGetResponseDto;
};

export type UpdateExistingWebhookResponse =
  UpdateExistingWebhookResponses[keyof UpdateExistingWebhookResponses];

export type ListSubaccountsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
    /**
     * Filter by the subaccount's CPF or CNPJ
     */
    cpfCnpj?: string;
    /**
     * Filter by subaccount email
     */
    email?: string;
    /**
     * Filter by subaccount name
     */
    name?: string;
    /**
     * Filter by subaccount walletId
     */
    walletId?: string;
  };
  url: "/v3/accounts";
};

export type ListSubaccountsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type ListSubaccountsResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<ApiCustomerGetResponseDto>;
  };
};

export type ListSubaccountsResponse =
  ListSubaccountsResponses[keyof ListSubaccountsResponses];

export type CreateSubaccountData = {
  body?: {
    /**
     * Subaccount name
     */
    name: string;
    /**
     * Subaccount email
     */
    email: string;
    /**
     * Email for subaccount login, if not provided, the subaccount email will be used
     */
    loginEmail?: string;
    /**
     * CPF or CNPJ of the subaccount owner
     */
    cpfCnpj: string;
    /**
     * Date of birth (only for Individuals)
     */
    birthDate?: Date;
    companyType?: ApiCustomerSaveRequestCompanyType;
    /**
     * Telephone
     */
    phone?: string;
    /**
     * Cellphone
     */
    mobilePhone: string;
    /**
     * Url reffered to the subaccount
     */
    site?: string;
    /**
     * Billing/Monthly income
     */
    incomeValue: number;
    /**
     * Public place
     */
    address: string;
    /**
     * Address number
     */
    addressNumber: string;
    /**
     * Address complement
     */
    complement?: string;
    /**
     * Neighborhood
     */
    province: string;
    /**
     * Address zip code
     */
    postalCode: string;
    /**
     * Array with desired Webhooks settings
     */
    webhooks?: Array<{
      /**
       * Webhook name
       */
      name?: string;
      /**
       * Webhook URL
       */
      url?: string;
      /**
       * Email that will receive notifications about the Webhook
       */
      email?: string;
      /**
       * Set whether the Webhook is active
       */
      enabled?: boolean;
      /**
       * Set whether the sync queue is stopped
       */
      interrupted?: boolean;
      /**
       * API Version
       */
      apiVersion?: number;
      /**
       * Webhook authentication token
       */
      authToken?: string;
      sendType?: ApiPushNotificationConfigSaveRequestPushNotificationSendType;
      /**
       * List of events this Webhook will observe
       */
      events?: Array<string>;
    }>;
  };
  path?: never;
  query?: never;
  url: "/v3/accounts";
};

export type CreateSubaccountErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateSubaccountResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Unique subaccount identifier in Asaas
     */
    id?: string;
    /**
     * Subaccount name
     */
    name?: string;
    /**
     * Subaccount email
     */
    email?: string;
    /**
     * Email for subaccount login, if not provided, the subaccount email will be used
     */
    loginEmail?: string;
    /**
     * Telephone
     */
    phone?: string;
    /**
     * Cellphone
     */
    mobilePhone?: string;
    /**
     * Public place
     */
    address?: string;
    /**
     * Address number
     */
    addressNumber?: string;
    /**
     * Address complement
     */
    complement?: string;
    /**
     * Neighborhood
     */
    province?: string;
    /**
     * Address zip code
     */
    postalCode?: string;
    /**
     * CPF or CNPJ of the subaccount owner
     */
    cpfCnpj?: string;
    /**
     * Date of birth (only for Individuals)
     */
    birthDate?: Date;
    personType?: ApiCustomerSaveResponsePersonType;
    companyType?: ApiCustomerSaveResponseCompanyType;
    /**
     * Unique city identifier in Asaas
     */
    city?: number;
    /**
     * State abbreviation (SP, RJ, SC, ...)
     */
    state?: string;
    /**
     * Country (Fixed Brazil)
     */
    country?: string;
    /**
     * Display name (auto-populated)
     */
    tradingName?: string;
    /**
     * Url reffered to the subaccount
     */
    site?: string;
    /**
     * Unique wallet identifier to split charges or transfer between Asaas accounts
     */
    walletId?: string;
    accountNumber?: ApiCustomerAccountNumberDto;
    commercialInfoExpiration?: ApiCustomerUpdateRequestCommercialInfoExpirationResponseDto;
    /**
     * API key
     */
    apiKey?: string;
  };
};

export type CreateSubaccountResponse =
  CreateSubaccountResponses[keyof CreateSubaccountResponses];

export type RetrieveASingleSubaccountData = {
  body?: never;
  path: {
    /**
     * Unique subaccount identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/accounts/{id}";
};

export type RetrieveASingleSubaccountErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrieveASingleSubaccountResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Unique subaccount identifier in Asaas
     */
    id?: string;
    /**
     * Subaccount name
     */
    name?: string;
    /**
     * Subaccount email
     */
    email?: string;
    /**
     * Email for subaccount login, if not provided, the subaccount email will be used
     */
    loginEmail?: string;
    /**
     * Telephone
     */
    phone?: string;
    /**
     * Cellphone
     */
    mobilePhone?: string;
    /**
     * Public place
     */
    address?: string;
    /**
     * Address number
     */
    addressNumber?: string;
    /**
     * Address complement
     */
    complement?: string;
    /**
     * Neighborhood
     */
    province?: string;
    /**
     * Address zip code
     */
    postalCode?: string;
    /**
     * CPF or CNPJ of the subaccount owner
     */
    cpfCnpj?: string;
    /**
     * Date of birth (only for Individuals)
     */
    birthDate?: Date;
    personType?: ApiCustomerGetResponsePersonType;
    companyType?: ApiCustomerGetResponseCompanyType;
    /**
     * Unique city identifier in Asaas
     */
    city?: number;
    /**
     * State abbreviation (SP, RJ, SC, ...)
     */
    state?: string;
    /**
     * Country (Fixed Brazil)
     */
    country?: string;
    /**
     * Display name (auto-populated)
     */
    tradingName?: string;
    /**
     * Url reffered to the subaccount
     */
    site?: string;
    /**
     * Unique wallet identifier to split charges or transfer between Asaas accounts
     */
    walletId?: string;
    accountNumber?: ApiCustomerAccountNumberDto;
    commercialInfoExpiration?: ApiCustomerUpdateRequestCommercialInfoExpirationResponseDto;
  };
};

export type RetrieveASingleSubaccountResponse =
  RetrieveASingleSubaccountResponses[keyof RetrieveASingleSubaccountResponses];

export type CheckPendingDocumentsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v3/myAccount/documents";
};

export type CheckPendingDocumentsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type CheckPendingDocumentsResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Reason why account approval was rejected
     */
    rejectReasons?: string;
    /**
     * List of objects
     */
    data?: Array<{
      /**
       * Unique document group identifier in Asaas
       */
      id?: string;
      status?: ApiAccountDocumentGroupResponseCustomerDocumentStatus;
      type?: ApiAccountDocumentGroupResponseCustomerDocumentType;
      /**
       * Document group title
       */
      title?: string;
      /**
       * Description
       */
      description?: string;
      responsible?: ApiAccountDocumentGroupResponsibleResponseDto;
      /**
       * URL for sending documents
       */
      onboardingUrl?: string;
      /**
       * Expiration date of the URL for sending documents
       */
      onboardingUrlExpirationDate?: Date;
      /**
       * Documents that have already been sent with their respective identifiers
       */
      documents?: Array<ApiAccountDocumentGetResponseDto>;
    }>;
  };
};

export type CheckPendingDocumentsResponse =
  CheckPendingDocumentsResponses[keyof CheckPendingDocumentsResponses];

export type SendDocumentsViaApiData = {
  body?: {
    documentFile?: File;
    type?: ApiAccountDocumentSaveRequestCustomerDocumentType;
  };
  path: {
    /**
     * Unique document identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/myAccount/documents/{id}";
};

export type SendDocumentsViaApiErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type SendDocumentsViaApiResponses = {
  /**
   * OK
   */
  200: ApiAccountDocumentGetResponseDto;
};

export type SendDocumentsViaApiResponse =
  SendDocumentsViaApiResponses[keyof SendDocumentsViaApiResponses];

export type RemoveSentDocumentData = {
  body?: never;
  path: {
    /**
     * Unique document identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/myAccount/documents/files/{id}";
};

export type RemoveSentDocumentErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RemoveSentDocumentResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Indicates whether the document was removed
     */
    deleted?: boolean;
    /**
     * Unique document identifier in Asaas
     */
    id?: string;
  };
};

export type RemoveSentDocumentResponse =
  RemoveSentDocumentResponses[keyof RemoveSentDocumentResponses];

export type ViewDocumentSentData = {
  body?: never;
  path: {
    /**
     * Unique document identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/myAccount/documents/files/{id}";
};

export type ViewDocumentSentErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type ViewDocumentSentResponses = {
  /**
   * OK
   */
  200: ApiAccountDocumentGetResponseDto;
};

export type ViewDocumentSentResponse =
  ViewDocumentSentResponses[keyof ViewDocumentSentResponses];

export type UpdateSentDocumentData = {
  body?: {
    documentFile: File;
  };
  path: {
    /**
     * Unique document identifier in Asaas
     */
    id: string;
  };
  query?: never;
  url: "/v3/myAccount/documents/files/{id}";
};

export type UpdateSentDocumentErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type UpdateSentDocumentResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Unique document identifier in Asaas
     */
    id?: string;
    status?: ApiAccountDocumentGetResponseCustomerDocumentStatus;
  };
};

export type UpdateSentDocumentResponse =
  UpdateSentDocumentResponses[keyof UpdateSentDocumentResponses];

export type CreateAChargebackDisputeData = {
  body?: {
    /**
     * Files to create the dispute (Maximum: 11).
     */
    files: Blob | File;
  };
  path: {
    /**
     * Unique identifier of chargeback for which the dispute will be created.
     */
    id: string;
  };
  query?: never;
  url: "/v3/chargebacks/{id}/dispute";
};

export type CreateAChargebackDisputeErrors = {
  /**
   * Bad Request
   */
  400: {
    /**
     * List of objects
     */
    errors?: Array<{
      /**
       * Error code
       */
      code?: string;
      /**
       * Error description
       */
      description?: string;
    }>;
  };
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type CreateAChargebackDisputeError =
  CreateAChargebackDisputeErrors[keyof CreateAChargebackDisputeErrors];

export type CreateAChargebackDisputeResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Unique identifier of chargeback for which the dispute will be created.
     */
    chargebackId?: string;
    status?: ApiChargebackSaveDisputeResponseChargebackDisputeStatus;
    /**
     * Names of the dispute files.
     */
    files?: Array<string>;
  };
};

export type CreateAChargebackDisputeResponse =
  CreateAChargebackDisputeResponses[keyof CreateAChargebackDisputeResponses];

export type ListChargebacksData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * List starting element
     */
    offset?: number;
    /**
     * Number of list elements (max: 100)
     */
    limit?: number;
    /**
     * Filter by used card brand.
     */
    creditCardBrand?: ApiChargebackListRequestCreditCardBrand;
    /**
     * Filter up to the chargeback opening date.
     */
    "originDisputeDate[le]"?: string;
    /**
     * Filter from a chargeback opening date.
     */
    "originDisputeDate[ge]"?: string;
    /**
     * Filter up to the transaction date.
     */
    "originTransactionDate[le]"?: string;
    /**
     * Filter from a transaction date.
     */
    "originTransactionDate[ge]"?: string;
    /**
     * Filter by chargeback status.
     */
    status?: ApiChargebackListRequestChargebackStatus;
  };
  url: "/v3/chargebacks/";
};

export type ListChargebacksErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
};

export type ListChargebacksResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Object type
     */
    object?: string;
    /**
     * Indicates whether there is another page to be searched
     */
    hasMore?: boolean;
    /**
     * Total number of items for the filters entered
     */
    totalCount?: number;
    /**
     * Number of objects per page
     */
    limit?: number;
    /**
     * Position of the object from which the page should be loaded
     */
    offset?: number;
    /**
     * List of objects
     */
    data?: Array<ApiPaymentChargebackResponseDto>;
  };
};

export type ListChargebacksResponse =
  ListChargebacksResponses[keyof ListChargebacksResponses];

export type RetrieveASingleChargebackData = {
  body?: never;
  path: {
    /**
     * Unique identifier of the payment or installment for which the chargeback will be retrieved.
     */
    id: string;
  };
  query?: never;
  url: "/v3/payments/{id}/chargeback";
};

export type RetrieveASingleChargebackErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden. Occurs when the request body is filled, GET method calls must have an empty body.
   */
  403: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type RetrieveASingleChargebackResponses = {
  /**
   * OK
   */
  200: {
    /**
     * Unique chargeback identifier.
     */
    id?: string;
    /**
     * Unique payment identifier in Asaas
     */
    payment?: string;
    /**
     * Unique installment identifier in Asaas
     */
    installment?: string;
    /**
     * Unique identifier of customer to which the chargeback is linked.
     */
    customerAccount?: string;
    status?: ApiPaymentChargebackResponseChargebackStatus;
    reason?: ApiPaymentChargebackResponseChargebackReason;
    /**
     * Chargeback opening date.
     */
    disputeStartDate?: Date;
    /**
     * Chargeback value.
     */
    value?: number;
    /**
     * Payment date on Asaas
     */
    paymentDate?: Date;
    creditCard?: ApiChargebackCreditCardResponseDto;
    disputeStatus?: ApiPaymentChargebackResponseChargebackDisputeStatus;
    /**
     * Deadline to send dispute documents.
     */
    deadlineToSendDisputeDocuments?: Date;
  };
};

export type RetrieveASingleChargebackResponse =
  RetrieveASingleChargebackResponses[keyof RetrieveASingleChargebackResponses];
