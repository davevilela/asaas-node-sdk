// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
  formDataBodySerializer,
} from "@hey-api/client-fetch";
import type {
  ListPaymentsData,
  ListPaymentsResponse,
  CreateNewPaymentData,
  CreateNewPaymentResponse,
  CreateNewPaymentError,
  CreateNewPaymentWithCreditCardData,
  CreateNewPaymentWithCreditCardResponse,
  CreateNewPaymentWithCreditCardError,
  CapturePaymentWithPreAuthorizationData,
  CapturePaymentWithPreAuthorizationResponse,
  PayAChargeWithCreditCardData,
  PayAChargeWithCreditCardResponse,
  RetrievePaymentBillingInformationData,
  RetrievePaymentBillingInformationResponse,
  PaymentViewingInformationData,
  PaymentViewingInformationResponse,
  DeletePaymentData,
  DeletePaymentResponse,
  RetrieveASinglePaymentData,
  RetrieveASinglePaymentResponse,
  UpdateExistingPaymentData,
  UpdateExistingPaymentResponse,
  RestoreRemovedPaymentData,
  RestoreRemovedPaymentResponse,
  RetrieveStatusOfAPaymentData,
  RetrieveStatusOfAPaymentResponse,
  RefundPaymentData,
  RefundPaymentResponse,
  GetDigitableBillLineData,
  GetDigitableBillLineResponse,
  GetQrCodeForPixPaymentsData,
  GetQrCodeForPixPaymentsResponse,
  ConfirmCashReceiptData,
  ConfirmCashReceiptResponse,
  UndoCashReceiptConfirmationData,
  UndoCashReceiptConfirmationResponse,
  SalesSimulatorData,
  SalesSimulatorResponse,
  RecoveringPaymentLimitsData,
  RecoveringPaymentLimitsResponse,
  ListPaymentsWithSummaryDataData,
  ListPaymentsWithSummaryDataResponse,
  CreateNewPaymentWithSummaryDataInResponseData,
  CreateNewPaymentWithSummaryDataInResponseResponse,
  CreateNewPaymentWithSummaryDataInResponseError,
  CreateNewPaymentWithCreditCardWithSummaryDataInResponseData,
  CreateNewPaymentWithCreditCardWithSummaryDataInResponseResponse,
  CreateNewPaymentWithCreditCardWithSummaryDataInResponseError,
  CapturePaymentWithPreAuthorizationWithSummaryDataInResponseData,
  CapturePaymentWithPreAuthorizationWithSummaryDataInResponseResponse,
  DeletePaymentWithSummaryDataData,
  DeletePaymentWithSummaryDataResponse,
  RetrieveASinglePaymentWithSummaryDataData,
  RetrieveASinglePaymentWithSummaryDataResponse,
  UpdateExistingPaymentWithSummaryDataInResponseData,
  UpdateExistingPaymentWithSummaryDataInResponseResponse,
  RestoreRemovedPaymentWithSummaryDataInResponseData,
  RestoreRemovedPaymentWithSummaryDataInResponseResponse,
  RefundPaymentWithSummaryDataInResponseData,
  RefundPaymentWithSummaryDataInResponseResponse,
  ConfirmCashReceiptWithSummaryDataInResponseData,
  ConfirmCashReceiptWithSummaryDataInResponseResponse,
  UndoCashReceiptConfirmationWithSummaryDataInResponseData,
  UndoCashReceiptConfirmationWithSummaryDataInResponseResponse,
  CreditCardTokenizationData,
  CreditCardTokenizationResponse,
  RetrieveRefundsOfASinglePaymentData,
  RetrieveRefundsOfASinglePaymentResponse,
  RefundBankSlipData,
  RefundBankSlipResponse,
  RetrieveASinglePaidSplitData,
  RetrieveASinglePaidSplitResponse,
  ListPaidSplitsData,
  ListPaidSplitsResponse,
  RetrieveASingleReceivedSplitData,
  RetrieveASingleReceivedSplitResponse,
  ListReceivedSplitsData,
  ListReceivedSplitsResponse,
  ListDocumentsOfAPaymentData,
  ListDocumentsOfAPaymentResponse,
  UploadPaymentDocumentsData,
  UploadPaymentDocumentsResponse,
  DeleteDocumentFromAPaymentData,
  DeleteDocumentFromAPaymentResponse,
  RetrieveASingleDocumentOfAPaymentData,
  RetrieveASingleDocumentOfAPaymentResponse,
  UpdateSettingsOfADocumentOfAPaymentData,
  UpdateSettingsOfADocumentOfAPaymentResponse,
  ListCustomersData,
  ListCustomersResponse,
  CreateNewCustomerData,
  CreateNewCustomerResponse,
  RemoveCustomerData,
  RemoveCustomerResponse,
  RetrieveASingleCustomerData,
  RetrieveASingleCustomerResponse,
  UpdateExistingCustomerData,
  UpdateExistingCustomerResponse,
  RestoreRemovedCustomerData,
  RestoreRemovedCustomerResponse,
  RetrieveNotificationsFromACustomerData,
  RetrieveNotificationsFromACustomerResponse,
  UpdateExistingNotificationData,
  UpdateExistingNotificationResponse,
  UpdateExistingNotificationsInBatchData,
  UpdateExistingNotificationsInBatchResponse,
  ListInstallmentsData,
  ListInstallmentsResponse,
  CreateInstallmentData,
  CreateInstallmentResponse,
  CreateInstallmentError,
  CreateInstallmentWithCreditCardData,
  CreateInstallmentWithCreditCardResponse,
  CreateInstallmentWithCreditCardError,
  RemoveInstallmentData,
  RemoveInstallmentResponse,
  RetrieveASingleInstallmentData,
  RetrieveASingleInstallmentResponse,
  ListPaymentsOfAInstallmentData,
  ListPaymentsOfAInstallmentResponse,
  GenerateInstallmentBookletData,
  GenerateInstallmentBookletResponse,
  RefundInstallmentData,
  RefundInstallmentResponse,
  UpdateInstallmentSplitsData,
  UpdateInstallmentSplitsResponse,
  ListSubscriptionsData,
  ListSubscriptionsResponse,
  CreateNewSubscriptionData,
  CreateNewSubscriptionResponse,
  CreateSubscriptionWithCreditCardData,
  CreateSubscriptionWithCreditCardResponse,
  RemoveSubscriptionData,
  RemoveSubscriptionResponse,
  RetrieveASingleSubscriptionData,
  RetrieveASingleSubscriptionResponse,
  UpdateExistingSubscriptionData,
  UpdateExistingSubscriptionResponse,
  ListPaymentsOfASubscriptionData,
  ListPaymentsOfASubscriptionResponse,
  GenerateSignatureBookletData,
  GenerateSignatureBookletResponse,
  RemoveConfigurationForIssuanceOfInvoicesData,
  RemoveConfigurationForIssuanceOfInvoicesResponse,
  RetrieveConfigurationForIssuanceOfInvoicesData,
  RetrieveConfigurationForIssuanceOfInvoicesResponse,
  CreateConfigurationForIssuanceOfInvoicesData,
  CreateConfigurationForIssuanceOfInvoicesResponse,
  UpdateConfigurationForIssuanceOfInvoicesData,
  UpdateConfigurationForIssuanceOfInvoicesResponse,
  ListInvoicesForSubscriptionChargesData,
  ListInvoicesForSubscriptionChargesResponse,
  ListKeysData,
  ListKeysResponse,
  CreateAKeyData,
  CreateAKeyResponse,
  RemoveKeyData,
  RemoveKeyResponse,
  RetrieveASingleKeyData,
  RetrieveASingleKeyResponse,
  CreateStaticQrcodeData,
  CreateStaticQrcodeResponse,
  DeleteStaticQrcodeData,
  DeleteStaticQrcodeResponse,
  PayAQrcodeData,
  PayAQrcodeResponse,
  DecodeAQrcodeForPaymentData,
  DecodeAQrcodeForPaymentResponse,
  RetrieveASingleTransactionData,
  RetrieveASingleTransactionResponse,
  RetrieveASingleAnticipationData,
  RetrieveASingleAnticipationResponse,
  ListTransactionsData,
  ListTransactionsResponse,
  CancelAScheduledTransactionData,
  CancelAScheduledTransactionResponse,
  ListRecurrencesData,
  ListRecurrencesResponse,
  RetrieveASingleRecurrenceData,
  RetrieveASingleRecurrenceResponse,
  CancelARecurrenceData,
  CancelARecurrenceResponse,
  ListRecurrenceItemsData,
  ListRecurrenceItemsResponse,
  CancelARecurrenceItemData,
  CancelARecurrenceItemResponse,
  ListPaymentsLinksData,
  ListPaymentsLinksResponse,
  CreateAPaymentsLinkData,
  CreateAPaymentsLinkResponse,
  RemoveAPaymentsLinkData,
  RemoveAPaymentsLinkResponse,
  RetrieveASinglePaymentsLinkData,
  RetrieveASinglePaymentsLinkResponse,
  UpdateAPaymentsLinkData,
  UpdateAPaymentsLinkResponse,
  RestoreAPaymentsLinkData,
  RestoreAPaymentsLinkResponse,
  ListImagesFromAPaymentsLinkData,
  ListImagesFromAPaymentsLinkResponse,
  AddAnImageToAPaymentsLinkData,
  AddAnImageToAPaymentsLinkResponse,
  RemoveAnImageFromPaymentsLinkData,
  RemoveAnImageFromPaymentsLinkResponse,
  RetrieveASinglePaymentsLinkImageData,
  RetrieveASinglePaymentsLinkImageResponse,
  SetPaymentsLinkMainImageData,
  SetPaymentsLinkMainImageResponse,
  ListTransfersData,
  ListTransfersResponse,
  TransferToAnotherInstitutionAccountOrPixKeyData,
  TransferToAnotherInstitutionAccountOrPixKeyResponse,
  TransferToAsaasAccountData,
  TransferToAsaasAccountResponse,
  RetrieveASingleTransferData,
  RetrieveASingleTransferResponse,
  CancelATransferData,
  CancelATransferResponse,
  ListAnticipationsData,
  ListAnticipationsResponse,
  RequestAnticipationData,
  RequestAnticipationResponse,
  SimulateAnticipationData,
  SimulateAnticipationResponse,
  RetrieveStatusOfAutomaticAnticipationData,
  RetrieveStatusOfAutomaticAnticipationResponse,
  UpdateStatusOfAutomaticAnticipationData,
  UpdateStatusOfAutomaticAnticipationResponse,
  RetrieveAnticipationLimitsData,
  RetrieveAnticipationLimitsResponse,
  CancelAnticipationData,
  CancelAnticipationResponse,
  ListPaymentDunningsData,
  ListPaymentDunningsResponse,
  CreateAPaymentDunningData,
  CreateAPaymentDunningResponse,
  SimulateAPaymentDunningData,
  SimulateAPaymentDunningResponse,
  RecoverASinglePaymentDunningData,
  RecoverASinglePaymentDunningResponse,
  EventHistoryListsData,
  EventHistoryListsResponse,
  ListPaymentsReceivedData,
  ListPaymentsReceivedResponse,
  ListPaymentsAvailableForPaymentDunningData,
  ListPaymentsAvailableForPaymentDunningResponse,
  ResendDocumentsData,
  ResendDocumentsResponse,
  CancelPaymentDunningData,
  CancelPaymentDunningResponse,
  ListBillPaymentsData,
  ListBillPaymentsResponse,
  CreateABillPaymentData,
  CreateABillPaymentResponse,
  SimulateABillPaymentData,
  SimulateABillPaymentResponse,
  RetrieveASingleBillPaymentData,
  RetrieveASingleBillPaymentResponse,
  CancelBillPaymentData,
  CancelBillPaymentResponse,
  ListMobileRechargesData,
  ListMobileRechargesResponse,
  RequestRechargeData,
  RequestRechargeResponse,
  RecoverASingleCellphoneRechargeData,
  RecoverASingleCellphoneRechargeResponse,
  CancelACellphoneRechargeData,
  CancelACellphoneRechargeResponse,
  SearchForCellPhoneProviderData,
  SearchForCellPhoneProviderResponse,
  ListCreditBureauReportsData,
  ListCreditBureauReportsResponse,
  MakeConsultationData,
  MakeConsultationResponse,
  RetrieveACreditBureauReportData,
  RetrieveACreditBureauReportResponse,
  RetrieveExtractData,
  RetrieveExtractResponse,
  RetrieveAccountBalanceData,
  RetrieveAccountBalanceResponse,
  BillingStatisticsData,
  BillingStatisticsResponse,
  RetrieveSplitValuesData,
  RetrieveSplitValuesResponse,
  RetrieveBusinessDataData,
  RetrieveBusinessDataResponse,
  UpdateBusinessDataData,
  UpdateBusinessDataResponse,
  RetrievePersonalizationSettingsData,
  RetrievePersonalizationSettingsResponse,
  SavePaymentCheckoutPersonalizationData,
  SavePaymentCheckoutPersonalizationResponse,
  RetrieveAsaasAccountNumberData,
  RetrieveAsaasAccountNumberResponse,
  RetrieveAccountFeesData,
  RetrieveAccountFeesResponse,
  CheckAccountRegistrationStatusData,
  CheckAccountRegistrationStatusResponse,
  RetrieveWalletidData,
  RetrieveWalletidResponse,
  DeleteWhiteLabelSubaccountData,
  DeleteWhiteLabelSubaccountResponse,
  ListInvoicesData,
  ListInvoicesResponse,
  ScheduleInvoiceData,
  ScheduleInvoiceResponse,
  RetrieveASingleInvoiceData,
  RetrieveASingleInvoiceResponse,
  UpdateInvoiceData,
  UpdateInvoiceResponse,
  IssueAnInvoiceData,
  IssueAnInvoiceResponse,
  CancelAnInvoiceData,
  CancelAnInvoiceResponse,
  ListMunicipalConfigurationsData,
  ListMunicipalConfigurationsResponse,
  RetrieveTaxInformationData,
  RetrieveTaxInformationResponse,
  CreateAndUpdateTaxInformationData,
  CreateAndUpdateTaxInformationResponse,
  ListMunicipalServicesData,
  ListMunicipalServicesResponse,
  ConfigureInvoiceIssuingPortalData,
  ConfigureInvoiceIssuingPortalResponse,
  ListWebhooksData,
  ListWebhooksResponse,
  CreateNewWebhookData,
  CreateNewWebhookResponse,
  RemoveWebhookData,
  RemoveWebhookResponse,
  RetrieveASingleWebhookData,
  RetrieveASingleWebhookResponse,
  UpdateExistingWebhookData,
  UpdateExistingWebhookResponse,
  ListSubaccountsData,
  ListSubaccountsResponse,
  CreateSubaccountData,
  CreateSubaccountResponse,
  RetrieveASingleSubaccountData,
  RetrieveASingleSubaccountResponse,
  CheckPendingDocumentsData,
  CheckPendingDocumentsResponse,
  SendDocumentsViaApiData,
  SendDocumentsViaApiResponse,
  RemoveSentDocumentData,
  RemoveSentDocumentResponse,
  ViewDocumentSentData,
  ViewDocumentSentResponse,
  UpdateSentDocumentData,
  UpdateSentDocumentResponse,
  CreateAChargebackDisputeData,
  CreateAChargebackDisputeResponse,
  CreateAChargebackDisputeError,
  ListChargebacksData,
  ListChargebacksResponse,
  RetrieveASingleChargebackData,
  RetrieveASingleChargebackResponse,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * List payments
 */
export const listPayments = <ThrowOnError extends boolean = false>(
  options?: Options<ListPaymentsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListPaymentsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments",
    ...options,
  });
};

/**
 * Create new payment
 */
export const createNewPayment = <ThrowOnError extends boolean = false>(
  options?: Options<CreateNewPaymentData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateNewPaymentResponse,
    CreateNewPaymentError,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create new payment with credit card
 */
export const createNewPaymentWithCreditCard = <
  ThrowOnError extends boolean = false
>(
  options?: Options<CreateNewPaymentWithCreditCardData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateNewPaymentWithCreditCardResponse,
    CreateNewPaymentWithCreditCardError,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Capture payment with Pre-Authorization
 */
export const capturePaymentWithPreAuthorization = <
  ThrowOnError extends boolean = false
>(
  options: Options<CapturePaymentWithPreAuthorizationData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CapturePaymentWithPreAuthorizationResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/{id}/captureAuthorizedPayment",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Pay a charge with a credit card
 */
export const payAChargeWithCreditCard = <ThrowOnError extends boolean = false>(
  options: Options<PayAChargeWithCreditCardData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    PayAChargeWithCreditCardResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/{id}/payWithCreditCard",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Retrieve payment billing information
 */
export const retrievePaymentBillingInformation = <
  ThrowOnError extends boolean = false
>(
  options: Options<RetrievePaymentBillingInformationData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrievePaymentBillingInformationResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/{id}/billingInfo",
    ...options,
  });
};

/**
 * Payment viewing information
 */
export const paymentViewingInformation = <ThrowOnError extends boolean = false>(
  options: Options<PaymentViewingInformationData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    PaymentViewingInformationResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/{id}/viewingInfo",
    ...options,
  });
};

/**
 * Delete payment
 */
export const deletePayment = <ThrowOnError extends boolean = false>(
  options: Options<DeletePaymentData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeletePaymentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/{id}",
    ...options,
  });
};

/**
 * Retrieve a single payment
 */
export const retrieveASinglePayment = <ThrowOnError extends boolean = false>(
  options: Options<RetrieveASinglePaymentData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveASinglePaymentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/{id}",
    ...options,
  });
};

/**
 * Update existing payment
 */
export const updateExistingPayment = <ThrowOnError extends boolean = false>(
  options: Options<UpdateExistingPaymentData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateExistingPaymentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Restore removed payment
 */
export const restoreRemovedPayment = <ThrowOnError extends boolean = false>(
  options: Options<RestoreRemovedPaymentData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    RestoreRemovedPaymentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/{id}/restore",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Retrieve status of a payment
 */
export const retrieveStatusOfAPayment = <ThrowOnError extends boolean = false>(
  options: Options<RetrieveStatusOfAPaymentData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveStatusOfAPaymentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/{id}/status",
    ...options,
  });
};

/**
 * Refund payment
 */
export const refundPayment = <ThrowOnError extends boolean = false>(
  options: Options<RefundPaymentData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    RefundPaymentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/{id}/refund",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get digitable bill line
 */
export const getDigitableBillLine = <ThrowOnError extends boolean = false>(
  options: Options<GetDigitableBillLineData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetDigitableBillLineResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/{id}/identificationField",
    ...options,
  });
};

/**
 * Get QR Code for Pix payments
 */
export const getQrCodeForPixPayments = <ThrowOnError extends boolean = false>(
  options: Options<GetQrCodeForPixPaymentsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetQrCodeForPixPaymentsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/{id}/pixQrCode",
    ...options,
  });
};

/**
 * Confirm cash receipt
 */
export const confirmCashReceipt = <ThrowOnError extends boolean = false>(
  options: Options<ConfirmCashReceiptData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ConfirmCashReceiptResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/{id}/receiveInCash",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Undo cash receipt confirmation
 */
export const undoCashReceiptConfirmation = <
  ThrowOnError extends boolean = false
>(
  options: Options<UndoCashReceiptConfirmationData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    UndoCashReceiptConfirmationResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/{id}/undoReceivedInCash",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Sales simulator
 */
export const salesSimulator = <ThrowOnError extends boolean = false>(
  options?: Options<SalesSimulatorData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    SalesSimulatorResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/simulate",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Recovering payment limits
 */
export const recoveringPaymentLimits = <ThrowOnError extends boolean = false>(
  options?: Options<RecoveringPaymentLimitsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RecoveringPaymentLimitsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/limits",
    ...options,
  });
};

/**
 * List payments with summary data
 */
export const listPaymentsWithSummaryData = <
  ThrowOnError extends boolean = false
>(
  options?: Options<ListPaymentsWithSummaryDataData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListPaymentsWithSummaryDataResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/lean/payments",
    ...options,
  });
};

/**
 * Create new payment with summary data in response
 */
export const createNewPaymentWithSummaryDataInResponse = <
  ThrowOnError extends boolean = false
>(
  options?: Options<CreateNewPaymentWithSummaryDataInResponseData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateNewPaymentWithSummaryDataInResponseResponse,
    CreateNewPaymentWithSummaryDataInResponseError,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/lean/payments",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create new payment with credit card with summary data in response
 */
export const createNewPaymentWithCreditCardWithSummaryDataInResponse = <
  ThrowOnError extends boolean = false
>(
  options?: Options<
    CreateNewPaymentWithCreditCardWithSummaryDataInResponseData,
    ThrowOnError
  >
) => {
  return (options?.client ?? client).post<
    CreateNewPaymentWithCreditCardWithSummaryDataInResponseResponse,
    CreateNewPaymentWithCreditCardWithSummaryDataInResponseError,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/lean/payments/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Capture payment with Pre-Authorization with summary data in response
 */
export const capturePaymentWithPreAuthorizationWithSummaryDataInResponse = <
  ThrowOnError extends boolean = false
>(
  options: Options<
    CapturePaymentWithPreAuthorizationWithSummaryDataInResponseData,
    ThrowOnError
  >
) => {
  return (options?.client ?? client).post<
    CapturePaymentWithPreAuthorizationWithSummaryDataInResponseResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/lean/payments/{id}/captureAuthorizedPayment",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete payment with summary data
 */
export const deletePaymentWithSummaryData = <
  ThrowOnError extends boolean = false
>(
  options: Options<DeletePaymentWithSummaryDataData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeletePaymentWithSummaryDataResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/lean/payments/{id}",
    ...options,
  });
};

/**
 * Retrieve a single payment with summary data
 */
export const retrieveASinglePaymentWithSummaryData = <
  ThrowOnError extends boolean = false
>(
  options: Options<RetrieveASinglePaymentWithSummaryDataData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveASinglePaymentWithSummaryDataResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/lean/payments/{id}",
    ...options,
  });
};

/**
 * Update existing payment with summary data in response
 */
export const updateExistingPaymentWithSummaryDataInResponse = <
  ThrowOnError extends boolean = false
>(
  options: Options<
    UpdateExistingPaymentWithSummaryDataInResponseData,
    ThrowOnError
  >
) => {
  return (options?.client ?? client).put<
    UpdateExistingPaymentWithSummaryDataInResponseResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/lean/payments/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Restore removed payment with summary data in response
 */
export const restoreRemovedPaymentWithSummaryDataInResponse = <
  ThrowOnError extends boolean = false
>(
  options: Options<
    RestoreRemovedPaymentWithSummaryDataInResponseData,
    ThrowOnError
  >
) => {
  return (options?.client ?? client).post<
    RestoreRemovedPaymentWithSummaryDataInResponseResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/lean/payments/{id}/restore",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Refund payment with summary data in response
 */
export const refundPaymentWithSummaryDataInResponse = <
  ThrowOnError extends boolean = false
>(
  options: Options<RefundPaymentWithSummaryDataInResponseData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    RefundPaymentWithSummaryDataInResponseResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/lean/payments/{id}/refund",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Confirm cash receipt with summary data in response
 */
export const confirmCashReceiptWithSummaryDataInResponse = <
  ThrowOnError extends boolean = false
>(
  options: Options<
    ConfirmCashReceiptWithSummaryDataInResponseData,
    ThrowOnError
  >
) => {
  return (options?.client ?? client).post<
    ConfirmCashReceiptWithSummaryDataInResponseResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/lean/payments/{id}/receiveInCash",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Undo cash receipt confirmation with summary data in response
 */
export const undoCashReceiptConfirmationWithSummaryDataInResponse = <
  ThrowOnError extends boolean = false
>(
  options: Options<
    UndoCashReceiptConfirmationWithSummaryDataInResponseData,
    ThrowOnError
  >
) => {
  return (options?.client ?? client).post<
    UndoCashReceiptConfirmationWithSummaryDataInResponseResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/lean/payments/{id}/undoReceivedInCash",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Credit card tokenization
 */
export const creditCardTokenization = <ThrowOnError extends boolean = false>(
  options?: Options<CreditCardTokenizationData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreditCardTokenizationResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/creditCard/tokenizeCreditCard",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Retrieve refunds of a single payment
 */
export const retrieveRefundsOfASinglePayment = <
  ThrowOnError extends boolean = false
>(
  options: Options<RetrieveRefundsOfASinglePaymentData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveRefundsOfASinglePaymentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/{id}/refunds",
    ...options,
  });
};

/**
 * Refund Bank Slip
 */
export const refundBankSlip = <ThrowOnError extends boolean = false>(
  options: Options<RefundBankSlipData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    RefundBankSlipResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/{id}/bankSlip/refund",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Retrieve a single paid split
 */
export const retrieveASinglePaidSplit = <ThrowOnError extends boolean = false>(
  options: Options<RetrieveASinglePaidSplitData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveASinglePaidSplitResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/splits/paid/{id}",
    ...options,
  });
};

/**
 * List paid splits
 */
export const listPaidSplits = <ThrowOnError extends boolean = false>(
  options?: Options<ListPaidSplitsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListPaidSplitsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/splits/paid",
    ...options,
  });
};

/**
 * Retrieve a single received split
 */
export const retrieveASingleReceivedSplit = <
  ThrowOnError extends boolean = false
>(
  options: Options<RetrieveASingleReceivedSplitData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveASingleReceivedSplitResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/splits/received/{id}",
    ...options,
  });
};

/**
 * List received splits
 */
export const listReceivedSplits = <ThrowOnError extends boolean = false>(
  options?: Options<ListReceivedSplitsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListReceivedSplitsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/splits/received",
    ...options,
  });
};

/**
 * List documents of a payment
 */
export const listDocumentsOfAPayment = <ThrowOnError extends boolean = false>(
  options: Options<ListDocumentsOfAPaymentData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListDocumentsOfAPaymentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/{id}/documents",
    ...options,
  });
};

/**
 * Upload payment documents
 */
export const uploadPaymentDocuments = <ThrowOnError extends boolean = false>(
  options: Options<UploadPaymentDocumentsData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    UploadPaymentDocumentsResponse,
    unknown,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/{id}/documents",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Delete document from a payment
 */
export const deleteDocumentFromAPayment = <
  ThrowOnError extends boolean = false
>(
  options: Options<DeleteDocumentFromAPaymentData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteDocumentFromAPaymentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/{id}/documents/{documentId}",
    ...options,
  });
};

/**
 * Retrieve a single document of a payment
 */
export const retrieveASingleDocumentOfAPayment = <
  ThrowOnError extends boolean = false
>(
  options: Options<RetrieveASingleDocumentOfAPaymentData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveASingleDocumentOfAPaymentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/{id}/documents/{documentId}",
    ...options,
  });
};

/**
 * Update settings of a document of a payment
 */
export const updateSettingsOfADocumentOfAPayment = <
  ThrowOnError extends boolean = false
>(
  options: Options<UpdateSettingsOfADocumentOfAPaymentData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateSettingsOfADocumentOfAPaymentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/{id}/documents/{documentId}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List customers
 */
export const listCustomers = <ThrowOnError extends boolean = false>(
  options?: Options<ListCustomersData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListCustomersResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/customers",
    ...options,
  });
};

/**
 * Create new customer
 */
export const createNewCustomer = <ThrowOnError extends boolean = false>(
  options?: Options<CreateNewCustomerData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateNewCustomerResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/customers",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Remove Customer
 */
export const removeCustomer = <ThrowOnError extends boolean = false>(
  options: Options<RemoveCustomerData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    RemoveCustomerResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/customers/{id}",
    ...options,
  });
};

/**
 * Retrieve a single customer
 */
export const retrieveASingleCustomer = <ThrowOnError extends boolean = false>(
  options: Options<RetrieveASingleCustomerData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveASingleCustomerResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/customers/{id}",
    ...options,
  });
};

/**
 * Update existing customer
 */
export const updateExistingCustomer = <ThrowOnError extends boolean = false>(
  options: Options<UpdateExistingCustomerData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateExistingCustomerResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/customers/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Restore removed customer
 */
export const restoreRemovedCustomer = <ThrowOnError extends boolean = false>(
  options: Options<RestoreRemovedCustomerData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    RestoreRemovedCustomerResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/customers/{id}/restore",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Retrieve notifications from a customer
 */
export const retrieveNotificationsFromACustomer = <
  ThrowOnError extends boolean = false
>(
  options: Options<RetrieveNotificationsFromACustomerData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveNotificationsFromACustomerResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/customers/{id}/notifications",
    ...options,
  });
};

/**
 * Update existing notification
 */
export const updateExistingNotification = <
  ThrowOnError extends boolean = false
>(
  options: Options<UpdateExistingNotificationData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateExistingNotificationResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/notifications/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Update existing notifications in batch
 * It is possible to customize various notifications, regardless of the communication channel used (email, SMS, and voice) and who should receive the notification (you and/or your customer) by sending the customer's ID and the notifications to be updated.
 */
export const updateExistingNotificationsInBatch = <
  ThrowOnError extends boolean = false
>(
  options?: Options<UpdateExistingNotificationsInBatchData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateExistingNotificationsInBatchResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/notifications/batch",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List installments
 */
export const listInstallments = <ThrowOnError extends boolean = false>(
  options?: Options<ListInstallmentsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListInstallmentsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/installments",
    ...options,
  });
};

/**
 * Create Installment
 */
export const createInstallment = <ThrowOnError extends boolean = false>(
  options?: Options<CreateInstallmentData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateInstallmentResponse,
    CreateInstallmentError,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/installments",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create Installment with credit card
 */
export const createInstallmentWithCreditCard = <
  ThrowOnError extends boolean = false
>(
  options?: Options<CreateInstallmentWithCreditCardData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateInstallmentWithCreditCardResponse,
    CreateInstallmentWithCreditCardError,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/installments/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Remove installment
 */
export const removeInstallment = <ThrowOnError extends boolean = false>(
  options: Options<RemoveInstallmentData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    RemoveInstallmentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/installments/{id}",
    ...options,
  });
};

/**
 * Retrieve a single installment
 */
export const retrieveASingleInstallment = <
  ThrowOnError extends boolean = false
>(
  options: Options<RetrieveASingleInstallmentData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveASingleInstallmentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/installments/{id}",
    ...options,
  });
};

/**
 * List payments of a installment
 */
export const listPaymentsOfAInstallment = <
  ThrowOnError extends boolean = false
>(
  options: Options<ListPaymentsOfAInstallmentData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListPaymentsOfAInstallmentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/installments/{id}/payments",
    ...options,
  });
};

/**
 * Generate installment booklet
 */
export const generateInstallmentBooklet = <
  ThrowOnError extends boolean = false
>(
  options: Options<GenerateInstallmentBookletData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GenerateInstallmentBookletResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/installments/{id}/paymentBook",
    ...options,
  });
};

/**
 * Refund installment
 * It is possible to refund an installment received or confirmed via credit card.
 *
 * Just like the process of refunding a standalone credit card billing, the corresponding balance of the installment is debited from your account on Asaas, and the billing is canceled on your customer's card. The cancellation may take up to 10 business days to appear on your customer's statement.
 */
export const refundInstallment = <ThrowOnError extends boolean = false>(
  options: Options<RefundInstallmentData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    RefundInstallmentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/installments/{id}/refund",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Update installment splits
 */
export const updateInstallmentSplits = <ThrowOnError extends boolean = false>(
  options: Options<UpdateInstallmentSplitsData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateInstallmentSplitsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/installments/{id}/splits",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List subscriptions
 */
export const listSubscriptions = <ThrowOnError extends boolean = false>(
  options?: Options<ListSubscriptionsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListSubscriptionsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/subscriptions",
    ...options,
  });
};

/**
 * Create new subscription
 */
export const createNewSubscription = <ThrowOnError extends boolean = false>(
  options?: Options<CreateNewSubscriptionData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateNewSubscriptionResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/subscriptions",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create subscription with credit card
 */
export const createSubscriptionWithCreditCard = <
  ThrowOnError extends boolean = false
>(
  options?: Options<CreateSubscriptionWithCreditCardData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateSubscriptionWithCreditCardResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/subscriptions/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Remove subscription
 */
export const removeSubscription = <ThrowOnError extends boolean = false>(
  options: Options<RemoveSubscriptionData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    RemoveSubscriptionResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/subscriptions/{id}",
    ...options,
  });
};

/**
 * Retrieve a single subscription
 */
export const retrieveASingleSubscription = <
  ThrowOnError extends boolean = false
>(
  options: Options<RetrieveASingleSubscriptionData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveASingleSubscriptionResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/subscriptions/{id}",
    ...options,
  });
};

/**
 * Update existing subscription
 */
export const updateExistingSubscription = <
  ThrowOnError extends boolean = false
>(
  options: Options<UpdateExistingSubscriptionData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateExistingSubscriptionResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/subscriptions/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List payments of a subscription
 */
export const listPaymentsOfASubscription = <
  ThrowOnError extends boolean = false
>(
  options: Options<ListPaymentsOfASubscriptionData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListPaymentsOfASubscriptionResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/subscriptions/{id}/payments",
    ...options,
  });
};

/**
 * Generate subscription booklet
 */
export const generateSignatureBooklet = <ThrowOnError extends boolean = false>(
  options: Options<GenerateSignatureBookletData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GenerateSignatureBookletResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/subscriptions/{id}/paymentBook",
    ...options,
  });
};

/**
 * Remove configuration for issuing invoices
 */
export const removeConfigurationForIssuanceOfInvoices = <
  ThrowOnError extends boolean = false
>(
  options: Options<RemoveConfigurationForIssuanceOfInvoicesData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    RemoveConfigurationForIssuanceOfInvoicesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/subscriptions/{id}/invoiceSettings",
    ...options,
  });
};

/**
 * Retrieve configuration for issuing invoices
 */
export const retrieveConfigurationForIssuanceOfInvoices = <
  ThrowOnError extends boolean = false
>(
  options: Options<RetrieveConfigurationForIssuanceOfInvoicesData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveConfigurationForIssuanceOfInvoicesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/subscriptions/{id}/invoiceSettings",
    ...options,
  });
};

/**
 * Create configuration for issuing invoices
 */
export const createConfigurationForIssuanceOfInvoices = <
  ThrowOnError extends boolean = false
>(
  options: Options<CreateConfigurationForIssuanceOfInvoicesData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateConfigurationForIssuanceOfInvoicesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/subscriptions/{id}/invoiceSettings",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Update configuration for issuing invoices
 */
export const updateConfigurationForIssuanceOfInvoices = <
  ThrowOnError extends boolean = false
>(
  options: Options<UpdateConfigurationForIssuanceOfInvoicesData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateConfigurationForIssuanceOfInvoicesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/subscriptions/{id}/invoiceSettings",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List invoices for subscription charges
 */
export const listInvoicesForSubscriptionCharges = <
  ThrowOnError extends boolean = false
>(
  options: Options<ListInvoicesForSubscriptionChargesData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListInvoicesForSubscriptionChargesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/subscriptions/{id}/invoices",
    ...options,
  });
};

/**
 * List keys
 */
export const listKeys = <ThrowOnError extends boolean = false>(
  options?: Options<ListKeysData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListKeysResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/pix/addressKeys",
    ...options,
  });
};

/**
 * Create a key
 */
export const createAKey = <ThrowOnError extends boolean = false>(
  options?: Options<CreateAKeyData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateAKeyResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/pix/addressKeys",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Remove key
 */
export const removeKey = <ThrowOnError extends boolean = false>(
  options: Options<RemoveKeyData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    RemoveKeyResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/pix/addressKeys/{id}",
    ...options,
  });
};

/**
 * Retrieve a single key
 */
export const retrieveASingleKey = <ThrowOnError extends boolean = false>(
  options: Options<RetrieveASingleKeyData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveASingleKeyResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/pix/addressKeys/{id}",
    ...options,
  });
};

/**
 * Create static QRCode
 */
export const createStaticQrcode = <ThrowOnError extends boolean = false>(
  options?: Options<CreateStaticQrcodeData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateStaticQrcodeResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/pix/qrCodes/static",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Remove a static QR Code
 */
export const deleteStaticQrcode = <ThrowOnError extends boolean = false>(
  options: Options<DeleteStaticQrcodeData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteStaticQrcodeResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/pix/qrCodes/static/{id}",
    ...options,
  });
};

/**
 * Pay a QRCode
 */
export const payAQrcode = <ThrowOnError extends boolean = false>(
  options?: Options<PayAQrcodeData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    PayAQrcodeResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/pix/qrCodes/pay",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Decode a QRCode for payment
 */
export const decodeAQrcodeForPayment = <ThrowOnError extends boolean = false>(
  options?: Options<DecodeAQrcodeForPaymentData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    DecodeAQrcodeForPaymentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/pix/qrCodes/decode",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Retrieve a single transaction
 */
export const retrieveASingleTransaction = <
  ThrowOnError extends boolean = false
>(
  options: Options<RetrieveASingleTransactionData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveASingleTransactionResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/pix/transactions/{id}",
    ...options,
  });
};

/**
 * Retrieve a single anticipation
 */
export const retrieveASingleAnticipation = <
  ThrowOnError extends boolean = false
>(
  options: Options<RetrieveASingleAnticipationData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveASingleAnticipationResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/anticipations/{id}",
    ...options,
  });
};

/**
 * List transactions
 */
export const listTransactions = <ThrowOnError extends boolean = false>(
  options?: Options<ListTransactionsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListTransactionsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/pix/transactions",
    ...options,
  });
};

/**
 * Cancel a scheduled transaction
 */
export const cancelAScheduledTransaction = <
  ThrowOnError extends boolean = false
>(
  options: Options<CancelAScheduledTransactionData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CancelAScheduledTransactionResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/pix/transactions/{id}/cancel",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List recurrences
 */
export const listRecurrences = <ThrowOnError extends boolean = false>(
  options?: Options<ListRecurrencesData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListRecurrencesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/pix/transactions/recurrings",
    ...options,
  });
};

/**
 * Retrieve a single recurrence
 */
export const retrieveASingleRecurrence = <ThrowOnError extends boolean = false>(
  options: Options<RetrieveASingleRecurrenceData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveASingleRecurrenceResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/pix/transactions/recurrings/{id}",
    ...options,
  });
};

/**
 * Cancel a recurrence
 */
export const cancelARecurrence = <ThrowOnError extends boolean = false>(
  options: Options<CancelARecurrenceData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CancelARecurrenceResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/pix/transactions/recurrings/{id}/cancel",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List recurrence items
 */
export const listRecurrenceItems = <ThrowOnError extends boolean = false>(
  options: Options<ListRecurrenceItemsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListRecurrenceItemsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/pix/transactions/recurrings/{id}/items",
    ...options,
  });
};

/**
 * Cancel a recurrence item
 */
export const cancelARecurrenceItem = <ThrowOnError extends boolean = false>(
  options: Options<CancelARecurrenceItemData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CancelARecurrenceItemResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/pix/transactions/recurrings/items/{id}/cancel",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List payments links
 */
export const listPaymentsLinks = <ThrowOnError extends boolean = false>(
  options?: Options<ListPaymentsLinksData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListPaymentsLinksResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/paymentLinks",
    ...options,
  });
};

/**
 * Create a payments link
 */
export const createAPaymentsLink = <ThrowOnError extends boolean = false>(
  options?: Options<CreateAPaymentsLinkData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateAPaymentsLinkResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/paymentLinks",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Remove a payments link
 */
export const removeAPaymentsLink = <ThrowOnError extends boolean = false>(
  options: Options<RemoveAPaymentsLinkData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    RemoveAPaymentsLinkResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/paymentLinks/{id}",
    ...options,
  });
};

/**
 * Retrieve a single payments link
 */
export const retrieveASinglePaymentsLink = <
  ThrowOnError extends boolean = false
>(
  options: Options<RetrieveASinglePaymentsLinkData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveASinglePaymentsLinkResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/paymentLinks/{id}",
    ...options,
  });
};

/**
 * Update a payments link
 */
export const updateAPaymentsLink = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAPaymentsLinkData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateAPaymentsLinkResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/paymentLinks/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Restore a payments link
 */
export const restoreAPaymentsLink = <ThrowOnError extends boolean = false>(
  options: Options<RestoreAPaymentsLinkData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    RestoreAPaymentsLinkResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/paymentLinks/{id}/restore",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List images from a payments link
 */
export const listImagesFromAPaymentsLink = <
  ThrowOnError extends boolean = false
>(
  options: Options<ListImagesFromAPaymentsLinkData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListImagesFromAPaymentsLinkResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/paymentLinks/{id}/images",
    ...options,
  });
};

/**
 * Add an image to a payments link
 */
export const addAnImageToAPaymentsLink = <ThrowOnError extends boolean = false>(
  options: Options<AddAnImageToAPaymentsLinkData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    AddAnImageToAPaymentsLinkResponse,
    unknown,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/paymentLinks/{id}/images",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Remove an image from payments link
 */
export const removeAnImageFromPaymentsLink = <
  ThrowOnError extends boolean = false
>(
  options: Options<RemoveAnImageFromPaymentsLinkData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    RemoveAnImageFromPaymentsLinkResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/paymentLinks/{paymentLinkId}/images/{imageId}",
    ...options,
  });
};

/**
 * Retrieve a single payments link image
 */
export const retrieveASinglePaymentsLinkImage = <
  ThrowOnError extends boolean = false
>(
  options: Options<RetrieveASinglePaymentsLinkImageData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveASinglePaymentsLinkImageResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/paymentLinks/{paymentLinkId}/images/{imageId}",
    ...options,
  });
};

/**
 * Set payments link main image
 */
export const setPaymentsLinkMainImage = <ThrowOnError extends boolean = false>(
  options: Options<SetPaymentsLinkMainImageData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    SetPaymentsLinkMainImageResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/paymentLinks/{paymentLinkId}/images/{imageId}/setAsMain",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List transfers
 * This method returns a paginated list of all transfers for the specified filter.
 */
export const listTransfers = <ThrowOnError extends boolean = false>(
  options?: Options<ListTransfersData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListTransfersResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/transfers",
    ...options,
  });
};

/**
 * Transfer to another Institution’s account or Pix key
 */
export const transferToAnotherInstitutionAccountOrPixKey = <
  ThrowOnError extends boolean = false
>(
  options?: Options<
    TransferToAnotherInstitutionAccountOrPixKeyData,
    ThrowOnError
  >
) => {
  return (options?.client ?? client).post<
    TransferToAnotherInstitutionAccountOrPixKeyResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/transfers",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Transfer to Asaas account
 */
export const transferToAsaasAccount = <ThrowOnError extends boolean = false>(
  options?: Options<TransferToAsaasAccountData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    TransferToAsaasAccountResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/transfers/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Retrieve a single transfer
 */
export const retrieveASingleTransfer = <ThrowOnError extends boolean = false>(
  options: Options<RetrieveASingleTransferData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveASingleTransferResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/transfers/{id}",
    ...options,
  });
};

/**
 * Cancel a transfer
 */
export const cancelATransfer = <ThrowOnError extends boolean = false>(
  options: Options<CancelATransferData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    CancelATransferResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/transfers/{id}/cancel",
    ...options,
  });
};

/**
 * List anticipations
 */
export const listAnticipations = <ThrowOnError extends boolean = false>(
  options?: Options<ListAnticipationsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListAnticipationsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/anticipations",
    ...options,
  });
};

/**
 * Request anticipation
 */
export const requestAnticipation = <ThrowOnError extends boolean = false>(
  options?: Options<RequestAnticipationData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    RequestAnticipationResponse,
    unknown,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/anticipations",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Simulate anticipation
 */
export const simulateAnticipation = <ThrowOnError extends boolean = false>(
  options?: Options<SimulateAnticipationData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    SimulateAnticipationResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/anticipations/simulate",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Retrieve status of automatic anticipation
 */
export const retrieveStatusOfAutomaticAnticipation = <
  ThrowOnError extends boolean = false
>(
  options?: Options<RetrieveStatusOfAutomaticAnticipationData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveStatusOfAutomaticAnticipationResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/anticipations/configurations",
    ...options,
  });
};

/**
 * Update status of automatic anticipation
 */
export const updateStatusOfAutomaticAnticipation = <
  ThrowOnError extends boolean = false
>(
  options?: Options<UpdateStatusOfAutomaticAnticipationData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateStatusOfAutomaticAnticipationResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/anticipations/configurations",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Retrieve anticipation limits
 */
export const retrieveAnticipationLimits = <
  ThrowOnError extends boolean = false
>(
  options?: Options<RetrieveAnticipationLimitsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveAnticipationLimitsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/anticipations/limits",
    ...options,
  });
};

/**
 * Cancel anticipation
 */
export const cancelAnticipation = <ThrowOnError extends boolean = false>(
  options: Options<CancelAnticipationData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CancelAnticipationResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/anticipations/{id}/cancel",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List payment dunnings
 */
export const listPaymentDunnings = <ThrowOnError extends boolean = false>(
  options?: Options<ListPaymentDunningsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListPaymentDunningsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/paymentDunnings",
    ...options,
  });
};

/**
 * Create a payment dunning
 */
export const createAPaymentDunning = <ThrowOnError extends boolean = false>(
  options?: Options<CreateAPaymentDunningData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateAPaymentDunningResponse,
    unknown,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/paymentDunnings",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Simulate a payment dunning
 */
export const simulateAPaymentDunning = <ThrowOnError extends boolean = false>(
  options: Options<SimulateAPaymentDunningData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    SimulateAPaymentDunningResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/paymentDunnings/simulate",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Recover a single payment dunning
 */
export const recoverASinglePaymentDunning = <
  ThrowOnError extends boolean = false
>(
  options: Options<RecoverASinglePaymentDunningData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RecoverASinglePaymentDunningResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/paymentDunnings/{id}",
    ...options,
  });
};

/**
 * Event history lists
 * Returns a paginated list of events that have occurred since the charge was denied.
 */
export const eventHistoryLists = <ThrowOnError extends boolean = false>(
  options: Options<EventHistoryListsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    EventHistoryListsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/paymentDunnings/{id}/history",
    ...options,
  });
};

/**
 * List payments received
 * Returns a paginated list of payments received through debt renegotiation.
 */
export const listPaymentsReceived = <ThrowOnError extends boolean = false>(
  options: Options<ListPaymentsReceivedData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListPaymentsReceivedResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/paymentDunnings/{id}/partialPayments",
    ...options,
  });
};

/**
 * List payments available for payment dunning
 * Returns a paginated list of possible negative charges together with a simulation of values for each type of negative.
 */
export const listPaymentsAvailableForPaymentDunning = <
  ThrowOnError extends boolean = false
>(
  options?: Options<ListPaymentsAvailableForPaymentDunningData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListPaymentsAvailableForPaymentDunningResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/paymentDunnings/paymentsAvailableForDunning",
    ...options,
  });
};

/**
 * Resend documents
 * Use the `isNecessaryResendDocumentation` property returned in the delinquency object to check if documentation resend is required.
 *
 * After resending, your delinquency will return to the `AWAITING_APPROVAL` status.
 */
export const resendDocuments = <ThrowOnError extends boolean = false>(
  options: Options<ResendDocumentsData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ResendDocumentsResponse,
    unknown,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/paymentDunnings/{id}/documents",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Cancel payment dunning
 * Allows the cancellation of a delinquency. Use the `canBeCancelled` property returned in the delinquency object to check if the delinquency can be canceled.
 *
 * If the delinquency has already been initiated, requesting cancellation will change its status to `AWAITING_CANCELLATION` until it is effectively canceled (`CANCELLED`).
 */
export const cancelPaymentDunning = <ThrowOnError extends boolean = false>(
  options: Options<CancelPaymentDunningData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CancelPaymentDunningResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/paymentDunnings/{id}/cancel",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List bill payments
 */
export const listBillPayments = <ThrowOnError extends boolean = false>(
  options?: Options<ListBillPaymentsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListBillPaymentsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/bill",
    ...options,
  });
};

/**
 * Create a bill payment
 */
export const createABillPayment = <ThrowOnError extends boolean = false>(
  options?: Options<CreateABillPaymentData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateABillPaymentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/bill",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Simulate a bill payment
 */
export const simulateABillPayment = <ThrowOnError extends boolean = false>(
  options?: Options<SimulateABillPaymentData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    SimulateABillPaymentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/bill/simulate",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Retrieve a single bill payment
 */
export const retrieveASingleBillPayment = <
  ThrowOnError extends boolean = false
>(
  options: Options<RetrieveASingleBillPaymentData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveASingleBillPaymentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/bill/{id}",
    ...options,
  });
};

/**
 * Cancel bill payments
 * Allows canceling the bill payment. Use the  `canBeCancelled` property of the `bill`  to verify if the bill payment can be canceled.
 * When canceled, the bill payment will not be executed.
 */
export const cancelBillPayment = <ThrowOnError extends boolean = false>(
  options: Options<CancelBillPaymentData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CancelBillPaymentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/bill/{id}/cancel",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List cell phone top-ups
 */
export const listMobileRecharges = <ThrowOnError extends boolean = false>(
  options?: Options<ListMobileRechargesData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListMobileRechargesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/mobilePhoneRecharges",
    ...options,
  });
};

/**
 * Request recharge
 */
export const requestRecharge = <ThrowOnError extends boolean = false>(
  options?: Options<RequestRechargeData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    RequestRechargeResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/mobilePhoneRecharges",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Recover a single cell phone recharge
 */
export const recoverASingleCellphoneRecharge = <
  ThrowOnError extends boolean = false
>(
  options: Options<RecoverASingleCellphoneRechargeData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RecoverASingleCellphoneRechargeResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/mobilePhoneRecharges/{id}",
    ...options,
  });
};

/**
 * Cancel a cell phone recharge
 * Allows canceling the cell phone top-up. Use the canBeCancelled property to verify if the top-up can be canceled. When canceled, the top-up will not be executed.
 */
export const cancelACellphoneRecharge = <ThrowOnError extends boolean = false>(
  options: Options<CancelACellphoneRechargeData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CancelACellphoneRechargeResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/mobilePhoneRecharges/{id}/cancel",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Search for cell phone provider
 */
export const searchForCellPhoneProvider = <
  ThrowOnError extends boolean = false
>(
  options: Options<SearchForCellPhoneProviderData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    SearchForCellPhoneProviderResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/mobilePhoneRecharges/{phoneNumber}/provider",
    ...options,
  });
};

/**
 * List credit bureau reports
 */
export const listCreditBureauReports = <ThrowOnError extends boolean = false>(
  options?: Options<ListCreditBureauReportsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListCreditBureauReportsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/creditBureauReport",
    ...options,
  });
};

/**
 * Make consultation
 */
export const makeConsultation = <ThrowOnError extends boolean = false>(
  options?: Options<MakeConsultationData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    MakeConsultationResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/creditBureauReport",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Retrieve a credit bureau report
 */
export const retrieveACreditBureauReport = <
  ThrowOnError extends boolean = false
>(
  options: Options<RetrieveACreditBureauReportData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveACreditBureauReportResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/creditBureauReport/{id}",
    ...options,
  });
};

/**
 * Retrieve extract
 */
export const retrieveExtract = <ThrowOnError extends boolean = false>(
  options?: Options<RetrieveExtractData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveExtractResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/financialTransactions",
    ...options,
  });
};

/**
 * Retrieve account balance
 */
export const retrieveAccountBalance = <ThrowOnError extends boolean = false>(
  options?: Options<RetrieveAccountBalanceData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveAccountBalanceResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/finance/balance",
    ...options,
  });
};

/**
 * Collections statistics
 * Return total values of charges from your Asaas account according to the provided filters.
 * ### Examples of filters:
 * Total amount to receive: `GET https://api.asaas.com/v3/finance/payment/statistics?status=PENDING`
 *
 * Total amount to receive with charges by bank slip: `GET https://api.asaas.com/v3/finance/payment/statistics?billingType=BOLETO&status=PENDING`
 *
 * Total amount received for charges by credit card: `GET https://api.asaas.com/v3/finance/payment/statistics?billingType=CREDIT_CARD&status=RECEIVED`
 */
export const billingStatistics = <ThrowOnError extends boolean = false>(
  options?: Options<BillingStatisticsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    BillingStatisticsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/finance/payment/statistics",
    ...options,
  });
};

/**
 * Retrieve split values
 */
export const retrieveSplitValues = <ThrowOnError extends boolean = false>(
  options?: Options<RetrieveSplitValuesData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveSplitValuesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/finance/split/statistics",
    ...options,
  });
};

/**
 * Retrieve business data
 */
export const retrieveBusinessData = <ThrowOnError extends boolean = false>(
  options?: Options<RetrieveBusinessDataData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveBusinessDataResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/myAccount/commercialInfo/",
    ...options,
  });
};

/**
 * Update business data
 */
export const updateBusinessData = <ThrowOnError extends boolean = false>(
  options?: Options<UpdateBusinessDataData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    UpdateBusinessDataResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/myAccount/commercialInfo/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Retrieve personalization settings
 */
export const retrievePersonalizationSettings = <
  ThrowOnError extends boolean = false
>(
  options?: Options<RetrievePersonalizationSettingsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrievePersonalizationSettingsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/myAccount/paymentCheckoutConfig/",
    ...options,
  });
};

/**
 * Save payment checkout customization
 */
export const savePaymentCheckoutPersonalization = <
  ThrowOnError extends boolean = false
>(
  options?: Options<SavePaymentCheckoutPersonalizationData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    SavePaymentCheckoutPersonalizationResponse,
    unknown,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/myAccount/paymentCheckoutConfig/",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Retrieve Asaas account number
 */
export const retrieveAsaasAccountNumber = <
  ThrowOnError extends boolean = false
>(
  options?: Options<RetrieveAsaasAccountNumberData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveAsaasAccountNumberResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/myAccount/accountNumber",
    ...options,
  });
};

/**
 * Retrieve account fees
 */
export const retrieveAccountFees = <ThrowOnError extends boolean = false>(
  options?: Options<RetrieveAccountFeesData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveAccountFeesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/myAccount/fees/",
    ...options,
  });
};

/**
 * Check account registration status
 */
export const checkAccountRegistrationStatus = <
  ThrowOnError extends boolean = false
>(
  options?: Options<CheckAccountRegistrationStatusData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    CheckAccountRegistrationStatusResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/myAccount/status/",
    ...options,
  });
};

/**
 * Retrieve WalletId
 */
export const retrieveWalletid = <ThrowOnError extends boolean = false>(
  options?: Options<RetrieveWalletidData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveWalletidResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/wallets/",
    ...options,
  });
};

/**
 * Delete White Label subaccount
 */
export const deleteWhiteLabelSubaccount = <
  ThrowOnError extends boolean = false
>(
  options: Options<DeleteWhiteLabelSubaccountData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteWhiteLabelSubaccountResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/myAccount/",
    ...options,
  });
};

/**
 * List invoices
 */
export const listInvoices = <ThrowOnError extends boolean = false>(
  options?: Options<ListInvoicesData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListInvoicesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/invoices",
    ...options,
  });
};

/**
 * Schedule invoice
 */
export const scheduleInvoice = <ThrowOnError extends boolean = false>(
  options?: Options<ScheduleInvoiceData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ScheduleInvoiceResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/invoices",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Retrieve a single invoice
 */
export const retrieveASingleInvoice = <ThrowOnError extends boolean = false>(
  options: Options<RetrieveASingleInvoiceData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveASingleInvoiceResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/invoices/{id}",
    ...options,
  });
};

/**
 * Update invoice
 */
export const updateInvoice = <ThrowOnError extends boolean = false>(
  options: Options<UpdateInvoiceData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateInvoiceResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/invoices/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Issue an invoice
 */
export const issueAnInvoice = <ThrowOnError extends boolean = false>(
  options: Options<IssueAnInvoiceData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    IssueAnInvoiceResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/invoices/{id}/authorize",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Cancel an invoice
 */
export const cancelAnInvoice = <ThrowOnError extends boolean = false>(
  options: Options<CancelAnInvoiceData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CancelAnInvoiceResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/invoices/{id}/cancel",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List municipal configurations
 */
export const listMunicipalConfigurations = <
  ThrowOnError extends boolean = false
>(
  options?: Options<ListMunicipalConfigurationsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListMunicipalConfigurationsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/fiscalInfo/municipalOptions",
    ...options,
  });
};

/**
 * Retrieve tax information
 */
export const retrieveTaxInformation = <ThrowOnError extends boolean = false>(
  options?: Options<RetrieveTaxInformationData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveTaxInformationResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/fiscalInfo/",
    ...options,
  });
};

/**
 * Create and update tax information
 */
export const createAndUpdateTaxInformation = <
  ThrowOnError extends boolean = false
>(
  options?: Options<CreateAndUpdateTaxInformationData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateAndUpdateTaxInformationResponse,
    unknown,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/fiscalInfo/",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * List municipal services
 */
export const listMunicipalServices = <ThrowOnError extends boolean = false>(
  options?: Options<ListMunicipalServicesData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListMunicipalServicesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/fiscalInfo/services",
    ...options,
  });
};

/**
 * Configure invoice issuing portal
 * Here you can enable or disable the use of the national portal as an invoice issuer.
 */
export const configureInvoiceIssuingPortal = <
  ThrowOnError extends boolean = false
>(
  options?: Options<ConfigureInvoiceIssuingPortalData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ConfigureInvoiceIssuingPortalResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/fiscalInfo/nationalPortal",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List Webhooks
 * Endpoint to list all Webhooks registered in your account.
 */
export const listWebhooks = <ThrowOnError extends boolean = false>(
  options?: Options<ListWebhooksData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListWebhooksResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/webhooks",
    ...options,
  });
};

/**
 * Create new Webhook
 */
export const createNewWebhook = <ThrowOnError extends boolean = false>(
  options?: Options<CreateNewWebhookData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateNewWebhookResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/webhooks",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Remove Webhook
 * This endpoint removes a webhook.
 */
export const removeWebhook = <ThrowOnError extends boolean = false>(
  options: Options<RemoveWebhookData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    RemoveWebhookResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/webhooks/{id}",
    ...options,
  });
};

/**
 * Retrieve a single Webhook
 * This endpoint retrieves a single webhook according to the provided ID.
 */
export const retrieveASingleWebhook = <ThrowOnError extends boolean = false>(
  options: Options<RetrieveASingleWebhookData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveASingleWebhookResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/webhooks/{id}",
    ...options,
  });
};

/**
 * Update Existing Webhook
 * Use this endpoint to update information about an already registered webhook.
 */
export const updateExistingWebhook = <ThrowOnError extends boolean = false>(
  options: Options<UpdateExistingWebhookData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateExistingWebhookResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/webhooks/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List subaccounts
 */
export const listSubaccounts = <ThrowOnError extends boolean = false>(
  options?: Options<ListSubaccountsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListSubaccountsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/accounts",
    ...options,
  });
};

/**
 * Create subaccount
 */
export const createSubaccount = <ThrowOnError extends boolean = false>(
  options?: Options<CreateSubaccountData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateSubaccountResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/accounts",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Retrieve a single subaccount
 */
export const retrieveASingleSubaccount = <ThrowOnError extends boolean = false>(
  options: Options<RetrieveASingleSubaccountData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveASingleSubaccountResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/accounts/{id}",
    ...options,
  });
};

/**
 * Check pending documents
 */
export const checkPendingDocuments = <ThrowOnError extends boolean = false>(
  options?: Options<CheckPendingDocumentsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    CheckPendingDocumentsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/myAccount/documents",
    ...options,
  });
};

/**
 * Send documents via API
 */
export const sendDocumentsViaApi = <ThrowOnError extends boolean = false>(
  options: Options<SendDocumentsViaApiData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    SendDocumentsViaApiResponse,
    unknown,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/myAccount/documents/{id}",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Remove sent document
 */
export const removeSentDocument = <ThrowOnError extends boolean = false>(
  options: Options<RemoveSentDocumentData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    RemoveSentDocumentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/myAccount/documents/files/{id}",
    ...options,
  });
};

/**
 * View document sent
 */
export const viewDocumentSent = <ThrowOnError extends boolean = false>(
  options: Options<ViewDocumentSentData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ViewDocumentSentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/myAccount/documents/files/{id}",
    ...options,
  });
};

/**
 * Update sent document
 */
export const updateSentDocument = <ThrowOnError extends boolean = false>(
  options: Options<UpdateSentDocumentData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    UpdateSentDocumentResponse,
    unknown,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/myAccount/documents/files/{id}",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Create a chargeback dispute
 */
export const createAChargebackDispute = <ThrowOnError extends boolean = false>(
  options: Options<CreateAChargebackDisputeData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateAChargebackDisputeResponse,
    CreateAChargebackDisputeError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/chargebacks/{id}/dispute",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * List chargebacks
 * This method returns a paginated list of all chargebacks for the specified filter.
 */
export const listChargebacks = <ThrowOnError extends boolean = false>(
  options?: Options<ListChargebacksData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListChargebacksResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/chargebacks/",
    ...options,
  });
};

/**
 * Retrieve a single chargeback
 * This endpoint retrieves a specific chargeback based on the payment or installment ID.
 */
export const retrieveASingleChargeback = <ThrowOnError extends boolean = false>(
  options: Options<RetrieveASingleChargebackData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveASingleChargebackResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "access_token",
        type: "apiKey",
      },
    ],
    url: "/v3/payments/{id}/chargeback",
    ...options,
  });
};
