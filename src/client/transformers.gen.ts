// This file is auto-generated by @hey-api/openapi-ts

import type { ListPaymentsResponse, CreateNewPaymentResponse, CreateNewPaymentWithCreditCardResponse, CapturePaymentWithPreAuthorizationResponse, PayAChargeWithCreditCardResponse, RetrievePaymentBillingInformationResponse, PaymentViewingInformationResponse, RetrieveASinglePaymentResponse, UpdateExistingPaymentResponse, RestoreRemovedPaymentResponse, RefundPaymentResponse, GetQrCodeForPixPaymentsResponse, ConfirmCashReceiptResponse, UndoCashReceiptConfirmationResponse, RecoveringPaymentLimitsResponse, ListPaymentsWithSummaryDataResponse, CreateNewPaymentWithSummaryDataInResponseResponse, CreateNewPaymentWithCreditCardWithSummaryDataInResponseResponse, CapturePaymentWithPreAuthorizationWithSummaryDataInResponseResponse, RetrieveASinglePaymentWithSummaryDataResponse, UpdateExistingPaymentWithSummaryDataInResponseResponse, RestoreRemovedPaymentWithSummaryDataInResponseResponse, RefundPaymentWithSummaryDataInResponseResponse, ConfirmCashReceiptWithSummaryDataInResponseResponse, UndoCashReceiptConfirmationWithSummaryDataInResponseResponse, RetrieveRefundsOfASinglePaymentResponse, ListInstallmentsResponse, CreateInstallmentResponse, CreateInstallmentWithCreditCardResponse, RetrieveASingleInstallmentResponse, ListPaymentsOfAInstallmentResponse, RefundInstallmentResponse, ListSubscriptionsResponse, CreateNewSubscriptionResponse, CreateSubscriptionWithCreditCardResponse, RetrieveASingleSubscriptionResponse, UpdateExistingSubscriptionResponse, ListPaymentsOfASubscriptionResponse, ListInvoicesForSubscriptionChargesResponse, ListKeysResponse, CreateAKeyResponse, RemoveKeyResponse, RetrieveASingleKeyResponse, CreateStaticQrcodeResponse, PayAQrcodeResponse, DecodeAQrcodeForPaymentResponse, RetrieveASingleTransactionResponse, RetrieveASingleAnticipationResponse, ListTransactionsResponse, CancelAScheduledTransactionResponse, ListRecurrencesResponse, RetrieveASingleRecurrenceResponse, CancelARecurrenceResponse, ListRecurrenceItemsResponse, CancelARecurrenceItemResponse, ListPaymentsLinksResponse, CreateAPaymentsLinkResponse, RetrieveASinglePaymentsLinkResponse, UpdateAPaymentsLinkResponse, RestoreAPaymentsLinkResponse, ListTransfersResponse, TransferToAnotherInstitutionAccountOrPixKeyResponse, TransferToAsaasAccountResponse, RetrieveASingleTransferResponse, CancelATransferResponse, ListAnticipationsResponse, RequestAnticipationResponse, SimulateAnticipationResponse, CancelAnticipationResponse, ListPaymentDunningsResponse, CreateAPaymentDunningResponse, RecoverASinglePaymentDunningResponse, ResendDocumentsResponse, CancelPaymentDunningResponse, ListBillPaymentsResponse, CreateABillPaymentResponse, SimulateABillPaymentResponse, RetrieveASingleBillPaymentResponse, CancelBillPaymentResponse, ListCreditBureauReportsResponse, MakeConsultationResponse, RetrieveACreditBureauReportResponse, RetrieveExtractResponse, RetrieveBusinessDataResponse, UpdateBusinessDataResponse, RetrieveAccountFeesResponse, ListInvoicesResponse, ScheduleInvoiceResponse, RetrieveASingleInvoiceResponse, UpdateInvoiceResponse, IssueAnInvoiceResponse, CancelAnInvoiceResponse, ListSubaccountsResponse, CreateSubaccountResponse, RetrieveASingleSubaccountResponse, CheckPendingDocumentsResponse, ListChargebacksResponse, RetrieveASingleChargebackResponse } from './types.gen';

const apiPaymentChargebackResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.disputeStartDate) {
        data.disputeStartDate = new Date(data.disputeStartDate);
    }
    if (data.paymentDate) {
        data.paymentDate = new Date(data.paymentDate);
    }
    if (data.deadlineToSendDisputeDocuments) {
        data.deadlineToSendDisputeDocuments = new Date(data.deadlineToSendDisputeDocuments);
    }
    return data;
};

const apiPaymentGetResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.dateCreated) {
        data.dateCreated = new Date(data.dateCreated);
    }
    if (data.dueDate) {
        data.dueDate = new Date(data.dueDate);
    }
    if (data.originalDueDate) {
        data.originalDueDate = new Date(data.originalDueDate);
    }
    if (data.paymentDate) {
        data.paymentDate = new Date(data.paymentDate);
    }
    if (data.clientPaymentDate) {
        data.clientPaymentDate = new Date(data.clientPaymentDate);
    }
    if (data.creditDate) {
        data.creditDate = new Date(data.creditDate);
    }
    if (data.estimatedCreditDate) {
        data.estimatedCreditDate = new Date(data.estimatedCreditDate);
    }
    if (data.chargeback) {
        data.chargeback = apiPaymentChargebackResponseDtoSchemaResponseTransformer(data.chargeback);
    }
    if (data.refunds) {
        data.refunds = data.refunds.map((item: any) => {
            if (item.dateCreated) {
                item.dateCreated = new Date(item.dateCreated);
            }
            if (item.effectiveDate) {
                item.effectiveDate = new Date(item.effectiveDate);
            }
            return item;
        });
    }
    return data;
};

export const listPaymentsResponseTransformer = async (data: any): Promise<ListPaymentsResponse> => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return apiPaymentGetResponseDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const createNewPaymentResponseTransformer = async (data: any): Promise<CreateNewPaymentResponse> => {
    data = apiPaymentGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const createNewPaymentWithCreditCardResponseTransformer = async (data: any): Promise<CreateNewPaymentWithCreditCardResponse> => {
    data = apiPaymentGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const capturePaymentWithPreAuthorizationResponseTransformer = async (data: any): Promise<CapturePaymentWithPreAuthorizationResponse> => {
    data = apiPaymentGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const payAChargeWithCreditCardResponseTransformer = async (data: any): Promise<PayAChargeWithCreditCardResponse> => {
    if (data.dateCreated) {
        data.dateCreated = new Date(data.dateCreated);
    }
    if (data.dueDate) {
        data.dueDate = new Date(data.dueDate);
    }
    if (data.originalDueDate) {
        data.originalDueDate = new Date(data.originalDueDate);
    }
    if (data.paymentDate) {
        data.paymentDate = new Date(data.paymentDate);
    }
    if (data.clientPaymentDate) {
        data.clientPaymentDate = new Date(data.clientPaymentDate);
    }
    if (data.creditDate) {
        data.creditDate = new Date(data.creditDate);
    }
    if (data.estimatedCreditDate) {
        data.estimatedCreditDate = new Date(data.estimatedCreditDate);
    }
    if (data.chargeback) {
        data.chargeback = apiPaymentChargebackResponseDtoSchemaResponseTransformer(data.chargeback);
    }
    if (data.refunds) {
        data.refunds = data.refunds.map((item: any) => {
            if (item.dateCreated) {
                item.dateCreated = new Date(item.dateCreated);
            }
            if (item.effectiveDate) {
                item.effectiveDate = new Date(item.effectiveDate);
            }
            return item;
        });
    }
    return data;
};

const apiPaymentPixQrCodeResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.expirationDate) {
        data.expirationDate = new Date(data.expirationDate);
    }
    return data;
};

export const retrievePaymentBillingInformationResponseTransformer = async (data: any): Promise<RetrievePaymentBillingInformationResponse> => {
    if (data.pix) {
        data.pix = apiPaymentPixQrCodeResponseDtoSchemaResponseTransformer(data.pix);
    }
    return data;
};

export const paymentViewingInformationResponseTransformer = async (data: any): Promise<PaymentViewingInformationResponse> => {
    if (data.invoiceViewedDate) {
        data.invoiceViewedDate = new Date(data.invoiceViewedDate);
    }
    if (data.boletoViewedDate) {
        data.boletoViewedDate = new Date(data.boletoViewedDate);
    }
    return data;
};

export const retrieveASinglePaymentResponseTransformer = async (data: any): Promise<RetrieveASinglePaymentResponse> => {
    data = apiPaymentGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const updateExistingPaymentResponseTransformer = async (data: any): Promise<UpdateExistingPaymentResponse> => {
    data = apiPaymentGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const restoreRemovedPaymentResponseTransformer = async (data: any): Promise<RestoreRemovedPaymentResponse> => {
    data = apiPaymentGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const refundPaymentResponseTransformer = async (data: any): Promise<RefundPaymentResponse> => {
    data = apiPaymentGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const getQrCodeForPixPaymentsResponseTransformer = async (data: any): Promise<GetQrCodeForPixPaymentsResponse> => {
    data = apiPaymentPixQrCodeResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const confirmCashReceiptResponseTransformer = async (data: any): Promise<ConfirmCashReceiptResponse> => {
    data = apiPaymentGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const undoCashReceiptConfirmationResponseTransformer = async (data: any): Promise<UndoCashReceiptConfirmationResponse> => {
    data = apiPaymentGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

const apiPaymentLimitsResponseCreationDailyDtoSchemaResponseTransformer = (data: any) => {
    if (data.limit) {
        data.limit = BigInt(data.limit.toString());
    }
    if (data.used) {
        data.used = BigInt(data.used.toString());
    }
    return data;
};

const apiPaymentLimitsResponseCreationDtoSchemaResponseTransformer = (data: any) => {
    if (data.daily) {
        data.daily = apiPaymentLimitsResponseCreationDailyDtoSchemaResponseTransformer(data.daily);
    }
    return data;
};

export const recoveringPaymentLimitsResponseTransformer = async (data: any): Promise<RecoveringPaymentLimitsResponse> => {
    if (data.creation) {
        data.creation = apiPaymentLimitsResponseCreationDtoSchemaResponseTransformer(data.creation);
    }
    return data;
};

const apiPaymentLeanGetResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.dateCreated) {
        data.dateCreated = new Date(data.dateCreated);
    }
    if (data.confirmedDate) {
        data.confirmedDate = new Date(data.confirmedDate);
    }
    if (data.dueDate) {
        data.dueDate = new Date(data.dueDate);
    }
    if (data.originalDueDate) {
        data.originalDueDate = new Date(data.originalDueDate);
    }
    if (data.paymentDate) {
        data.paymentDate = new Date(data.paymentDate);
    }
    if (data.customerPaymentDate) {
        data.customerPaymentDate = new Date(data.customerPaymentDate);
    }
    return data;
};

export const listPaymentsWithSummaryDataResponseTransformer = async (data: any): Promise<ListPaymentsWithSummaryDataResponse> => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return apiPaymentLeanGetResponseDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const createNewPaymentWithSummaryDataInResponseResponseTransformer = async (data: any): Promise<CreateNewPaymentWithSummaryDataInResponseResponse> => {
    data = apiPaymentLeanGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const createNewPaymentWithCreditCardWithSummaryDataInResponseResponseTransformer = async (data: any): Promise<CreateNewPaymentWithCreditCardWithSummaryDataInResponseResponse> => {
    if (data.dateCreated) {
        data.dateCreated = new Date(data.dateCreated);
    }
    if (data.confirmedDate) {
        data.confirmedDate = new Date(data.confirmedDate);
    }
    if (data.dueDate) {
        data.dueDate = new Date(data.dueDate);
    }
    if (data.originalDueDate) {
        data.originalDueDate = new Date(data.originalDueDate);
    }
    if (data.paymentDate) {
        data.paymentDate = new Date(data.paymentDate);
    }
    if (data.customerPaymentDate) {
        data.customerPaymentDate = new Date(data.customerPaymentDate);
    }
    return data;
};

export const capturePaymentWithPreAuthorizationWithSummaryDataInResponseResponseTransformer = async (data: any): Promise<CapturePaymentWithPreAuthorizationWithSummaryDataInResponseResponse> => {
    data = apiPaymentLeanGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const retrieveASinglePaymentWithSummaryDataResponseTransformer = async (data: any): Promise<RetrieveASinglePaymentWithSummaryDataResponse> => {
    data = apiPaymentLeanGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const updateExistingPaymentWithSummaryDataInResponseResponseTransformer = async (data: any): Promise<UpdateExistingPaymentWithSummaryDataInResponseResponse> => {
    data = apiPaymentLeanGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const restoreRemovedPaymentWithSummaryDataInResponseResponseTransformer = async (data: any): Promise<RestoreRemovedPaymentWithSummaryDataInResponseResponse> => {
    data = apiPaymentLeanGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const refundPaymentWithSummaryDataInResponseResponseTransformer = async (data: any): Promise<RefundPaymentWithSummaryDataInResponseResponse> => {
    data = apiPaymentLeanGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const confirmCashReceiptWithSummaryDataInResponseResponseTransformer = async (data: any): Promise<ConfirmCashReceiptWithSummaryDataInResponseResponse> => {
    if (data.dateCreated) {
        data.dateCreated = new Date(data.dateCreated);
    }
    if (data.confirmedDate) {
        data.confirmedDate = new Date(data.confirmedDate);
    }
    if (data.dueDate) {
        data.dueDate = new Date(data.dueDate);
    }
    if (data.originalDueDate) {
        data.originalDueDate = new Date(data.originalDueDate);
    }
    if (data.paymentDate) {
        data.paymentDate = new Date(data.paymentDate);
    }
    if (data.customerPaymentDate) {
        data.customerPaymentDate = new Date(data.customerPaymentDate);
    }
    return data;
};

export const undoCashReceiptConfirmationWithSummaryDataInResponseResponseTransformer = async (data: any): Promise<UndoCashReceiptConfirmationWithSummaryDataInResponseResponse> => {
    data = apiPaymentLeanGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

const apiPaymentRefundGetResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.dateCreated) {
        data.dateCreated = new Date(data.dateCreated);
    }
    if (data.effectiveDate) {
        data.effectiveDate = new Date(data.effectiveDate);
    }
    return data;
};

export const retrieveRefundsOfASinglePaymentResponseTransformer = async (data: any): Promise<RetrieveRefundsOfASinglePaymentResponse> => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return apiPaymentRefundGetResponseDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

const apiInstallmentGetResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.paymentDate) {
        data.paymentDate = new Date(data.paymentDate);
    }
    if (data.dateCreated) {
        data.dateCreated = new Date(data.dateCreated);
    }
    if (data.chargeback) {
        data.chargeback = apiPaymentChargebackResponseDtoSchemaResponseTransformer(data.chargeback);
    }
    return data;
};

export const listInstallmentsResponseTransformer = async (data: any): Promise<ListInstallmentsResponse> => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return apiInstallmentGetResponseDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const createInstallmentResponseTransformer = async (data: any): Promise<CreateInstallmentResponse> => {
    data = apiInstallmentGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const createInstallmentWithCreditCardResponseTransformer = async (data: any): Promise<CreateInstallmentWithCreditCardResponse> => {
    data = apiInstallmentGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const retrieveASingleInstallmentResponseTransformer = async (data: any): Promise<RetrieveASingleInstallmentResponse> => {
    if (data.paymentDate) {
        data.paymentDate = new Date(data.paymentDate);
    }
    if (data.dateCreated) {
        data.dateCreated = new Date(data.dateCreated);
    }
    if (data.chargeback) {
        data.chargeback = apiPaymentChargebackResponseDtoSchemaResponseTransformer(data.chargeback);
    }
    return data;
};

const apiPaymentListResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return apiPaymentGetResponseDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const listPaymentsOfAInstallmentResponseTransformer = async (data: any): Promise<ListPaymentsOfAInstallmentResponse> => {
    data = apiPaymentListResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const refundInstallmentResponseTransformer = async (data: any): Promise<RefundInstallmentResponse> => {
    data = apiInstallmentGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

const apiSubscriptionGetResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.dateCreated) {
        data.dateCreated = new Date(data.dateCreated);
    }
    if (data.nextDueDate) {
        data.nextDueDate = new Date(data.nextDueDate);
    }
    if (data.endDate) {
        data.endDate = new Date(data.endDate);
    }
    return data;
};

export const listSubscriptionsResponseTransformer = async (data: any): Promise<ListSubscriptionsResponse> => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return apiSubscriptionGetResponseDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const createNewSubscriptionResponseTransformer = async (data: any): Promise<CreateNewSubscriptionResponse> => {
    data = apiSubscriptionGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const createSubscriptionWithCreditCardResponseTransformer = async (data: any): Promise<CreateSubscriptionWithCreditCardResponse> => {
    if (data.dateCreated) {
        data.dateCreated = new Date(data.dateCreated);
    }
    if (data.nextDueDate) {
        data.nextDueDate = new Date(data.nextDueDate);
    }
    if (data.endDate) {
        data.endDate = new Date(data.endDate);
    }
    return data;
};

export const retrieveASingleSubscriptionResponseTransformer = async (data: any): Promise<RetrieveASingleSubscriptionResponse> => {
    if (data.dateCreated) {
        data.dateCreated = new Date(data.dateCreated);
    }
    if (data.nextDueDate) {
        data.nextDueDate = new Date(data.nextDueDate);
    }
    if (data.endDate) {
        data.endDate = new Date(data.endDate);
    }
    return data;
};

export const updateExistingSubscriptionResponseTransformer = async (data: any): Promise<UpdateExistingSubscriptionResponse> => {
    data = apiSubscriptionGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const listPaymentsOfASubscriptionResponseTransformer = async (data: any): Promise<ListPaymentsOfASubscriptionResponse> => {
    data = apiPaymentListResponseDtoSchemaResponseTransformer(data);
    return data;
};

const apiCustomerInvoiceGetResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.effectiveDate) {
        data.effectiveDate = new Date(data.effectiveDate);
    }
    return data;
};

const apiCustomerInvoiceListResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return apiCustomerInvoiceGetResponseDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const listInvoicesForSubscriptionChargesResponseTransformer = async (data: any): Promise<ListInvoicesForSubscriptionChargesResponse> => {
    data = apiCustomerInvoiceListResponseDtoSchemaResponseTransformer(data);
    return data;
};

const apiPixAddressKeyGetResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.dateCreated) {
        data.dateCreated = new Date(data.dateCreated);
    }
    return data;
};

export const listKeysResponseTransformer = async (data: any): Promise<ListKeysResponse> => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return apiPixAddressKeyGetResponseDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const createAKeyResponseTransformer = async (data: any): Promise<CreateAKeyResponse> => {
    data = apiPixAddressKeyGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const removeKeyResponseTransformer = async (data: any): Promise<RemoveKeyResponse> => {
    data = apiPixAddressKeyGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const retrieveASingleKeyResponseTransformer = async (data: any): Promise<RetrieveASingleKeyResponse> => {
    if (data.dateCreated) {
        data.dateCreated = new Date(data.dateCreated);
    }
    return data;
};

export const createStaticQrcodeResponseTransformer = async (data: any): Promise<CreateStaticQrcodeResponse> => {
    if (data.expirationDate) {
        data.expirationDate = new Date(data.expirationDate);
    }
    return data;
};

const apiPixOriginalTransactionResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.effectiveDate) {
        data.effectiveDate = new Date(data.effectiveDate);
    }
    return data;
};

const apiPixTransactionQrCodeResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.dueDate) {
        data.dueDate = new Date(data.dueDate);
    }
    if (data.expirationDate) {
        data.expirationDate = new Date(data.expirationDate);
    }
    return data;
};

const apiPixTransactionGetResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.effectiveDate) {
        data.effectiveDate = new Date(data.effectiveDate);
    }
    if (data.scheduledDate) {
        data.scheduledDate = new Date(data.scheduledDate);
    }
    if (data.originalTransaction) {
        data.originalTransaction = apiPixOriginalTransactionResponseDtoSchemaResponseTransformer(data.originalTransaction);
    }
    if (data.qrCode) {
        data.qrCode = apiPixTransactionQrCodeResponseDtoSchemaResponseTransformer(data.qrCode);
    }
    if (data.dateCreated) {
        data.dateCreated = new Date(data.dateCreated);
    }
    return data;
};

export const payAQrcodeResponseTransformer = async (data: any): Promise<PayAQrcodeResponse> => {
    data = apiPixTransactionGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const decodeAQrcodeForPaymentResponseTransformer = async (data: any): Promise<DecodeAQrcodeForPaymentResponse> => {
    if (data.dueDate) {
        data.dueDate = new Date(data.dueDate);
    }
    if (data.expirationDate) {
        data.expirationDate = new Date(data.expirationDate);
    }
    return data;
};

export const retrieveASingleTransactionResponseTransformer = async (data: any): Promise<RetrieveASingleTransactionResponse> => {
    data = apiPixTransactionGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

const apiReceivableAnticipationGetResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.anticipationDate) {
        data.anticipationDate = new Date(data.anticipationDate);
    }
    if (data.dueDate) {
        data.dueDate = new Date(data.dueDate);
    }
    if (data.requestDate) {
        data.requestDate = new Date(data.requestDate);
    }
    return data;
};

export const retrieveASingleAnticipationResponseTransformer = async (data: any): Promise<RetrieveASingleAnticipationResponse> => {
    data = apiReceivableAnticipationGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const listTransactionsResponseTransformer = async (data: any): Promise<ListTransactionsResponse> => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return apiPixTransactionGetResponseDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const cancelAScheduledTransactionResponseTransformer = async (data: any): Promise<CancelAScheduledTransactionResponse> => {
    if (data.effectiveDate) {
        data.effectiveDate = new Date(data.effectiveDate);
    }
    if (data.scheduledDate) {
        data.scheduledDate = new Date(data.scheduledDate);
    }
    if (data.originalTransaction) {
        data.originalTransaction = apiPixOriginalTransactionResponseDtoSchemaResponseTransformer(data.originalTransaction);
    }
    if (data.qrCode) {
        data.qrCode = apiPixTransactionQrCodeResponseDtoSchemaResponseTransformer(data.qrCode);
    }
    if (data.dateCreated) {
        data.dateCreated = new Date(data.dateCreated);
    }
    return data;
};

const apiPixTransactionRecurringCheckoutScheduleGetResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.startDate) {
        data.startDate = new Date(data.startDate);
    }
    if (data.finishDate) {
        data.finishDate = new Date(data.finishDate);
    }
    return data;
};

export const listRecurrencesResponseTransformer = async (data: any): Promise<ListRecurrencesResponse> => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return apiPixTransactionRecurringCheckoutScheduleGetResponseDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const retrieveASingleRecurrenceResponseTransformer = async (data: any): Promise<RetrieveASingleRecurrenceResponse> => {
    data = apiPixTransactionRecurringCheckoutScheduleGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const cancelARecurrenceResponseTransformer = async (data: any): Promise<CancelARecurrenceResponse> => {
    if (data.startDate) {
        data.startDate = new Date(data.startDate);
    }
    if (data.finishDate) {
        data.finishDate = new Date(data.finishDate);
    }
    return data;
};

const apiPixTransactionRecurringCheckoutScheduleGetItemResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.scheduledDate) {
        data.scheduledDate = new Date(data.scheduledDate);
    }
    return data;
};

export const listRecurrenceItemsResponseTransformer = async (data: any): Promise<ListRecurrenceItemsResponse> => {
    if (data.offset) {
        data.offset = BigInt(data.offset.toString());
    }
    if (data.limit) {
        data.limit = BigInt(data.limit.toString());
    }
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return apiPixTransactionRecurringCheckoutScheduleGetItemResponseDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const cancelARecurrenceItemResponseTransformer = async (data: any): Promise<CancelARecurrenceItemResponse> => {
    if (data.scheduledDate) {
        data.scheduledDate = new Date(data.scheduledDate);
    }
    return data;
};

const apiPaymentCampaignGetResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.endDate) {
        data.endDate = new Date(data.endDate);
    }
    return data;
};

export const listPaymentsLinksResponseTransformer = async (data: any): Promise<ListPaymentsLinksResponse> => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return apiPaymentCampaignGetResponseDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const createAPaymentsLinkResponseTransformer = async (data: any): Promise<CreateAPaymentsLinkResponse> => {
    data = apiPaymentCampaignGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const retrieveASinglePaymentsLinkResponseTransformer = async (data: any): Promise<RetrieveASinglePaymentsLinkResponse> => {
    data = apiPaymentCampaignGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const updateAPaymentsLinkResponseTransformer = async (data: any): Promise<UpdateAPaymentsLinkResponse> => {
    data = apiPaymentCampaignGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const restoreAPaymentsLinkResponseTransformer = async (data: any): Promise<RestoreAPaymentsLinkResponse> => {
    if (data.endDate) {
        data.endDate = new Date(data.endDate);
    }
    return data;
};

const apiTransferGetResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.dateCreated) {
        data.dateCreated = new Date(data.dateCreated);
    }
    if (data.effectiveDate) {
        data.effectiveDate = new Date(data.effectiveDate);
    }
    if (data.scheduleDate) {
        data.scheduleDate = new Date(data.scheduleDate);
    }
    return data;
};

export const listTransfersResponseTransformer = async (data: any): Promise<ListTransfersResponse> => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return apiTransferGetResponseDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const transferToAnotherInstitutionAccountOrPixKeyResponseTransformer = async (data: any): Promise<TransferToAnotherInstitutionAccountOrPixKeyResponse> => {
    data = apiTransferGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const transferToAsaasAccountResponseTransformer = async (data: any): Promise<TransferToAsaasAccountResponse> => {
    if (data.dateCreated) {
        data.dateCreated = new Date(data.dateCreated);
    }
    if (data.effectiveDate) {
        data.effectiveDate = new Date(data.effectiveDate);
    }
    if (data.scheduleDate) {
        data.scheduleDate = new Date(data.scheduleDate);
    }
    return data;
};

export const retrieveASingleTransferResponseTransformer = async (data: any): Promise<RetrieveASingleTransferResponse> => {
    data = apiTransferGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const cancelATransferResponseTransformer = async (data: any): Promise<CancelATransferResponse> => {
    if (data.dateCreated) {
        data.dateCreated = new Date(data.dateCreated);
    }
    if (data.effectiveDate) {
        data.effectiveDate = new Date(data.effectiveDate);
    }
    if (data.scheduleDate) {
        data.scheduleDate = new Date(data.scheduleDate);
    }
    return data;
};

export const listAnticipationsResponseTransformer = async (data: any): Promise<ListAnticipationsResponse> => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return apiReceivableAnticipationGetResponseDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const requestAnticipationResponseTransformer = async (data: any): Promise<RequestAnticipationResponse> => {
    data = apiReceivableAnticipationGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const simulateAnticipationResponseTransformer = async (data: any): Promise<SimulateAnticipationResponse> => {
    if (data.anticipationDate) {
        data.anticipationDate = new Date(data.anticipationDate);
    }
    if (data.dueDate) {
        data.dueDate = new Date(data.dueDate);
    }
    return data;
};

export const cancelAnticipationResponseTransformer = async (data: any): Promise<CancelAnticipationResponse> => {
    if (data.anticipationDate) {
        data.anticipationDate = new Date(data.anticipationDate);
    }
    if (data.dueDate) {
        data.dueDate = new Date(data.dueDate);
    }
    if (data.requestDate) {
        data.requestDate = new Date(data.requestDate);
    }
    return data;
};

const apiPaymentDunningShowResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.requestDate) {
        data.requestDate = new Date(data.requestDate);
    }
    return data;
};

export const listPaymentDunningsResponseTransformer = async (data: any): Promise<ListPaymentDunningsResponse> => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return apiPaymentDunningShowResponseDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const createAPaymentDunningResponseTransformer = async (data: any): Promise<CreateAPaymentDunningResponse> => {
    data = apiPaymentDunningShowResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const recoverASinglePaymentDunningResponseTransformer = async (data: any): Promise<RecoverASinglePaymentDunningResponse> => {
    if (data.requestDate) {
        data.requestDate = new Date(data.requestDate);
    }
    return data;
};

export const resendDocumentsResponseTransformer = async (data: any): Promise<ResendDocumentsResponse> => {
    if (data.requestDate) {
        data.requestDate = new Date(data.requestDate);
    }
    return data;
};

export const cancelPaymentDunningResponseTransformer = async (data: any): Promise<CancelPaymentDunningResponse> => {
    if (data.requestDate) {
        data.requestDate = new Date(data.requestDate);
    }
    return data;
};

const apiBillGetResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.dueDate) {
        data.dueDate = new Date(data.dueDate);
    }
    if (data.scheduleDate) {
        data.scheduleDate = new Date(data.scheduleDate);
    }
    if (data.paymentDate) {
        data.paymentDate = new Date(data.paymentDate);
    }
    return data;
};

export const listBillPaymentsResponseTransformer = async (data: any): Promise<ListBillPaymentsResponse> => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return apiBillGetResponseDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const createABillPaymentResponseTransformer = async (data: any): Promise<CreateABillPaymentResponse> => {
    data = apiBillGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

const apiBillSimulateBankSlipInfoResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.dueDate) {
        data.dueDate = new Date(data.dueDate);
    }
    return data;
};

export const simulateABillPaymentResponseTransformer = async (data: any): Promise<SimulateABillPaymentResponse> => {
    if (data.minimumScheduleDate) {
        data.minimumScheduleDate = new Date(data.minimumScheduleDate);
    }
    if (data.bankSlipInfo) {
        data.bankSlipInfo = apiBillSimulateBankSlipInfoResponseDtoSchemaResponseTransformer(data.bankSlipInfo);
    }
    return data;
};

export const retrieveASingleBillPaymentResponseTransformer = async (data: any): Promise<RetrieveASingleBillPaymentResponse> => {
    data = apiBillGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const cancelBillPaymentResponseTransformer = async (data: any): Promise<CancelBillPaymentResponse> => {
    if (data.dueDate) {
        data.dueDate = new Date(data.dueDate);
    }
    if (data.scheduleDate) {
        data.scheduleDate = new Date(data.scheduleDate);
    }
    if (data.paymentDate) {
        data.paymentDate = new Date(data.paymentDate);
    }
    return data;
};

const apiCreditBureauReportGetResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.dateCreated) {
        data.dateCreated = new Date(data.dateCreated);
    }
    return data;
};

export const listCreditBureauReportsResponseTransformer = async (data: any): Promise<ListCreditBureauReportsResponse> => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return apiCreditBureauReportGetResponseDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const makeConsultationResponseTransformer = async (data: any): Promise<MakeConsultationResponse> => {
    data = apiCreditBureauReportGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const retrieveACreditBureauReportResponseTransformer = async (data: any): Promise<RetrieveACreditBureauReportResponse> => {
    if (data.dateCreated) {
        data.dateCreated = new Date(data.dateCreated);
    }
    return data;
};

export const retrieveExtractResponseTransformer = async (data: any): Promise<RetrieveExtractResponse> => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            if (item.date) {
                item.date = new Date(item.date);
            }
            return item;
        });
    }
    return data;
};

const apiCustomerUpdateRequestCommercialInfoExpirationResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.scheduledDate) {
        data.scheduledDate = new Date(data.scheduledDate);
    }
    return data;
};

export const retrieveBusinessDataResponseTransformer = async (data: any): Promise<RetrieveBusinessDataResponse> => {
    if (data.birthDate) {
        data.birthDate = new Date(data.birthDate);
    }
    if (data.commercialInfoExpiration) {
        data.commercialInfoExpiration = apiCustomerUpdateRequestCommercialInfoExpirationResponseDtoSchemaResponseTransformer(data.commercialInfoExpiration);
    }
    return data;
};

const apiCustomerUpdateRequestGetResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.birthDate) {
        data.birthDate = new Date(data.birthDate);
    }
    if (data.commercialInfoExpiration) {
        data.commercialInfoExpiration = apiCustomerUpdateRequestCommercialInfoExpirationResponseDtoSchemaResponseTransformer(data.commercialInfoExpiration);
    }
    return data;
};

export const updateBusinessDataResponseTransformer = async (data: any): Promise<UpdateBusinessDataResponse> => {
    data = apiCustomerUpdateRequestGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

const apiMyAccountGetAccountFeesPaymentBankSlipDtoSchemaResponseTransformer = (data: any) => {
    if (data.expirationDate) {
        data.expirationDate = new Date(data.expirationDate);
    }
    return data;
};

const apiMyAccountGetAccountFeesPaymentCreditCardDtoSchemaResponseTransformer = (data: any) => {
    if (data.discountExpiration) {
        data.discountExpiration = new Date(data.discountExpiration);
    }
    return data;
};

const apiMyAccountGetAccountFeesPaymentPixDtoSchemaResponseTransformer = (data: any) => {
    if (data.discountExpiration) {
        data.discountExpiration = new Date(data.discountExpiration);
    }
    return data;
};

const apiMyAccountGetAccountFeesPaymentDtoSchemaResponseTransformer = (data: any) => {
    if (data.bankSlip) {
        data.bankSlip = apiMyAccountGetAccountFeesPaymentBankSlipDtoSchemaResponseTransformer(data.bankSlip);
    }
    if (data.creditCard) {
        data.creditCard = apiMyAccountGetAccountFeesPaymentCreditCardDtoSchemaResponseTransformer(data.creditCard);
    }
    if (data.pix) {
        data.pix = apiMyAccountGetAccountFeesPaymentPixDtoSchemaResponseTransformer(data.pix);
    }
    return data;
};

const apiMyAccountGetAccountFeesTransferPixDtoSchemaResponseTransformer = (data: any) => {
    if (data.expirationDate) {
        data.expirationDate = new Date(data.expirationDate);
    }
    return data;
};

const apiMyAccountGetAccountFeesTransferDtoSchemaResponseTransformer = (data: any) => {
    if (data.pix) {
        data.pix = apiMyAccountGetAccountFeesTransferPixDtoSchemaResponseTransformer(data.pix);
    }
    return data;
};

export const retrieveAccountFeesResponseTransformer = async (data: any): Promise<RetrieveAccountFeesResponse> => {
    if (data.payment) {
        data.payment = apiMyAccountGetAccountFeesPaymentDtoSchemaResponseTransformer(data.payment);
    }
    if (data.transfer) {
        data.transfer = apiMyAccountGetAccountFeesTransferDtoSchemaResponseTransformer(data.transfer);
    }
    return data;
};

export const listInvoicesResponseTransformer = async (data: any): Promise<ListInvoicesResponse> => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return apiCustomerInvoiceGetResponseDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const scheduleInvoiceResponseTransformer = async (data: any): Promise<ScheduleInvoiceResponse> => {
    data = apiCustomerInvoiceGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const retrieveASingleInvoiceResponseTransformer = async (data: any): Promise<RetrieveASingleInvoiceResponse> => {
    data = apiCustomerInvoiceGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const updateInvoiceResponseTransformer = async (data: any): Promise<UpdateInvoiceResponse> => {
    data = apiCustomerInvoiceGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const issueAnInvoiceResponseTransformer = async (data: any): Promise<IssueAnInvoiceResponse> => {
    data = apiCustomerInvoiceGetResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const cancelAnInvoiceResponseTransformer = async (data: any): Promise<CancelAnInvoiceResponse> => {
    if (data.effectiveDate) {
        data.effectiveDate = new Date(data.effectiveDate);
    }
    return data;
};

const apiCustomerGetResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.birthDate) {
        data.birthDate = new Date(data.birthDate);
    }
    if (data.commercialInfoExpiration) {
        data.commercialInfoExpiration = apiCustomerUpdateRequestCommercialInfoExpirationResponseDtoSchemaResponseTransformer(data.commercialInfoExpiration);
    }
    return data;
};

export const listSubaccountsResponseTransformer = async (data: any): Promise<ListSubaccountsResponse> => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return apiCustomerGetResponseDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const createSubaccountResponseTransformer = async (data: any): Promise<CreateSubaccountResponse> => {
    if (data.birthDate) {
        data.birthDate = new Date(data.birthDate);
    }
    if (data.commercialInfoExpiration) {
        data.commercialInfoExpiration = apiCustomerUpdateRequestCommercialInfoExpirationResponseDtoSchemaResponseTransformer(data.commercialInfoExpiration);
    }
    return data;
};

export const retrieveASingleSubaccountResponseTransformer = async (data: any): Promise<RetrieveASingleSubaccountResponse> => {
    if (data.birthDate) {
        data.birthDate = new Date(data.birthDate);
    }
    if (data.commercialInfoExpiration) {
        data.commercialInfoExpiration = apiCustomerUpdateRequestCommercialInfoExpirationResponseDtoSchemaResponseTransformer(data.commercialInfoExpiration);
    }
    return data;
};

export const checkPendingDocumentsResponseTransformer = async (data: any): Promise<CheckPendingDocumentsResponse> => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            if (item.onboardingUrlExpirationDate) {
                item.onboardingUrlExpirationDate = new Date(item.onboardingUrlExpirationDate);
            }
            return item;
        });
    }
    return data;
};

export const listChargebacksResponseTransformer = async (data: any): Promise<ListChargebacksResponse> => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return apiPaymentChargebackResponseDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const retrieveASingleChargebackResponseTransformer = async (data: any): Promise<RetrieveASingleChargebackResponse> => {
    if (data.disputeStartDate) {
        data.disputeStartDate = new Date(data.disputeStartDate);
    }
    if (data.paymentDate) {
        data.paymentDate = new Date(data.paymentDate);
    }
    if (data.deadlineToSendDisputeDocuments) {
        data.deadlineToSendDisputeDocuments = new Date(data.deadlineToSendDisputeDocuments);
    }
    return data;
};