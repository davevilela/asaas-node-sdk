// This file is auto-generated by @hey-api/openapi-ts

export const ApiAccountDocumentUpdateRequestDTOSchema = {
    required: ['documentFile'],
    type: 'object',
    properties: {
        documentFile: {
            '$ref': '#/components/schemas/File'
        }
    }
} as const;

export const FileSchema = {
    required: ['documentFile'],
    type: 'string',
    description: 'File',
    format: 'binary',
    deprecated: false,
    example: null
} as const;

export const ApiAccountDocumentGetResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique document identifier in Asaas',
            example: '8d257732-2220-11ec-b695-b6af4a64184d',
            deprecated: false
        },
        status: {
            '$ref': '#/components/schemas/ApiAccountDocumentGetResponseCustomerDocumentStatus'
        }
    }
} as const;

export const ApiAccountDocumentGetResponseCustomerDocumentStatusSchema = {
    type: 'string',
    description: 'Document approval status',
    example: 'PENDING',
    deprecated: false,
    enum: ['NOT_SENT', 'PENDING', 'APPROVED', 'REJECTED']
} as const;

export const ApiAccountDocumentDeleteResponseDTOSchema = {
    type: 'object',
    properties: {
        deleted: {
            type: 'boolean',
            description: 'Indicates whether the document was removed',
            example: true,
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique document identifier in Asaas',
            example: '8d257732-2220-11ec-b695-b6af4a64184d',
            deprecated: false
        }
    }
} as const;

export const ApiAccountDocumentShowResponseDTOSchema = {
    type: 'object',
    properties: {
        rejectReasons: {
            type: 'string',
            description: 'Reason why account approval was rejected',
            deprecated: false,
            example: null
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        description: 'Unique document group identifier in Asaas',
                        example: '172ed152-4fa4-43ad-9b69-39c323e9526c',
                        deprecated: false
                    },
                    status: {
                        '$ref': '#/components/schemas/ApiAccountDocumentGroupResponseCustomerDocumentStatus'
                    },
                    type: {
                        '$ref': '#/components/schemas/ApiAccountDocumentGroupResponseCustomerDocumentType'
                    },
                    title: {
                        type: 'string',
                        description: 'Document group title',
                        example: 'Minutes of election of the last board',
                        deprecated: false
                    },
                    description: {
                        type: 'string',
                        description: 'Description',
                        example: 'No description',
                        deprecated: false
                    },
                    responsible: {
                        '$ref': '#/components/schemas/ApiAccountDocumentGroupResponsibleResponseDTO'
                    },
                    onboardingUrl: {
                        type: 'string',
                        description: 'URL for sending documents',
                        example: 'https://cadastro.io/8ad196d6cbfcc5d05bfabcbb5c730f6a',
                        deprecated: false
                    },
                    onboardingUrlExpirationDate: {
                        type: 'string',
                        description: 'Expiration date of the URL for sending documents',
                        format: 'date-time',
                        example: '2025-03-04 00:00:00',
                        deprecated: false
                    },
                    documents: {
                        type: 'array',
                        description: 'Documents that have already been sent with their respective identifiers',
                        deprecated: false,
                        items: {
                            '$ref': '#/components/schemas/ApiAccountDocumentGetResponseDTO'
                        }
                    }
                }
            }
        }
    }
} as const;

export const ApiAccountDocumentGroupResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique document group identifier in Asaas',
            example: '172ed152-4fa4-43ad-9b69-39c323e9526c',
            deprecated: false
        },
        status: {
            '$ref': '#/components/schemas/ApiAccountDocumentGroupResponseCustomerDocumentStatus'
        },
        type: {
            '$ref': '#/components/schemas/ApiAccountDocumentGroupResponseCustomerDocumentType'
        },
        title: {
            type: 'string',
            description: 'Document group title',
            example: 'Minutes of election of the last board',
            deprecated: false
        },
        description: {
            type: 'string',
            description: 'Description',
            example: 'No description',
            deprecated: false
        },
        responsible: {
            '$ref': '#/components/schemas/ApiAccountDocumentGroupResponsibleResponseDTO'
        },
        onboardingUrl: {
            type: 'string',
            description: 'URL for sending documents',
            example: 'https://cadastro.io/8ad196d6cbfcc5d05bfabcbb5c730f6a',
            deprecated: false
        },
        onboardingUrlExpirationDate: {
            type: 'string',
            description: 'Expiration date of the URL for sending documents',
            format: 'date-time',
            example: '2025-03-04 00:00:00',
            deprecated: false
        },
        documents: {
            type: 'array',
            description: 'Documents that have already been sent with their respective identifiers',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiAccountDocumentGetResponseDTO'
            }
        }
    }
} as const;

export const ApiAccountDocumentGroupResponseCustomerDocumentStatusSchema = {
    type: 'string',
    description: 'Document group status',
    example: 'NOT_SENT',
    deprecated: false,
    enum: ['NOT_SENT', 'PENDING', 'APPROVED', 'REJECTED', 'IGNORED']
} as const;

export const ApiAccountDocumentGroupResponseCustomerDocumentTypeSchema = {
    type: 'string',
    description: 'Type of documents',
    example: 'MINUTES_OF_CONSTITUTION',
    deprecated: false,
    enum: ['IDENTIFICATION', 'SOCIAL_CONTRACT', 'ENTREPRENEUR_REQUIREMENT', 'MINUTES_OF_ELECTION', 'CUSTOM']
} as const;

export const ApiAccountDocumentGroupResponsibleResponseDTOSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'Responsible name',
            example: 'John Doe',
            deprecated: false
        },
        type: {
            type: 'array',
            description: 'Responsible tyoe',
            example: 'ASSOCIATION',
            deprecated: false,
            items: {
                type: 'string'
            },
            enum: ['ALLOW_BANK_ACCOUNT_DEPOSIT_STATEMENT', 'ASAAS_ACCOUNT_OWNER_EMANCIPATION_AGE', 'ASAAS_ACCOUNT_OWNER', 'ASSOCIATION', 'BANK_ACCOUNT_OWNER_EMANCIPATION_AGE', 'BANK_ACCOUNT_OWNER', 'CUSTOM', 'DIRECTOR', 'INDIVIDUAL_COMPANY', 'LIMITED_COMPANY', 'MEI', 'PARTNER']
        }
    },
    description: 'Who is responsible for sending these documents',
    deprecated: false
} as const;

export const ApiAccountDocumentGroupResponsibleResponseCustomerDocumentGroupTypeSchema = {
    type: 'string'
} as const;

export const ApiAccountDocumentSaveRequestDTOSchema = {
    type: 'object',
    properties: {
        documentFile: {
            '$ref': '#/components/schemas/File'
        },
        type: {
            '$ref': '#/components/schemas/ApiAccountDocumentSaveRequestCustomerDocumentType'
        }
    }
} as const;

export const ApiAccountDocumentSaveRequestCustomerDocumentTypeSchema = {
    type: 'string',
    description: 'Document Type',
    example: 'IDENTIFICATION',
    deprecated: false,
    enum: ['IDENTIFICATION', 'SOCIAL_CONTRACT', 'ENTREPRENEUR_REQUIREMENT', 'MINUTES_OF_ELECTION', 'CUSTOM']
} as const;

export const ApiBillCancelRequestDTOSchema = {
    type: 'object',
    properties: {}
} as const;

export const ApiBillGetResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'bill',
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique bill payment identifier in Asaas',
            example: 'f1bce822-6f37-4905-8de8-f1af9f2f4bab',
            deprecated: false
        },
        status: {
            '$ref': '#/components/schemas/ApiBillGetResponseBillStatus'
        },
        value: {
            type: 'number',
            description: 'Amount to be paid',
            example: 29,
            deprecated: false
        },
        discount: {
            type: 'number',
            description: 'Discount attributed to payment',
            example: 0,
            deprecated: false
        },
        interest: {
            type: 'number',
            description: 'Interest attributed to payment',
            example: 0,
            deprecated: false
        },
        fine: {
            type: 'number',
            description: 'Fine assigned to payment',
            example: 0,
            deprecated: false
        },
        identificationField: {
            type: 'string',
            description: 'Typeable line of the bill to be paid',
            example: '03399.77779 29900.000000 04751.101017 1 81510000002990',
            deprecated: false
        },
        dueDate: {
            type: 'string',
            description: 'Billing due date',
            format: 'date',
            example: '2020-01-31',
            deprecated: false
        },
        scheduleDate: {
            type: 'string',
            description: 'Payment scheduling date',
            format: 'date',
            example: '2020-01-31',
            deprecated: false
        },
        paymentDate: {
            type: 'string',
            description: 'Date on which payment was made',
            format: 'date',
            deprecated: false,
            example: null
        },
        fee: {
            type: 'number',
            description: 'Asaas fee for bill payment',
            example: 0,
            deprecated: false
        },
        description: {
            type: 'string',
            description: 'Bill Payment Description',
            example: 'Celular 01/12',
            deprecated: false
        },
        companyName: {
            type: 'string',
            description: 'Company/Body issuing the payment',
            deprecated: false,
            example: null
        },
        transactionReceiptUrl: {
            type: 'string',
            description: 'Proof of bill payment',
            example: 'https://www.asaas.com/comprovantes/00016578',
            deprecated: false
        },
        canBeCancelled: {
            type: 'boolean',
            description: 'Whether payment can be canceled',
            example: false,
            deprecated: false
        },
        externalReference: {
            type: 'string',
            description: 'Unique identifier of the bill in your system',
            deprecated: false,
            example: null
        },
        failReasons: {
            type: 'array',
            description: 'List of reasons for payment failure',
            deprecated: false,
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const ApiBillGetResponseBillStatusSchema = {
    type: 'string',
    description: 'Bill payment status',
    example: 'PENDING',
    deprecated: false,
    enum: ['PENDING', 'BANK_PROCESSING', 'PAID', 'FAILED', 'CANCELLED', 'REFUNDED', 'AWAITING_CHECKOUT_RISK_ANALYSIS_REQUEST']
} as const;

export const ApiBillSaveRequestDTOSchema = {
    required: ['identificationField'],
    type: 'object',
    properties: {
        identificationField: {
            required: ['identificationField'],
            type: 'string',
            description: 'Digitizable bill line',
            example: '03399.77779 29900.000000 04751.101017 1 81510000002990',
            deprecated: false
        },
        scheduleDate: {
            type: 'string',
            description: 'Payment scheduling date',
            example: '2020-03-15',
            deprecated: false
        },
        description: {
            type: 'string',
            description: 'Bill Payment Description',
            example: 'Celular 03/12',
            deprecated: false
        },
        discount: {
            type: 'number',
            description: 'Discount attributed to payment',
            example: 0,
            deprecated: false
        },
        interest: {
            type: 'number',
            description: 'Interest attributed to payment',
            example: 0,
            deprecated: false
        },
        fine: {
            type: 'number',
            description: 'Fine assigned to payment',
            example: 0,
            deprecated: false
        },
        dueDate: {
            type: 'string',
            description: 'Expiration date of the account if it is the type that does not have this information',
            format: 'date',
            example: '2020-03-30',
            deprecated: false
        },
        value: {
            type: 'number',
            description: 'Account value if it is the type that does not have this information (Ex: credit card invoices)',
            example: 29,
            deprecated: false
        },
        externalReference: {
            type: 'string',
            description: 'Unique identifier of the bill in your system',
            example: '056984',
            deprecated: false
        }
    }
} as const;

export const ApiBillListResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiBillGetResponseDTO'
            }
        }
    }
} as const;

export const ApiBillSimulateRequestDTOSchema = {
    type: 'object',
    properties: {
        identificationField: {
            type: 'string',
            description: 'Digitizable bill line',
            example: '03399.77779 29900.000000 04751.101017 1 81510000002990',
            deprecated: false
        },
        barCode: {
            type: 'string',
            description: 'Ticket barcode',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiBillSimulateResponseDTOSchema = {
    type: 'object',
    properties: {
        minimumScheduleDate: {
            type: 'string',
            description: 'Minimum date allowed for scheduling',
            format: 'date',
            example: '2021-11-22',
            deprecated: false
        },
        fee: {
            type: 'number',
            description: 'Fee charged when paying the bill',
            example: 0,
            deprecated: false
        },
        bankSlipInfo: {
            '$ref': '#/components/schemas/ApiBillSimulateBankSlipInfoResponseDTO'
        }
    }
} as const;

export const ApiBillSimulateBankSlipInfoResponseDTOSchema = {
    type: 'object',
    properties: {
        identificationField: {
            type: 'string',
            description: 'Digitable line',
            example: '03399201595100529040147600301023888440000421177',
            deprecated: false
        },
        value: {
            type: 'number',
            description: 'Ticket value',
            example: 4211.77,
            deprecated: false
        },
        dueDate: {
            type: 'string',
            description: 'Due date',
            format: 'date',
            example: '2021-12-24',
            deprecated: false
        },
        companyName: {
            type: 'string',
            description: 'Company/Body issuing the bill',
            deprecated: false,
            example: null
        },
        bank: {
            type: 'string',
            description: 'Code of the bank issuing the bill in the banking system',
            example: '033',
            deprecated: false
        },
        beneficiaryCpfCnpj: {
            type: 'string',
            description: 'CPF or CNPJ of the beneficiary',
            example: '19.540.550/0001-21',
            deprecated: false
        },
        beneficiaryName: {
            type: 'string',
            description: "Beneficiary's name",
            example: 'ASAAS GESTAO FINANCEIRA S.A.',
            deprecated: false
        },
        allowChangeValue: {
            type: 'boolean',
            description: 'Whether the value can be changed or not',
            example: false,
            deprecated: false
        },
        minValue: {
            type: 'number',
            description: 'Minimum value that can be changed',
            example: 4211.77,
            deprecated: false
        },
        maxValue: {
            type: 'number',
            description: 'Maximum value that can be changed',
            example: 4211.77,
            deprecated: false
        },
        discountValue: {
            type: 'number',
            description: 'Value of discounts',
            example: 0,
            deprecated: false
        },
        interestValue: {
            type: 'number',
            description: 'Interest amount',
            example: 0,
            deprecated: false
        },
        fineValue: {
            type: 'number',
            description: 'Fine value',
            example: 0,
            deprecated: false
        },
        originalValue: {
            type: 'number',
            description: 'Original bill value',
            example: 4211.77,
            deprecated: false
        },
        totalDiscountValue: {
            type: 'number',
            description: 'Total value of discounts and rebates',
            example: 0,
            deprecated: false
        },
        totalAdditionalValue: {
            type: 'number',
            description: 'Total amount of interest and fine',
            example: 0,
            deprecated: false
        },
        isOverdue: {
            type: 'boolean',
            description: 'Informs if the ticket is expired',
            example: false,
            deprecated: false
        }
    },
    description: 'Information about the bill to be paid',
    deprecated: false
} as const;

export const ApiChargebackSaveDisputeRequestDTOSchema = {
    required: ['id', 'files'],
    type: 'object',
    properties: {
        files: {
            required: ['files'],
            type: 'string',
            description: 'Files to create the dispute (Maximum: 11).',
            format: 'binary',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiChargebackSaveDisputeResponseDTOSchema = {
    type: 'object',
    properties: {
        chargebackId: {
            type: 'string',
            description: 'Unique identifier of chargeback for which the dispute will be created.',
            example: '2765d086-c7c5-5cca-898a-4262d212587c',
            deprecated: false
        },
        status: {
            '$ref': '#/components/schemas/ApiChargebackSaveDisputeResponseChargebackDisputeStatus'
        },
        files: {
            type: 'array',
            description: 'Names of the dispute files.',
            deprecated: false,
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const ApiChargebackSaveDisputeResponseChargebackDisputeStatusSchema = {
    type: 'string',
    description: 'Dispute status.',
    example: 'REQUESTED',
    deprecated: false,
    enum: ['REQUESTED', 'ACCEPTED', 'REJECTED']
} as const;

export const OpenApiErrorResponseDTOSchema = {
    type: 'object',
    properties: {
        errors: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                type: 'object',
                properties: {
                    code: {
                        type: 'string',
                        description: 'Error code',
                        deprecated: false,
                        example: null
                    },
                    description: {
                        type: 'string',
                        description: 'Error description',
                        deprecated: false,
                        example: null
                    }
                }
            }
        }
    },
    example: {
        errors: [
            {
                code: 'invalid_customer',
                description: 'Customer Inválido ou não informado'
            }
        ]
    }
} as const;

export const OpenApiErrorResponseDataDTOSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            description: 'Error code',
            deprecated: false,
            example: null
        },
        description: {
            type: 'string',
            description: 'Error description',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiPaymentChargebackResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique chargeback identifier.',
            example: '8e784c3e-afe8-4844-bb93-6b445763',
            deprecated: false
        },
        payment: {
            type: 'string',
            description: 'Unique payment identifier in Asaas',
            example: 'pay_pBtDdshgBD2Rt',
            deprecated: false
        },
        installment: {
            type: 'string',
            description: 'Unique installment identifier in Asaas',
            example: 'b8dd74c-d078-40a0-9ae1-61a66c61a204',
            deprecated: false
        },
        customerAccount: {
            type: 'string',
            description: 'Unique identifier of customer to which the chargeback is linked.',
            example: 'cus_000000004085',
            deprecated: false
        },
        status: {
            '$ref': '#/components/schemas/ApiPaymentChargebackResponseChargebackStatus'
        },
        reason: {
            '$ref': '#/components/schemas/ApiPaymentChargebackResponseChargebackReason'
        },
        disputeStartDate: {
            type: 'string',
            description: 'Chargeback opening date.',
            format: 'date',
            example: '2024-11-10',
            deprecated: false
        },
        value: {
            type: 'number',
            description: 'Chargeback value.',
            example: 2323.45,
            deprecated: false
        },
        paymentDate: {
            type: 'string',
            description: 'Payment date on Asaas',
            format: 'date',
            example: '2024-03-10',
            deprecated: false
        },
        creditCard: {
            '$ref': '#/components/schemas/ApiChargebackCreditCardResponseDTO'
        },
        disputeStatus: {
            '$ref': '#/components/schemas/ApiPaymentChargebackResponseChargebackDisputeStatus'
        },
        deadlineToSendDisputeDocuments: {
            type: 'string',
            description: 'Deadline to send dispute documents.',
            format: 'date',
            example: '2024-12-10',
            deprecated: false
        }
    }
} as const;

export const ApiPaymentChargebackResponseChargebackStatusSchema = {
    type: 'string',
    description: 'Chargeback status',
    example: 'DONE',
    deprecated: false,
    enum: ['REQUESTED', 'IN_DISPUTE', 'DISPUTE_LOST', 'REVERSED', 'DONE']
} as const;

export const ApiPaymentChargebackResponseChargebackReasonSchema = {
    type: 'string',
    description: 'Chargeback reason',
    example: 'COMMERCIAL_DISAGREEMENT',
    deprecated: false,
    enum: ['ABSENCE_OF_PRINT', 'ABSENT_CARD_FRAUD', 'CARD_ACTIVATED_PHONE_TRANSACTION', 'CARD_FRAUD', 'CARD_RECOVERY_BULLETIN', 'COMMERCIAL_DISAGREEMENT', 'COPY_NOT_RECEIVED', 'CREDIT_OR_DEBIT_PRESENTATION_ERROR', 'DIFFERENT_PAY_METHOD', 'FRAUD', 'INCORRECT_TRANSACTION_VALUE', 'INVALID_CURRENCY', 'INVALID_DATA', 'LATE_PRESENTATION', 'LOCAL_REGULATORY_OR_LEGAL_DISPUTE', 'MULTIPLE_ROCS', 'ORIGINAL_CREDIT_TRANSACTION_NOT_ACCEPTED', 'OTHER_ABSENT_CARD_FRAUD', 'PROCESS_ERROR', 'RECEIVED_COPY_ILLEGIBLE_OR_INCOMPLETE', 'RECURRENCE_CANCELED', 'REQUIRED_AUTHORIZATION_NOT_GRANTED', 'RIGHT_OF_FULL_RECOURSE_FOR_FRAUD', 'SALE_CANCELED', 'SERVICE_DISAGREEMENT_OR_DEFECTIVE_PRODUCT', 'SERVICE_NOT_RECEIVED', 'SPLIT_SALE', 'TRANSFERS_OF_DIVERSE_RESPONSIBILITIES', 'UNQUALIFIED_CAR_RENTAL_DEBIT', 'USA_CARDHOLDER_DISPUTE', 'VISA_FRAUD_MONITORING_PROGRAM', 'WARNING_BULLETIN_FILE']
} as const;

export const ApiChargebackCreditCardResponseDTOSchema = {
    type: 'object',
    properties: {
        number: {
            type: 'string',
            description: 'Last 4 digits of the card used',
            example: '8829',
            deprecated: false
        },
        brand: {
            '$ref': '#/components/schemas/ApiChargebackCreditCardResponseCreditCardBrand'
        }
    },
    description: 'Credit card information',
    deprecated: false
} as const;

export const ApiChargebackCreditCardResponseCreditCardBrandSchema = {
    type: 'string',
    description: 'Flag of the card used',
    example: 'VISA',
    deprecated: false,
    enum: ['VISA', 'MASTERCARD', 'ELO', 'DINERS', 'DISCOVER', 'AMEX', 'HIPERCARD', 'CABAL', 'BANESCARD', 'CREDZ', 'SOROCRED', 'CREDSYSTEM', 'JCB', 'UNKNOWN']
} as const;

export const ApiPaymentChargebackResponseChargebackDisputeStatusSchema = {
    type: 'string',
    description: 'Chargeback dispute status.',
    example: 'ACCEPTED',
    deprecated: false,
    enum: ['REQUESTED', 'ACCEPTED', 'REJECTED']
} as const;

export const ApiChargebackListResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiPaymentChargebackResponseDTO'
            }
        }
    }
} as const;

export const ApiChargebackListRequestCreditCardBrandSchema = {
    type: 'string',
    description: 'Filter by used card brand.',
    example: 'VISA',
    deprecated: false,
    enum: ['VISA', 'MASTERCARD', 'ELO', 'DINERS', 'DISCOVER', 'AMEX', 'HIPERCARD', 'CABAL', 'BANESCARD', 'CREDZ', 'SOROCRED', 'CREDSYSTEM', 'JCB', 'UNKNOWN']
} as const;

export const ApiChargebackListRequestChargebackStatusSchema = {
    type: 'string',
    description: 'Filter by chargeback status.',
    example: 'REQUESTED',
    deprecated: false,
    enum: ['REQUESTED', 'IN_DISPUTE', 'DISPUTE_LOST', 'REVERSED', 'DONE']
} as const;

export const ApiCreditBureauReportGetResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique report identifier in Asaas',
            example: '6c5e73fa-9efd-4a75-b60c-1cafb8d1c7ed',
            deprecated: false
        },
        dateCreated: {
            type: 'string',
            description: 'Date of consultation',
            format: 'date',
            example: '17/01/2025',
            deprecated: false
        },
        cpfCnpj: {
            type: 'string',
            description: 'CPF or CNPJ consulted manually',
            example: '05666663755',
            deprecated: false
        },
        state: {
            '$ref': '#/components/schemas/ApiCreditBureauReportGetResponseState'
        },
        customer: {
            type: 'string',
            description: 'Unique customer identifier in Asaas',
            example: 'cus_000000001766',
            deprecated: false
        },
        downloadUrl: {
            type: 'string',
            description: 'Url to download the report. Available until 11:59 pm on the day of the appointment.',
            example: 'https://www.asaas.com.br/creditBureauReport/download/6c5e73fa-9efd-4a75-b60c-1cafb8d1c7ed',
            deprecated: false
        },
        reportFile: {
            type: 'string',
            description: 'PDF of the query report in Base64 (this field is only returned when the report is created)',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiCreditBureauReportGetResponseStateSchema = {
    type: 'string',
    description: 'UF of the state in which the consultation was made',
    example: 'SC',
    deprecated: true,
    enum: ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RR', 'RO', 'RJ', 'RN', 'RS', 'SC', 'SP', 'SE', 'TO']
} as const;

export const ApiCreditBureauReportSaveRequestDTOSchema = {
    type: 'object',
    properties: {
        customer: {
            type: 'string',
            description: 'Unique customer identifier in Asaas',
            deprecated: false,
            example: null
        },
        cpfCnpj: {
            type: 'string',
            description: 'CPF or CNPJ of the customer. Enter this field if your client is not registered with Asaas',
            example: '05666663755',
            deprecated: false
        },
        state: {
            '$ref': '#/components/schemas/ApiCreditBureauReportSaveRequestState'
        }
    }
} as const;

export const ApiCreditBureauReportSaveRequestStateSchema = {
    type: 'string',
    description: 'State in which you want to carry out the consultation',
    example: 'AC',
    deprecated: true,
    enum: ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RR', 'RO', 'RJ', 'RN', 'RS', 'SC', 'SP', 'SE', 'TO']
} as const;

export const ApiCreditBureauReportListResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiCreditBureauReportGetResponseDTO'
            }
        }
    }
} as const;

export const ApiCreditCardTokenizeRequestDTOSchema = {
    required: ['customer', 'creditCard', 'creditCardHolderInfo', 'remoteIp'],
    type: 'object',
    properties: {
        customer: {
            required: ['customer'],
            type: 'string',
            description: 'Unique customer identifier in Asaas',
            example: 'cus_G7Dvo4iphUNk',
            deprecated: false
        },
        creditCard: {
            '$ref': '#/components/schemas/ApiCreditCardRequestDTO'
        },
        creditCardHolderInfo: {
            '$ref': '#/components/schemas/ApiCreditCardHolderInfoRequestDTO'
        },
        remoteIp: {
            required: ['remoteIp'],
            type: 'string',
            description: "IP from where the customer is making the purchase. Your server's IP must not be entered.",
            example: '116.213.42.532',
            deprecated: false
        }
    }
} as const;

export const ApiCreditCardRequestDTOSchema = {
    type: 'object',
    properties: {
        holderName: {
            required: ['holderName'],
            type: 'string',
            description: 'Name printed on card',
            example: 'John Doe',
            deprecated: false
        },
        number: {
            required: ['number'],
            type: 'string',
            description: 'Card number',
            example: '1234567890123456',
            deprecated: false
        },
        expiryMonth: {
            required: ['expiryMonth'],
            type: 'string',
            description: 'Expiration month with 2 digits',
            example: '1',
            deprecated: false
        },
        expiryYear: {
            required: ['expiryYear'],
            type: 'string',
            description: 'Expiration year with 4 digits',
            example: '2025',
            deprecated: false
        },
        ccv: {
            required: ['ccv'],
            type: 'string',
            description: 'Security code',
            example: '123',
            deprecated: false
        }
    },
    description: 'Credit card information',
    deprecated: false
} as const;

export const ApiCreditCardHolderInfoRequestDTOSchema = {
    type: 'object',
    properties: {
        name: {
            required: ['name'],
            type: 'string',
            description: 'Name of card holder',
            example: 'John Doe',
            deprecated: false
        },
        email: {
            required: ['email'],
            type: 'string',
            description: 'Cardholder email',
            example: 'john.doe@asaas.com',
            deprecated: false
        },
        cpfCnpj: {
            required: ['cpfCnpj'],
            type: 'string',
            description: 'CPF or CNPJ of the cardholder',
            example: '12345678901',
            deprecated: false
        },
        postalCode: {
            required: ['postalCode'],
            type: 'string',
            description: 'Cardholder zip code',
            example: '12345678',
            deprecated: false
        },
        addressNumber: {
            required: ['addressNumber'],
            type: 'string',
            description: 'Cardholder address number',
            example: '123',
            deprecated: false
        },
        addressComplement: {
            type: 'string',
            description: "Supplementing the cardholder's address",
            deprecated: false,
            example: null
        },
        phone: {
            required: ['phone'],
            type: 'string',
            description: "Phone with cardholder's area code",
            deprecated: false,
            example: null
        },
        mobilePhone: {
            type: 'string',
            description: "Cardholder's cell phone",
            deprecated: false,
            example: null
        }
    },
    description: 'Credit card holder information',
    deprecated: false
} as const;

export const ApiCreditCardTokenizeResponseDTOSchema = {
    type: 'object',
    properties: {
        creditCardNumber: {
            type: 'string',
            description: 'Last 4 digits of the card used',
            example: '8829',
            deprecated: false
        },
        creditCardBrand: {
            '$ref': '#/components/schemas/ApiCreditCardTokenizeResponseCreditCardBrand'
        },
        creditCardToken: {
            type: 'string',
            description: 'Credit card token that can be sent in future transactions without the need to re-enter card and cardholder details.',
            example: 'a75a1d98-c52d-4a6b-a413-71e00b193c99',
            deprecated: false
        }
    }
} as const;

export const ApiCreditCardTokenizeResponseCreditCardBrandSchema = {
    type: 'string',
    description: 'Brand of the card used',
    example: 'VISA',
    deprecated: false,
    enum: ['VISA', 'MASTERCARD', 'ELO', 'DINERS', 'DISCOVER', 'AMEX', 'HIPERCARD', 'CABAL', 'BANESCARD', 'CREDZ', 'SOROCRED', 'CREDSYSTEM', 'JCB', 'UNKNOWN']
} as const;

export const ApiCustomerAccountRestoreRequestDTOSchema = {
    type: 'object',
    properties: {}
} as const;

export const ApiCustomerAccountGetResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'customer',
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique customer identifier',
            example: 'cus_000005401844',
            deprecated: false
        },
        dateCreated: {
            type: 'string',
            description: 'Customer creation date',
            example: '2024-07-12',
            deprecated: false
        },
        name: {
            type: 'string',
            description: 'Client name',
            example: 'John Doe',
            deprecated: false
        },
        email: {
            type: 'string',
            description: 'Customer email',
            example: 'john.doe@asaas.com.br',
            deprecated: false
        },
        phone: {
            type: 'string',
            description: 'Customer phone',
            example: '90999999999',
            deprecated: false
        },
        mobilePhone: {
            type: 'string',
            description: 'Customer cell phone',
            example: '90999999999',
            deprecated: false
        },
        address: {
            type: 'string',
            description: 'Customer address',
            example: 'Av. Paulista',
            deprecated: false
        },
        addressNumber: {
            type: 'string',
            description: 'Customer address number',
            example: '150',
            deprecated: false
        },
        complement: {
            type: 'string',
            description: 'Customer address complement',
            example: 'Sala 201',
            deprecated: false
        },
        province: {
            type: 'string',
            description: 'Customer address neighborhood',
            example: 'Centro',
            deprecated: false
        },
        city: {
            type: 'string',
            description: 'Unique city identifier in Asaas',
            example: '12565',
            deprecated: false
        },
        cityName: {
            type: 'string',
            description: 'City of customer address',
            example: 'São Paulo',
            deprecated: false
        },
        state: {
            type: 'string',
            description: 'Customer address status',
            example: 'SP',
            deprecated: false
        },
        country: {
            type: 'string',
            description: 'Customer country',
            example: 'Brasil',
            deprecated: false
        },
        postalCode: {
            type: 'string',
            description: 'Customer address zip code',
            example: '01310000',
            deprecated: false
        },
        cpfCnpj: {
            type: 'string',
            description: 'Customer CPF or CNPJ',
            example: '24971563792',
            deprecated: false
        },
        personType: {
            '$ref': '#/components/schemas/ApiCustomerAccountGetResponsePersonType'
        },
        deleted: {
            type: 'boolean',
            description: 'Indicates whether it is a deleted client',
            example: false,
            deprecated: false
        },
        additionalEmails: {
            type: 'string',
            description: 'Additional customer emails',
            example: 'john.doe@asaas.com,john.doe.silva@asaas.com.br',
            deprecated: false
        },
        externalReference: {
            type: 'string',
            description: 'External customer reference',
            example: '12987382',
            deprecated: false
        },
        notificationDisabled: {
            type: 'boolean',
            description: 'Indicates whether notifications are disabled',
            example: false,
            deprecated: false
        },
        observations: {
            type: 'string',
            description: 'Customer Observations',
            example: 'great payer, no problems so far',
            deprecated: false
        },
        foreignCustomer: {
            type: 'boolean',
            description: "Indicates if it's non-brazilian customer",
            example: false,
            deprecated: false
        }
    }
} as const;

export const ApiCustomerAccountGetResponsePersonTypeSchema = {
    type: 'string',
    description: 'Kind of person',
    example: 'FISICA',
    deprecated: false,
    enum: ['JURIDICA', 'FISICA']
} as const;

export const ApiCustomerAccountSaveRequestDTOSchema = {
    required: ['name', 'cpfCnpj'],
    type: 'object',
    properties: {
        name: {
            required: ['name'],
            type: 'string',
            description: 'Client name',
            example: 'John Doe',
            deprecated: false
        },
        cpfCnpj: {
            required: ['cpfCnpj'],
            type: 'string',
            description: 'Customer CPF or CNPJ',
            example: '24971563792',
            deprecated: false
        },
        email: {
            type: 'string',
            description: 'Customer email',
            example: 'john.doe@asaas.com.br',
            deprecated: false
        },
        phone: {
            type: 'string',
            description: 'Landline',
            example: '4738010919',
            deprecated: false
        },
        mobilePhone: {
            type: 'string',
            description: 'Cell phone',
            example: '4799376637',
            deprecated: false
        },
        address: {
            type: 'string',
            description: 'Public place',
            example: 'Av. Paulista',
            deprecated: false
        },
        addressNumber: {
            type: 'string',
            description: 'Address number',
            example: '150',
            deprecated: false
        },
        complement: {
            type: 'string',
            description: 'Address complement (max. 255 characters)',
            example: 'Sala 201',
            deprecated: false
        },
        province: {
            type: 'string',
            description: 'Neighborhood',
            example: 'Centro',
            deprecated: false
        },
        postalCode: {
            type: 'string',
            description: 'Address zip code',
            example: '01310-000',
            deprecated: false
        },
        externalReference: {
            type: 'string',
            description: 'Customer identifier in your system',
            example: '12987382',
            deprecated: false
        },
        notificationDisabled: {
            type: 'boolean',
            description: 'true to disable sending billing notifications',
            example: false,
            deprecated: false
        },
        additionalEmails: {
            type: 'string',
            description: 'Additional emails for sending billing notifications separated by ","',
            example: 'john.doe@asaas.com,john.doe.silva@asaas.com.br',
            deprecated: false
        },
        municipalInscription: {
            type: 'string',
            description: 'Customer municipal registration',
            example: '46683695908',
            deprecated: false
        },
        stateInscription: {
            type: 'string',
            description: 'Customer state registration',
            example: '646681195275',
            deprecated: false
        },
        observations: {
            type: 'string',
            description: 'Additional observations',
            example: 'great payer, no problems so far',
            deprecated: false
        },
        groupName: {
            type: 'string',
            description: 'Name of the group the customer belongs to',
            deprecated: false,
            example: null
        },
        company: {
            type: 'string',
            description: 'Company',
            deprecated: false,
            example: null
        },
        foreignCustomer: {
            type: 'boolean',
            description: "inform true if it's a non-brazilian customer",
            example: false,
            deprecated: false
        }
    }
} as const;

export const ApiCustomerAccountUpdateRequestDTOSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'Client name',
            example: 'John Doe',
            deprecated: false
        },
        cpfCnpj: {
            type: 'string',
            description: 'Customer CPF or CNPJ',
            example: '24971563792',
            deprecated: false
        },
        email: {
            type: 'string',
            description: 'Customer email',
            example: 'john.doe@asaas.com.br',
            deprecated: false
        },
        phone: {
            type: 'string',
            description: 'Landline',
            example: '4738010919',
            deprecated: false
        },
        mobilePhone: {
            type: 'string',
            description: 'Cell phone',
            example: '4799376637',
            deprecated: false
        },
        address: {
            type: 'string',
            description: 'Public place',
            example: 'Av. Paulista',
            deprecated: false
        },
        addressNumber: {
            type: 'string',
            description: 'Address number',
            example: '150',
            deprecated: false
        },
        complement: {
            type: 'string',
            description: 'Address complement',
            example: 'Sala 201',
            deprecated: false
        },
        province: {
            type: 'string',
            description: 'Neighborhood',
            example: 'Centro',
            deprecated: false
        },
        postalCode: {
            type: 'string',
            description: 'Address zip code',
            example: '01310-000',
            deprecated: false
        },
        externalReference: {
            type: 'string',
            description: 'Customer identifier in your system',
            example: '12987382',
            deprecated: false
        },
        notificationDisabled: {
            type: 'boolean',
            description: 'true to disable sending billing notifications',
            example: false,
            deprecated: false
        },
        additionalEmails: {
            type: 'string',
            description: 'Additional emails for sending billing notifications separated by ","',
            example: 'john.doe@asaas.com,john.doe.silva@asaas.com.br',
            deprecated: false
        },
        municipalInscription: {
            type: 'string',
            description: 'Customer municipal registration',
            example: '46683695908',
            deprecated: false
        },
        stateInscription: {
            type: 'string',
            description: 'Customer state registration',
            example: '646681195275',
            deprecated: false
        },
        observations: {
            type: 'string',
            description: 'Additional observations',
            example: 'great payer, no problems so far',
            deprecated: false
        },
        groupName: {
            type: 'string',
            description: 'Name of the group the customer belongs to',
            deprecated: false,
            example: null
        },
        company: {
            type: 'string',
            description: 'Company',
            deprecated: false,
            example: null
        },
        foreignCustomer: {
            type: 'boolean',
            description: "inform true if it's a non-brazilian customer",
            example: false,
            deprecated: false
        }
    }
} as const;

export const ApiCustomerAccountListResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiCustomerAccountGetResponseDTO'
            }
        }
    }
} as const;

export const ApiCustomerAccountDeleteResponseDTOSchema = {
    type: 'object',
    properties: {
        deleted: {
            type: 'boolean',
            description: 'Indicates whether the client has been removed',
            example: true,
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique customer identifier',
            example: 'cus_000005401844',
            deprecated: false
        }
    }
} as const;

export const ApiCustomerGetResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'account',
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique subaccount identifier in Asaas',
            example: '4f468235-cec3-482f-b3d0-348af4c7194',
            deprecated: false
        },
        name: {
            type: 'string',
            description: 'Subaccount name',
            example: 'John Doe',
            deprecated: false
        },
        email: {
            type: 'string',
            description: 'Subaccount email',
            example: 'john.doe@asaas.com.br',
            deprecated: false
        },
        loginEmail: {
            type: 'string',
            description: 'Email for subaccount login, if not provided, the subaccount email will be used',
            example: 'john.doe@asaas.com.br',
            deprecated: false
        },
        phone: {
            type: 'string',
            description: 'Telephone',
            deprecated: false,
            example: null
        },
        mobilePhone: {
            type: 'string',
            description: 'Cellphone',
            deprecated: false,
            example: null
        },
        address: {
            type: 'string',
            description: 'Public place',
            example: 'Rua Fernando Orlandi',
            deprecated: false
        },
        addressNumber: {
            type: 'string',
            description: 'Address number',
            example: '544',
            deprecated: false
        },
        complement: {
            type: 'string',
            description: 'Address complement',
            deprecated: false,
            example: null
        },
        province: {
            type: 'string',
            description: 'Neighborhood',
            example: 'Jardim Pedra Branca',
            deprecated: false
        },
        postalCode: {
            type: 'string',
            description: 'Address zip code',
            example: '14079-452',
            deprecated: false
        },
        cpfCnpj: {
            type: 'string',
            description: 'CPF or CNPJ of the subaccount owner',
            example: '35381637000150',
            deprecated: false
        },
        birthDate: {
            type: 'string',
            description: 'Date of birth (only for Individuals)',
            format: 'date',
            example: '1995-04-12',
            deprecated: false
        },
        personType: {
            '$ref': '#/components/schemas/ApiCustomerGetResponsePersonType'
        },
        companyType: {
            '$ref': '#/components/schemas/ApiCustomerGetResponseCompanyType'
        },
        city: {
            type: 'integer',
            description: 'Unique city identifier in Asaas',
            format: 'int32',
            example: 15478,
            deprecated: false
        },
        state: {
            type: 'string',
            description: 'State abbreviation (SP, RJ, SC, ...)',
            example: 'SP',
            deprecated: false
        },
        country: {
            type: 'string',
            description: 'Country (Fixed Brazil)',
            example: 'Brasil',
            deprecated: false
        },
        tradingName: {
            type: 'string',
            description: 'Display name (auto-populated)',
            deprecated: false,
            example: null
        },
        site: {
            type: 'string',
            description: 'Url reffered to the subaccount',
            example: 'https://www.dominio.com',
            deprecated: false
        },
        walletId: {
            type: 'string',
            description: 'Unique wallet identifier to split charges or transfer between Asaas accounts',
            example: 'c0c1688f-636b-42c0-b6ee-7339182276b7',
            deprecated: false
        },
        accountNumber: {
            '$ref': '#/components/schemas/ApiCustomerAccountNumberDTO'
        },
        commercialInfoExpiration: {
            '$ref': '#/components/schemas/ApiCustomerUpdateRequestCommercialInfoExpirationResponseDTO'
        }
    }
} as const;

export const ApiCustomerGetResponsePersonTypeSchema = {
    type: 'string',
    description: 'Kind of person',
    example: 'JURIDICA',
    deprecated: false,
    enum: ['JURIDICA', 'FISICA']
} as const;

export const ApiCustomerGetResponseCompanyTypeSchema = {
    type: 'string',
    description: 'Type of company (only when Legal Entity)',
    example: 'MEI',
    deprecated: false,
    enum: ['MEI', 'LIMITED', 'INDIVIDUAL', 'ASSOCIATION']
} as const;

export const ApiCustomerAccountNumberDTOSchema = {
    type: 'object',
    properties: {
        agency: {
            type: 'string',
            description: 'Account agency',
            example: '0001',
            deprecated: false
        },
        account: {
            type: 'string',
            description: 'Account number',
            example: '3514',
            deprecated: false
        },
        accountDigit: {
            type: 'string',
            description: 'Account digit',
            example: '3',
            deprecated: false
        }
    },
    description: 'Subaccount number in Asaas',
    deprecated: false
} as const;

export const ApiCustomerUpdateRequestCommercialInfoExpirationResponseDTOSchema = {
    type: 'object',
    properties: {
        isExpired: {
            type: 'boolean',
            description: 'Informs if commercial data is expired',
            example: false,
            deprecated: false
        },
        scheduledDate: {
            type: 'string',
            description: 'Informs the expiration date of commercial data',
            format: 'date-time',
            example: '2025-05-05 00:00:00',
            deprecated: false
        }
    },
    description: 'Information about the expiration of commercial data',
    deprecated: false
} as const;

export const ApiCustomerSaveRequestDTOSchema = {
    required: ['name', 'email', 'cpfCnpj', 'mobilePhone', 'incomeValue', 'address', 'addressNumber', 'province', 'postalCode'],
    type: 'object',
    properties: {
        name: {
            required: ['name'],
            type: 'string',
            description: 'Subaccount name',
            example: 'John Doe',
            deprecated: false
        },
        email: {
            required: ['email'],
            type: 'string',
            description: 'Subaccount email',
            example: 'john.doe@asaas.com.br',
            deprecated: false
        },
        loginEmail: {
            type: 'string',
            description: 'Email for subaccount login, if not provided, the subaccount email will be used',
            example: 'johndoe@asaas.com.br',
            deprecated: false
        },
        cpfCnpj: {
            required: ['cpfCnpj'],
            type: 'string',
            description: 'CPF or CNPJ of the subaccount owner',
            example: '35381637000150',
            deprecated: false
        },
        birthDate: {
            type: 'string',
            description: 'Date of birth (only for Individuals)',
            format: 'date',
            example: '1995-04-12',
            deprecated: false
        },
        companyType: {
            '$ref': '#/components/schemas/ApiCustomerSaveRequestCompanyType'
        },
        phone: {
            type: 'string',
            description: 'Telephone',
            deprecated: false,
            example: null
        },
        mobilePhone: {
            required: ['mobilePhone'],
            type: 'string',
            description: 'Cellphone',
            deprecated: false,
            example: null
        },
        site: {
            type: 'string',
            description: 'Url reffered to the subaccount',
            example: 'https://www.dominio.com',
            deprecated: false
        },
        incomeValue: {
            required: ['incomeValue'],
            type: 'number',
            description: 'Billing/Monthly income',
            example: 25000,
            deprecated: false
        },
        address: {
            required: ['address'],
            type: 'string',
            description: 'Public place',
            example: 'Rua Fernando Orlandi',
            deprecated: false
        },
        addressNumber: {
            required: ['addressNumber'],
            type: 'string',
            description: 'Address number',
            example: '544',
            deprecated: false
        },
        complement: {
            type: 'string',
            description: 'Address complement',
            deprecated: false,
            example: null
        },
        province: {
            required: ['province'],
            type: 'string',
            description: 'Neighborhood',
            example: 'Jardim Pedra Branca',
            deprecated: false
        },
        postalCode: {
            required: ['postalCode'],
            type: 'string',
            description: 'Address zip code',
            example: '14079-452',
            deprecated: false
        },
        webhooks: {
            type: 'array',
            description: 'Array with desired Webhooks settings',
            deprecated: false,
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        description: 'Webhook name',
                        example: 'Name Example',
                        deprecated: false
                    },
                    url: {
                        type: 'string',
                        description: 'Webhook URL',
                        example: 'https://www.exemplo.com/webhook/asaas',
                        deprecated: false
                    },
                    email: {
                        type: 'string',
                        description: 'Email that will receive notifications about the Webhook',
                        example: 'john.doe@asaas.com.br',
                        deprecated: false
                    },
                    enabled: {
                        type: 'boolean',
                        description: 'Set whether the Webhook is active',
                        example: true,
                        deprecated: false
                    },
                    interrupted: {
                        type: 'boolean',
                        description: 'Set whether the sync queue is stopped',
                        example: false,
                        deprecated: false
                    },
                    apiVersion: {
                        type: 'integer',
                        description: 'API Version',
                        format: 'int32',
                        example: 3,
                        deprecated: false
                    },
                    authToken: {
                        type: 'string',
                        description: 'Webhook authentication token',
                        example: '5tLxsL6uoN',
                        deprecated: false
                    },
                    sendType: {
                        '$ref': '#/components/schemas/ApiPushNotificationConfigSaveRequestPushNotificationSendType'
                    },
                    events: {
                        type: 'array',
                        description: 'List of events this Webhook will observe',
                        example: ['PAYMENT_RECEIVED', 'PAYMENT_CONFIRMED'],
                        deprecated: false,
                        items: {
                            type: 'string'
                        }
                    }
                }
            }
        }
    }
} as const;

export const ApiCustomerSaveRequestCompanyTypeSchema = {
    type: 'string',
    description: 'Type of company (only when Legal Entity)',
    example: 'MEI',
    deprecated: false,
    enum: ['MEI', 'LIMITED', 'INDIVIDUAL', 'ASSOCIATION']
} as const;

export const ApiPushNotificationConfigSaveRequestDTOSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'Webhook name',
            example: 'Name Example',
            deprecated: false
        },
        url: {
            type: 'string',
            description: 'Webhook URL',
            example: 'https://www.exemplo.com/webhook/asaas',
            deprecated: false
        },
        email: {
            type: 'string',
            description: 'Email that will receive notifications about the Webhook',
            example: 'john.doe@asaas.com.br',
            deprecated: false
        },
        enabled: {
            type: 'boolean',
            description: 'Set whether the Webhook is active',
            example: true,
            deprecated: false
        },
        interrupted: {
            type: 'boolean',
            description: 'Set whether the sync queue is stopped',
            example: false,
            deprecated: false
        },
        apiVersion: {
            type: 'integer',
            description: 'API Version',
            format: 'int32',
            example: 3,
            deprecated: false
        },
        authToken: {
            type: 'string',
            description: 'Webhook authentication token',
            example: '5tLxsL6uoN',
            deprecated: false
        },
        sendType: {
            '$ref': '#/components/schemas/ApiPushNotificationConfigSaveRequestPushNotificationSendType'
        },
        events: {
            type: 'array',
            description: 'List of events this Webhook will observe',
            example: ['PAYMENT_RECEIVED', 'PAYMENT_CONFIRMED'],
            deprecated: false,
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const ApiPushNotificationConfigSaveRequestPushNotificationSendTypeSchema = {
    type: 'string',
    description: 'Sequential (SEQUENTIALLY) or non-sequential (NON_SEQUENTIALLY)',
    example: 'SEQUENTIALLY',
    deprecated: false,
    enum: ['NON_SEQUENTIALLY', 'SEQUENTIALLY']
} as const;

export const ApiPushNotificationConfigSaveRequestPushNotificationRequestEventSchema = {
    type: 'string'
} as const;

export const ApiCustomerSaveResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'account',
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique subaccount identifier in Asaas',
            example: '4f468235-cec3-482f-b3d0-348af4c7194',
            deprecated: false
        },
        name: {
            type: 'string',
            description: 'Subaccount name',
            example: 'John Doe',
            deprecated: false
        },
        email: {
            type: 'string',
            description: 'Subaccount email',
            example: 'john.doe@asaas.com.br',
            deprecated: false
        },
        loginEmail: {
            type: 'string',
            description: 'Email for subaccount login, if not provided, the subaccount email will be used',
            example: 'john.doe@asaas.com.br',
            deprecated: false
        },
        phone: {
            type: 'string',
            description: 'Telephone',
            deprecated: false,
            example: null
        },
        mobilePhone: {
            type: 'string',
            description: 'Cellphone',
            deprecated: false,
            example: null
        },
        address: {
            type: 'string',
            description: 'Public place',
            example: 'Rua Fernando Orlandi',
            deprecated: false
        },
        addressNumber: {
            type: 'string',
            description: 'Address number',
            example: '544',
            deprecated: false
        },
        complement: {
            type: 'string',
            description: 'Address complement',
            deprecated: false,
            example: null
        },
        province: {
            type: 'string',
            description: 'Neighborhood',
            example: 'Jardim Pedra Branca',
            deprecated: false
        },
        postalCode: {
            type: 'string',
            description: 'Address zip code',
            example: '14079-452',
            deprecated: false
        },
        cpfCnpj: {
            type: 'string',
            description: 'CPF or CNPJ of the subaccount owner',
            example: '35381637000150',
            deprecated: false
        },
        birthDate: {
            type: 'string',
            description: 'Date of birth (only for Individuals)',
            format: 'date',
            example: '1995-04-12',
            deprecated: false
        },
        personType: {
            '$ref': '#/components/schemas/ApiCustomerSaveResponsePersonType'
        },
        companyType: {
            '$ref': '#/components/schemas/ApiCustomerSaveResponseCompanyType'
        },
        city: {
            type: 'integer',
            description: 'Unique city identifier in Asaas',
            format: 'int32',
            example: 15478,
            deprecated: false
        },
        state: {
            type: 'string',
            description: 'State abbreviation (SP, RJ, SC, ...)',
            example: 'SP',
            deprecated: false
        },
        country: {
            type: 'string',
            description: 'Country (Fixed Brazil)',
            example: 'Brasil',
            deprecated: false
        },
        tradingName: {
            type: 'string',
            description: 'Display name (auto-populated)',
            deprecated: false,
            example: null
        },
        site: {
            type: 'string',
            description: 'Url reffered to the subaccount',
            example: 'https://www.dominio.com',
            deprecated: false
        },
        walletId: {
            type: 'string',
            description: 'Unique wallet identifier to split charges or transfer between Asaas accounts',
            example: 'c0c1688f-636b-42c0-b6ee-7339182276b7',
            deprecated: false
        },
        accountNumber: {
            '$ref': '#/components/schemas/ApiCustomerAccountNumberDTO'
        },
        commercialInfoExpiration: {
            '$ref': '#/components/schemas/ApiCustomerUpdateRequestCommercialInfoExpirationResponseDTO'
        },
        apiKey: {
            type: 'string',
            description: 'API key',
            example: '3d425760b01ea73feab3357de2a50c42fc8bc055861f4631e3be906700210874',
            deprecated: false
        }
    }
} as const;

export const ApiCustomerSaveResponsePersonTypeSchema = {
    type: 'string',
    description: 'Kind of person',
    example: 'JURIDICA',
    deprecated: false,
    enum: ['JURIDICA', 'FISICA']
} as const;

export const ApiCustomerSaveResponseCompanyTypeSchema = {
    type: 'string',
    description: 'Type of company (only when Legal Entity)',
    example: 'MEI',
    deprecated: false,
    enum: ['MEI', 'LIMITED', 'INDIVIDUAL', 'ASSOCIATION']
} as const;

export const ApiCustomerListResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiCustomerGetResponseDTO'
            }
        }
    }
} as const;

export const ApiCustomerFiscalInfoUpdateUseNationalPortalRequestDTOSchema = {
    required: ['enabled'],
    type: 'object',
    properties: {
        enabled: {
            required: ['enabled'],
            type: 'boolean',
            description: 'Indicates whether the issuing of invoices through the national portal should be enabled or not.',
            example: true,
            deprecated: false
        }
    }
} as const;

export const ApiCustomerFiscalInfoUpdateUseNationalPortalResponseDTOSchema = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean',
            description: 'Status of the request to change the use status of national portal for issuing invoices.',
            example: true,
            deprecated: false
        }
    }
} as const;

export const ApiCustomerFiscalInfoListMunicipalServicesResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            example: [
                {
                    id: '3544',
                    description: '1.01 - Análise e desenvolvimento de sistemas',
                    issTax: 5
                },
                {
                    id: '2360',
                    description: '1.02 - Programação',
                    issTax: 3
                }
            ],
            deprecated: false,
            items: {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        description: 'Unique service identifier',
                        example: '3544',
                        deprecated: false
                    },
                    description: {
                        type: 'string',
                        description: 'Service description',
                        example: '1.01 - Análise e desenvolvimento de sistemas',
                        deprecated: false
                    },
                    issTax: {
                        type: 'number',
                        description: 'ISS percentage rate',
                        example: 0.5,
                        deprecated: false
                    }
                }
            }
        }
    }
} as const;

export const ApiCustomerFiscalInfoListMunicipalServicesResponseDataDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique service identifier',
            example: '3544',
            deprecated: false
        },
        description: {
            type: 'string',
            description: 'Service description',
            example: '1.01 - Análise e desenvolvimento de sistemas',
            deprecated: false
        },
        issTax: {
            type: 'number',
            description: 'ISS percentage rate',
            example: 0.5,
            deprecated: false
        }
    }
} as const;

export const ApiCustomerFiscalInfoMunicipalOptionsGetResponseDTOSchema = {
    type: 'object',
    properties: {
        authenticationType: {
            '$ref': '#/components/schemas/ApiCustomerFiscalInfoMunicipalOptionsGetResponseEnotasTipoAutenticacao'
        },
        supportsCancellation: {
            type: 'boolean',
            description: 'Whether or not it supports the cancellation of invoices automatically at your city hall',
            example: true,
            deprecated: false,
            default: true
        },
        usesSpecialTaxRegimes: {
            type: 'boolean',
            description: 'It is necessary to inform or not the special taxation regime. If used, enter it in the `specialTaxRegime` field of **Create or update tax information** according to the options returned in the `specialTaxRegimesList` list.',
            example: true,
            deprecated: false,
            default: true
        },
        usesServiceListItem: {
            type: 'boolean',
            description: 'Whether or not to inform the item on the service list',
            example: true,
            deprecated: false,
            default: true
        },
        specialTaxRegimesList: {
            type: 'array',
            description: 'Tax calculation regime options',
            deprecated: false,
            items: {
                type: 'object',
                properties: {
                    label: {
                        type: 'string',
                        description: 'Name of the special taxation regime',
                        example: 'Municipal Micro enterprise',
                        deprecated: false
                    },
                    value: {
                        type: 'string',
                        description: 'Special taxation regime identifier',
                        example: '1',
                        deprecated: false
                    }
                }
            }
        },
        nationalPortalTaxCalculationRegimeList: {
            type: 'array',
            description: 'Special taxation regime options',
            deprecated: false,
            items: {
                type: 'object',
                properties: {
                    label: {
                        type: 'string',
                        description: 'Name of the tax calculation regime',
                        example: 'Regime for calculating federal and municipal taxes by the SN',
                        deprecated: false
                    },
                    value: {
                        type: 'string',
                        description: 'Identifier of the tax calculation regime',
                        example: '0',
                        deprecated: false
                    }
                }
            }
        },
        nationalPortalTaxCalculationRegimeHelp: {
            type: 'string',
            description: 'Explanation of the tax calculation regime',
            example: `This identifies your company's tax calculation regime. If you wish to leave no option selected, select the "None" option. It must only be completed by companies classified as ME or EPP opting for Simples Nacional. Consult the need for this information with your city hall or accounting department.`,
            deprecated: false
        },
        municipalInscriptionHelp: {
            type: 'string',
            description: 'Explanation of the municipal registration format',
            example: `Only enter numbers without periods or formatting (if they contain letters, always enter them in capital letters).

Valid examples: 4301000010 or 131436001X`,
            deprecated: false
        },
        specialTaxRegimeHelp: {
            type: 'string',
            description: 'Explanation of the special taxation regime',
            example: `This identifies your company's taxation regime, if you wish to leave no option marked, select the dash ("-").
 
 Simple national companies generally opt for ME or ME EPP`,
            deprecated: false
        },
        serviceListItemHelp: {
            type: 'string',
            description: 'Explanation of service list item format',
            example: `Enter the service list item here, it is also an identifier of the service provided.
 
 You need to complete the service list item maintaining the formatting.
 Valid examples: 17.02 or 8.02`,
            deprecated: false
        },
        digitalCertificatedHelp: {
            type: 'string',
            description: 'Explanation of digital certificate',
            example: 'Your city hall requires the use of a digital certificate, so include your A1 certificate file here.',
            deprecated: false
        },
        accessTokenHelp: {
            type: 'string',
            description: 'Token Explanation',
            deprecated: false,
            example: null
        },
        municipalServiceCodeHelp: {
            type: 'string',
            description: 'Explanation of municipal service code format',
            example: `Enter here the municipal code that identifies the service provided on the invoice.
In some cities this code is known as the taxation code or CTISS.

Valid example: 010300388`,
            deprecated: false
        }
    }
} as const;

export const ApiCustomerFiscalInfoMunicipalOptionsGetResponseEnotasTipoAutenticacaoSchema = {
    type: 'string',
    description: 'Type of authentication required at city hall',
    example: 'CERTIFICATE',
    deprecated: false,
    enum: ['CERTIFICATE', 'TOKEN', 'USER_AND_PASSWORD']
} as const;

export const ApiCustomerFiscalInfoMunicipalOptionsSpecialTaxRegimesDTOSchema = {
    type: 'object',
    properties: {
        label: {
            type: 'string',
            description: 'Name of the special taxation regime',
            example: 'Municipal Micro enterprise',
            deprecated: false
        },
        value: {
            type: 'string',
            description: 'Special taxation regime identifier',
            example: '1',
            deprecated: false
        }
    }
} as const;

export const ApiCustomerFiscalInfoMunicipalOptionsNationalPortalTaxCalculationRegimeDTOSchema = {
    type: 'object',
    properties: {
        label: {
            type: 'string',
            description: 'Name of the tax calculation regime',
            example: 'Regime for calculating federal and municipal taxes by the SN',
            deprecated: false
        },
        value: {
            type: 'string',
            description: 'Identifier of the tax calculation regime',
            example: '0',
            deprecated: false
        }
    }
} as const;

export const ApiCustomerFiscalInfoGetResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'customerFiscalInfo',
            deprecated: false
        },
        email: {
            type: 'string',
            description: 'Email used by Asaas to send invoice notifications and alerts',
            example: 'john.doe@asaas.com.br',
            deprecated: false
        },
        municipalInscription: {
            type: 'string',
            description: 'Company municipal registration',
            example: '21779501',
            deprecated: false
        },
        simplesNacional: {
            type: 'boolean',
            description: 'Indicates whether the company opts for the simple national system',
            example: false,
            deprecated: false,
            default: true
        },
        culturalProjectsPromoter: {
            type: 'boolean',
            description: 'Identifies whether the company is classified as a cultural promoter',
            example: false,
            deprecated: false,
            default: true
        },
        cnae: {
            type: 'string',
            description: 'CNAE code',
            example: '6209100',
            deprecated: false
        },
        specialTaxRegime: {
            type: 'string',
            description: 'Special taxation regime identifier',
            example: '1',
            deprecated: false
        },
        serviceListItem: {
            type: 'string',
            description: 'Service list item, as http://www.planalto.gov.br/ccivil_03/leis/LCP/Lcp116.htm',
            deprecated: false,
            example: null
        },
        rpsSerie: {
            type: 'string',
            description: 'Serial Number registered for the company',
            example: '1',
            deprecated: false
        },
        rpsNumber: {
            type: 'integer',
            description: 'RPS number used in the last invoice issued to your company',
            format: 'int32',
            example: 1,
            deprecated: false
        },
        loteNumber: {
            type: 'integer',
            description: 'Batch number used on the last invoice issued by your company',
            format: 'int32',
            example: 1,
            deprecated: false
        },
        username: {
            type: 'string',
            description: "User to access your city's city hall website",
            example: 'johndoe',
            deprecated: false
        },
        passwordSent: {
            type: 'boolean',
            description: 'Indicates whether the password to access the city hall website has been entered',
            example: true,
            deprecated: false,
            default: true
        },
        accessTokenSent: {
            type: 'boolean',
            description: 'Indicates whether the token for accessing the city hall website was provided',
            example: true,
            deprecated: false,
            default: true
        },
        certificateSent: {
            type: 'boolean',
            description: 'Indicates whether the digital certificate for access to the city hall website has been provided',
            example: true,
            deprecated: false,
            default: true
        },
        nationalPortalTaxCalculationRegime: {
            type: 'string',
            description: 'Identifier of the tax calculation regime',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiCustomerFiscalInfoSaveRequestDTOSchema = {
    required: ['email', 'simplesNacional'],
    type: 'object',
    properties: {
        email: {
            required: ['email'],
            type: 'string',
            description: 'Email used by Asaas to send invoice notifications and alerts',
            example: 'john.doe@asaas.com.br',
            deprecated: false
        },
        municipalInscription: {
            type: 'string',
            description: 'Company municipal registration',
            example: '21779501',
            deprecated: false
        },
        simplesNacional: {
            required: ['simplesNacional'],
            type: 'boolean',
            description: 'Indicates whether the company opts for the simple national system',
            example: false,
            deprecated: false,
            default: true
        },
        culturalProjectsPromoter: {
            type: 'boolean',
            description: 'Identifies whether the company is classified as a cultural promoter',
            example: false,
            deprecated: false,
            default: true
        },
        cnae: {
            type: 'string',
            description: 'CNAE code',
            example: '6209100',
            deprecated: false
        },
        specialTaxRegime: {
            type: 'string',
            description: 'Special taxation regime identifier',
            example: '1',
            deprecated: false
        },
        serviceListItem: {
            type: 'string',
            description: 'Service list item, as http://www.planalto.gov.br/ccivil_03/leis/LCP/Lcp116.htm',
            deprecated: false,
            example: null
        },
        rpsSerie: {
            type: 'string',
            description: "Serial Number used by your company to issue invoices. In most cities the serial number used is '1' or 'E'",
            example: '1',
            deprecated: false
        },
        rpsNumber: {
            type: 'integer',
            description: "RPS number used on the last invoice issued by your company. If your last NF issued has an RPS equal to '100', this field must be filled in with '101'. If you have never issued invoices through your city hall's website, enter '1' in this field",
            format: 'int32',
            example: 1,
            deprecated: false
        },
        loteNumber: {
            type: 'integer',
            description: "Batch number used on the last invoice issued by your company. If the last lot used in your city hall is '25', this field must be filled in with '26'. Only enter this field if your city hall requires the use of lots",
            format: 'int32',
            example: 1,
            deprecated: false
        },
        username: {
            type: 'string',
            description: "User to access your city's city hall website",
            example: 'johndoe',
            deprecated: false
        },
        password: {
            type: 'string',
            description: 'Password to access the city hall website',
            deprecated: false,
            example: null
        },
        accessToken: {
            type: 'string',
            description: 'Token for access to the city hall website (If access to your city hall website is via Token)',
            deprecated: false,
            example: null
        },
        certificateFile: {
            '$ref': '#/components/schemas/File'
        },
        certificatePassword: {
            type: 'string',
            description: 'Password for the digital certificate sent (If access to your city hall website through a digital certificate)',
            deprecated: false,
            example: null
        },
        nationalPortalTaxCalculationRegime: {
            type: 'string',
            description: 'Identifier of the tax calculation regime. It must only be completed by companies classified as ME or EPP opting for Simples Nacional. Consult the need for this information with your city hall or accounting department.',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiCustomerInvoiceCancelRequestDTOSchema = {
    type: 'object',
    properties: {
        cancelOnlyOnAsaas: {
            type: 'boolean',
            description: 'Cancel invoice only on Asaas',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiCustomerInvoiceGetResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'invoice',
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique invoice identifier in Asaas',
            example: 'inv_000000000232',
            deprecated: false
        },
        status: {
            '$ref': '#/components/schemas/ApiCustomerInvoiceGetResponseInvoiceStatus'
        },
        customer: {
            type: 'string',
            description: 'Unique customer identifier',
            example: 'cus_000000002750',
            deprecated: false
        },
        payment: {
            type: 'string',
            description: 'Unique payment identifier in Asaas',
            example: 'pay_145059895800',
            deprecated: false
        },
        installment: {
            type: 'string',
            description: 'Unique installment identifier in Asaas',
            deprecated: false,
            example: null
        },
        type: {
            type: 'string',
            description: 'Invoice type',
            example: 'NFS-e',
            deprecated: false,
            enum: ['NFS-e']
        },
        statusDescription: {
            type: 'string',
            description: 'Description of the current status of the invoice',
            deprecated: false,
            example: null
        },
        serviceDescription: {
            type: 'string',
            description: 'Description of invoice services',
            example: `Invoice 101940.
Description of Services: SYSTEMS ANALYSIS AND DEVELOPMENT`,
            deprecated: false
        },
        pdfUrl: {
            type: 'string',
            description: 'Link to pdf file of the invoice issued',
            deprecated: false,
            example: null
        },
        xmlUrl: {
            type: 'string',
            description: 'Link to xml file of the issued invoice',
            deprecated: false,
            example: null
        },
        rpsSerie: {
            type: 'string',
            description: 'Invoice series',
            deprecated: false,
            example: null
        },
        rpsNumber: {
            type: 'string',
            description: 'RPS converted to invoice',
            deprecated: false,
            example: null
        },
        number: {
            type: 'string',
            description: 'Invoice number',
            deprecated: false,
            example: null
        },
        validationCode: {
            type: 'string',
            description: 'Verification code',
            deprecated: false,
            example: null
        },
        value: {
            type: 'number',
            description: 'Total value',
            example: 300,
            deprecated: false
        },
        deductions: {
            type: 'number',
            description: 'Deductions. Deductions do not change the total value of the invoice, but they do change the ISS calculation basis.',
            example: 10,
            deprecated: false
        },
        effectiveDate: {
            type: 'string',
            description: 'Invoice issuance date',
            format: 'date',
            example: '2024-08-15',
            deprecated: false
        },
        observations: {
            type: 'string',
            description: 'Additional observations',
            example: 'Monthly for June work.',
            deprecated: false
        },
        estimatedTaxesDescription: {
            type: 'string',
            description: 'Estimated tax invoice',
            deprecated: false,
            example: null
        },
        externalReference: {
            type: 'string',
            description: 'Invoice identifier in your system',
            deprecated: false,
            example: null
        },
        taxes: {
            '$ref': '#/components/schemas/ApiCustomerInvoiceTaxesDTO'
        },
        municipalServiceId: {
            type: 'string',
            description: 'Unique municipal service identifier',
            deprecated: false,
            example: null
        },
        municipalServiceCode: {
            type: 'string',
            description: 'Municipal Service Code',
            example: '1.01',
            deprecated: false
        },
        municipalServiceName: {
            type: 'string',
            description: 'Name of municipal service',
            example: 'Systems analysis and development',
            deprecated: false
        }
    }
} as const;

export const ApiCustomerInvoiceGetResponseInvoiceStatusSchema = {
    type: 'string',
    description: 'Invoice status',
    example: 'SCHEDULED',
    deprecated: false,
    enum: ['SCHEDULED', 'AUTHORIZED', 'PROCESSING_CANCELLATION', 'CANCELED', 'CANCELLATION_DENIED', 'ERROR']
} as const;

export const ApiCustomerInvoiceTaxesDTOSchema = {
    required: ['retainIss', 'cofins', 'csll', 'inss', 'ir', 'pis', 'iss'],
    type: 'object',
    properties: {
        retainIss: {
            required: ['retainIss'],
            type: 'boolean',
            description: 'The invoice holder must withhold ISS or not',
            example: true,
            deprecated: false
        },
        cofins: {
            required: ['cofins'],
            type: 'number',
            description: 'COFINS rate',
            example: 1,
            deprecated: false
        },
        csll: {
            required: ['csll'],
            type: 'number',
            description: 'CSLL rate',
            example: 1,
            deprecated: false
        },
        inss: {
            required: ['inss'],
            type: 'number',
            description: 'INSS rate',
            example: 1,
            deprecated: false
        },
        ir: {
            required: ['ir'],
            type: 'number',
            description: 'IR rate',
            example: 1,
            deprecated: false
        },
        pis: {
            required: ['pis'],
            type: 'number',
            description: 'PIS rate',
            example: 1,
            deprecated: false
        },
        iss: {
            required: ['iss'],
            type: 'number',
            description: 'ISS rate',
            example: 1,
            deprecated: false
        }
    },
    description: 'Invoice taxes',
    deprecated: false
} as const;

export const ApiCustomerInvoiceSaveRequestDTOSchema = {
    required: ['serviceDescription', 'observations', 'value', 'deductions', 'effectiveDate', 'municipalServiceName'],
    type: 'object',
    properties: {
        payment: {
            type: 'string',
            description: 'Unique payment identifier in Asaas',
            example: 'pay_637959110194',
            deprecated: false
        },
        installment: {
            type: 'string',
            description: 'Unique installment identifier in Asaas',
            deprecated: false,
            example: null
        },
        customer: {
            type: 'string',
            description: 'Unique customer identifier',
            example: 'cus_000000002750',
            deprecated: false
        },
        serviceDescription: {
            required: ['serviceDescription'],
            type: 'string',
            description: 'Description of invoice services',
            deprecated: false,
            example: null
        },
        observations: {
            required: ['observations'],
            type: 'string',
            description: 'Additional observations',
            example: 'Monthly for June work.',
            deprecated: false
        },
        externalReference: {
            type: 'string',
            description: 'Invoice identifier in your system',
            deprecated: false,
            example: null
        },
        value: {
            required: ['value'],
            type: 'number',
            description: 'Total value',
            example: 300,
            deprecated: false
        },
        deductions: {
            required: ['deductions'],
            type: 'number',
            description: 'Deductions. Deductions do not change the total value of the invoice, but they do change the ISS calculation basis.',
            example: 10,
            deprecated: false
        },
        effectiveDate: {
            required: ['effectiveDate'],
            type: 'string',
            description: 'Invoice issuance date',
            format: 'date',
            example: '2024-08-20',
            deprecated: false
        },
        municipalServiceId: {
            type: 'string',
            description: 'Unique municipal service identifier',
            deprecated: false,
            example: null
        },
        municipalServiceCode: {
            type: 'string',
            description: 'Municipal Service Code',
            example: '1.01',
            deprecated: false
        },
        municipalServiceName: {
            required: ['municipalServiceName'],
            type: 'string',
            description: 'Name of the municipal service. If not provided, the municipalServiceCode attribute will be used as the name for identification.',
            example: 'Systems analysis and development',
            deprecated: false
        },
        updatePayment: {
            type: 'boolean',
            description: 'Update the Payment amount with the invoice taxes already deducted.',
            deprecated: false,
            example: null
        },
        taxes: {
            '$ref': '#/components/schemas/ApiCustomerInvoiceTaxesDTO'
        }
    }
} as const;

export const ApiCustomerInvoiceUpdateRequestDTOSchema = {
    type: 'object',
    properties: {
        serviceDescription: {
            type: 'string',
            description: 'Description of invoice services',
            deprecated: false,
            example: null
        },
        observations: {
            type: 'string',
            description: 'Additional observations',
            example: 'Monthly for June work.',
            deprecated: false
        },
        externalReference: {
            type: 'string',
            description: 'Invoice identifier in your system',
            deprecated: false,
            example: null
        },
        value: {
            type: 'number',
            description: 'Total value',
            example: 300,
            deprecated: false
        },
        deductions: {
            type: 'number',
            description: 'Deductions. Deductions do not change the total value of the invoice, but they do change the ISS calculation basis.',
            example: 10,
            deprecated: false
        },
        effectiveDate: {
            type: 'string',
            description: 'Invoice issuance date',
            format: 'date',
            example: '2024-08-20',
            deprecated: false
        },
        updatePayment: {
            type: 'boolean',
            description: 'Update the Payment amount with the invoice taxes already deducted.',
            deprecated: false,
            example: null
        },
        taxes: {
            '$ref': '#/components/schemas/ApiCustomerInvoiceTaxesDTO'
        }
    }
} as const;

export const ApiCustomerInvoiceListResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiCustomerInvoiceGetResponseDTO'
            }
        }
    }
} as const;

export const ApiCustomerInvoiceListRequestInvoiceStatusSchema = {
    type: 'string',
    description: 'Filter by situation',
    example: 'SCHEDULED',
    deprecated: false,
    enum: ['SCHEDULED', 'AUTHORIZED', 'PROCESSING_CANCELLATION', 'CANCELED', 'CANCELLATION_DENIED', 'ERROR']
} as const;

export const ApiCustomerInvoicePathIdRequestDTOSchema = {
    type: 'object',
    properties: {}
} as const;

export const ApiCustomerUpdateRequestGetResponseDTOSchema = {
    type: 'object',
    properties: {
        status: {
            '$ref': '#/components/schemas/ApiCustomerUpdateRequestGetResponseStatus'
        },
        personType: {
            '$ref': '#/components/schemas/ApiCustomerUpdateRequestGetResponsePersonType'
        },
        cpfCnpj: {
            type: 'string',
            description: 'CPF or CNPJ of the account owner',
            example: '66625514000140',
            deprecated: false
        },
        name: {
            type: 'string',
            description: 'Account owner name',
            example: 'John Doe',
            deprecated: false
        },
        birthDate: {
            type: 'string',
            description: 'Birthday (Required if the information is from an individual)',
            format: 'date',
            example: '1995-04-12',
            deprecated: false
        },
        companyName: {
            type: 'string',
            description: 'Company Name',
            deprecated: false,
            example: null
        },
        companyType: {
            '$ref': '#/components/schemas/ApiCustomerUpdateRequestGetResponseCompanyType'
        },
        incomeValue: {
            type: 'number',
            description: 'Billing/Monthly income',
            example: 250000,
            deprecated: false
        },
        email: {
            type: 'string',
            description: "Account's email",
            example: 'john.doe@asaas.com.br',
            deprecated: false
        },
        phone: {
            type: 'string',
            description: 'Telephone',
            deprecated: false,
            example: null
        },
        mobilePhone: {
            type: 'string',
            description: 'Cell phone',
            deprecated: false,
            example: null
        },
        postalCode: {
            type: 'string',
            description: 'Address zip code',
            example: '89223005',
            deprecated: false
        },
        address: {
            type: 'string',
            description: 'Public place',
            example: 'Av. Rolf Wiest',
            deprecated: false
        },
        addressNumber: {
            type: 'string',
            description: 'Address number',
            example: '659',
            deprecated: false
        },
        complement: {
            type: 'string',
            description: 'Address complement',
            deprecated: false,
            example: null
        },
        province: {
            type: 'string',
            description: 'Neighborhood',
            example: 'Bom retiro',
            deprecated: false
        },
        city: {
            '$ref': '#/components/schemas/ApiCustomerUpdateRequestCityDTO'
        },
        denialReason: {
            type: 'string',
            description: 'Reason why it is necessary to resend the information',
            deprecated: false,
            example: null
        },
        tradingName: {
            type: 'string',
            description: 'Display name (auto-populated)',
            deprecated: false,
            example: null
        },
        site: {
            type: 'string',
            description: 'Web site',
            deprecated: false,
            example: null
        },
        commercialInfoExpiration: {
            '$ref': '#/components/schemas/ApiCustomerUpdateRequestCommercialInfoExpirationResponseDTO'
        }
    }
} as const;

export const ApiCustomerUpdateRequestGetResponseStatusSchema = {
    type: 'string',
    description: 'Account status',
    example: 'APPROVED',
    deprecated: false,
    enum: ['APPROVED', 'AWAITING_ACTION_AUTHORIZATION', 'DENIED', 'PENDING']
} as const;

export const ApiCustomerUpdateRequestGetResponsePersonTypeSchema = {
    type: 'string',
    description: 'Person Type',
    example: 'JURIDICA',
    deprecated: false,
    enum: ['JURIDICA', 'FISICA']
} as const;

export const ApiCustomerUpdateRequestGetResponseCompanyTypeSchema = {
    type: 'string',
    description: 'Type of company (only when Legal Entity)',
    example: 'MEI',
    deprecated: false,
    enum: ['MEI', 'LIMITED', 'INDIVIDUAL', 'ASSOCIATION']
} as const;

export const ApiCustomerUpdateRequestCityDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'city',
            deprecated: false
        },
        id: {
            type: 'integer',
            description: 'Unique city identifier in Asaas',
            format: 'int32',
            example: 13660,
            deprecated: false
        },
        ibgeCode: {
            type: 'string',
            description: 'IBGE Code',
            example: '4209102',
            deprecated: false
        },
        name: {
            type: 'string',
            description: "City's name",
            example: 'Joinville',
            deprecated: false
        },
        districtCode: {
            type: 'string',
            description: 'District code',
            example: '05',
            deprecated: false
        },
        district: {
            type: 'string',
            description: 'District name',
            example: 'Joinville',
            deprecated: false
        },
        state: {
            '$ref': '#/components/schemas/ApiCustomerUpdateRequestCityState'
        }
    },
    description: 'City information registered in your account',
    deprecated: false
} as const;

export const ApiCustomerUpdateRequestCityStateSchema = {
    type: 'string',
    description: 'State abbreviation (SP, RJ, SC, ...)',
    example: 'SC',
    deprecated: false,
    enum: ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RR', 'RO', 'RJ', 'RN', 'RS', 'SC', 'SP', 'SE', 'TO']
} as const;

export const ApiCustomerUpdateRequestSaveRequestDTOSchema = {
    type: 'object',
    properties: {
        personType: {
            '$ref': '#/components/schemas/ApiCustomerUpdateRequestSaveRequestPersonType'
        },
        cpfCnpj: {
            type: 'string',
            description: 'CPF or CNPJ of the account owner',
            example: '66625514000140',
            deprecated: false
        },
        birthDate: {
            type: 'string',
            description: 'Birthday (Required if the information is from an individual)',
            format: 'date',
            example: '1995-04-12',
            deprecated: false
        },
        companyType: {
            '$ref': '#/components/schemas/ApiCustomerUpdateRequestSaveRequestCompanyType'
        },
        incomeValue: {
            type: 'number',
            description: 'Billing/Monthly income',
            example: 25000,
            deprecated: false
        },
        email: {
            type: 'string',
            description: "Account's email",
            example: 'john.doe@asaas.com.br',
            deprecated: false
        },
        phone: {
            type: 'string',
            description: 'Telephone',
            deprecated: false,
            example: null
        },
        mobilePhone: {
            type: 'string',
            description: 'Cell phone',
            deprecated: false,
            example: null
        },
        site: {
            type: 'string',
            description: 'Web site',
            deprecated: false,
            example: null
        },
        postalCode: {
            type: 'string',
            description: 'Address zip code',
            example: '89223005',
            deprecated: false
        },
        address: {
            type: 'string',
            description: 'Public place',
            example: 'Av. Rolf Wiest',
            deprecated: false
        },
        addressNumber: {
            type: 'string',
            description: 'Address number',
            example: '659',
            deprecated: false
        },
        complement: {
            type: 'string',
            description: 'Address complement',
            deprecated: false,
            example: null
        },
        province: {
            type: 'string',
            description: 'Neighborhood',
            example: 'Bom Retiro',
            deprecated: false
        }
    }
} as const;

export const ApiCustomerUpdateRequestSaveRequestPersonTypeSchema = {
    type: 'string',
    description: 'Person Type',
    example: 'JURIDICA',
    deprecated: false,
    enum: ['JURIDICA', 'FISICA']
} as const;

export const ApiCustomerUpdateRequestSaveRequestCompanyTypeSchema = {
    type: 'string',
    description: 'Type of company (only when Legal Entity)',
    example: 'MEI',
    deprecated: false,
    enum: ['MEI', 'LIMITED', 'INDIVIDUAL', 'ASSOCIATION']
} as const;

export const ApiFinanceBalanceResponseDTOSchema = {
    type: 'object',
    properties: {
        balance: {
            type: 'number',
            description: 'Account balance',
            example: 5210.96,
            deprecated: false
        }
    }
} as const;

export const ApiFinanceGetPaymentStatisticsResponseDTOSchema = {
    type: 'object',
    properties: {
        quantity: {
            type: 'integer',
            description: 'Number of charges',
            format: 'int32',
            example: 23,
            deprecated: false
        },
        value: {
            type: 'number',
            description: 'Amount',
            example: 9270.4,
            deprecated: false
        },
        netValue: {
            type: 'number',
            description: 'Total net worth',
            example: 9121.54,
            deprecated: false
        }
    }
} as const;

export const ApiFinanceGetPaymentStatisticsRequestBillingTypeSchema = {
    type: 'string',
    description: 'Filter by payment method',
    example: 'BOLETO',
    deprecated: false,
    enum: ['BOLETO', 'CREDIT_CARD', 'TRANSFER', 'DEPOSIT', 'DEBIT_CARD', 'PIX']
} as const;

export const ApiFinanceGetPaymentStatisticsRequestPaymentStatusSchema = {
    type: 'string',
    description: 'Filter by status',
    example: 'CONFIRMED',
    deprecated: false,
    enum: ['PENDING', 'RECEIVED', 'CONFIRMED', 'OVERDUE']
} as const;

export const ApiFinanceGetSplitStatisticsResponseDTOSchema = {
    type: 'object',
    properties: {
        income: {
            type: 'number',
            description: 'Amounts receivable',
            example: 5210.96,
            deprecated: false
        },
        value: {
            type: 'number',
            description: 'Values to be sent',
            example: 9270.4,
            deprecated: false
        }
    }
} as const;

export const ApiFinancialTransactionListResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                type: 'object',
                properties: {
                    object: {
                        type: 'string',
                        description: 'Object type',
                        example: 'financialTransaction',
                        deprecated: false
                    },
                    id: {
                        type: 'string',
                        description: 'Unique transaction identifier in Asaas',
                        example: 'ftn_000015274322',
                        deprecated: false
                    },
                    value: {
                        type: 'number',
                        description: 'Transaction value',
                        example: -5.99,
                        deprecated: false
                    },
                    balance: {
                        type: 'number',
                        description: 'Value in account at the time of the transaction',
                        example: 3772.81,
                        deprecated: false
                    },
                    type: {
                        '$ref': '#/components/schemas/ApiFinancialTransactionGetResponseFinancialTransactionType'
                    },
                    date: {
                        type: 'string',
                        description: 'Transaction date',
                        format: 'date',
                        example: '2017-06-10',
                        deprecated: false
                    },
                    description: {
                        type: 'string',
                        description: 'Transaction description',
                        example: 'Taxa de transferência para conta bancária',
                        deprecated: false
                    },
                    paymentId: {
                        type: 'string',
                        description: 'Payment identifier (If any)',
                        deprecated: false,
                        example: null
                    },
                    splitId: {
                        type: 'string',
                        description: 'Split identifier (If any)',
                        deprecated: false,
                        example: null
                    },
                    transferId: {
                        type: 'string',
                        description: 'Transfer identifier (If any)',
                        example: 'b26df110-498b-40ba-b5c6-1428de4d59c7',
                        deprecated: false
                    },
                    anticipationId: {
                        type: 'string',
                        description: 'Anticipation identifier (If any)',
                        deprecated: false,
                        example: null
                    },
                    billId: {
                        type: 'string',
                        description: 'Bill payment identifier (If any)',
                        deprecated: false,
                        example: null
                    },
                    invoiceId: {
                        type: 'string',
                        description: 'Invoice identifier (If any)',
                        deprecated: false,
                        example: null
                    },
                    paymentDunningId: {
                        type: 'string',
                        description: 'Payment dunning identifier (If any)',
                        deprecated: false,
                        example: null
                    },
                    creditBureauReportId: {
                        type: 'string',
                        description: 'Serasa consultation identifier (If any)',
                        deprecated: false,
                        example: null
                    }
                }
            }
        }
    }
} as const;

export const ApiFinancialTransactionGetResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'financialTransaction',
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique transaction identifier in Asaas',
            example: 'ftn_000015274322',
            deprecated: false
        },
        value: {
            type: 'number',
            description: 'Transaction value',
            example: -5.99,
            deprecated: false
        },
        balance: {
            type: 'number',
            description: 'Value in account at the time of the transaction',
            example: 3772.81,
            deprecated: false
        },
        type: {
            '$ref': '#/components/schemas/ApiFinancialTransactionGetResponseFinancialTransactionType'
        },
        date: {
            type: 'string',
            description: 'Transaction date',
            format: 'date',
            example: '2017-06-10',
            deprecated: false
        },
        description: {
            type: 'string',
            description: 'Transaction description',
            example: 'Taxa de transferência para conta bancária',
            deprecated: false
        },
        paymentId: {
            type: 'string',
            description: 'Payment identifier (If any)',
            deprecated: false,
            example: null
        },
        splitId: {
            type: 'string',
            description: 'Split identifier (If any)',
            deprecated: false,
            example: null
        },
        transferId: {
            type: 'string',
            description: 'Transfer identifier (If any)',
            example: 'b26df110-498b-40ba-b5c6-1428de4d59c7',
            deprecated: false
        },
        anticipationId: {
            type: 'string',
            description: 'Anticipation identifier (If any)',
            deprecated: false,
            example: null
        },
        billId: {
            type: 'string',
            description: 'Bill payment identifier (If any)',
            deprecated: false,
            example: null
        },
        invoiceId: {
            type: 'string',
            description: 'Invoice identifier (If any)',
            deprecated: false,
            example: null
        },
        paymentDunningId: {
            type: 'string',
            description: 'Payment dunning identifier (If any)',
            deprecated: false,
            example: null
        },
        creditBureauReportId: {
            type: 'string',
            description: 'Serasa consultation identifier (If any)',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiFinancialTransactionGetResponseFinancialTransactionTypeSchema = {
    type: 'string',
    description: 'Transaction type',
    example: 'TRANSFER_FEE',
    deprecated: false,
    enum: ['PAYMENT_RECEIVED', 'TRANSFER', 'TRANSFER_FEE', 'TRANSFER_REVERSAL', 'REVERSAL', 'PAYMENT_REVERSAL', 'PAYMENT_REFUND_CANCELLED', 'PAYMENT_FEE', 'PAYMENT_FEE_REVERSAL', 'PAYMENT_CUSTODY_BLOCK', 'PAYMENT_CUSTODY_BLOCK_REVERSAL', 'PHONE_CALL_NOTIFICATION_FEE', 'PROMOTIONAL_CODE_CREDIT', 'DEBIT', 'DEBIT_REVERSAL', 'DEBT_RECOVERY_NEGOTIATION_FINANCIAL_CHARGES', 'RECEIVABLE_ANTICIPATION_GROSS_CREDIT', 'RECEIVABLE_ANTICIPATION_FEE', 'RECEIVABLE_ANTICIPATION_DEBIT', 'RECEIVABLE_ANTICIPATION_PARTNER_SETTLEMENT', 'BILL_PAYMENT', 'BILL_PAYMENT_FEE', 'BILL_PAYMENT_CANCELLED', 'BILL_PAYMENT_FEE_CANCELLED', 'BILL_PAYMENT_REFUNDED', 'POSTAL_SERVICE_FEE', 'INTERNAL_TRANSFER_DEBIT', 'INTERNAL_TRANSFER_CREDIT', 'INTERNAL_TRANSFER_REVERSAL', 'CREDIT', 'PARTIAL_PAYMENT', 'PAYMENT_MESSAGING_NOTIFICATION_FEE', 'PAYMENT_SMS_NOTIFICATION_FEE', 'PAYMENT_DUNNING_REQUEST_FEE', 'PAYMENT_DUNNING_RECEIVED_FEE', 'PAYMENT_DUNNING_RECEIVED_IN_CASH_FEE', 'PAYMENT_DUNNING_CANCELLATION_FEE', 'CUSTOMER_COMMISSION_SETTLEMENT_CREDIT', 'CUSTOMER_COMMISSION_SETTLEMENT_DEBIT', 'PROMOTIONAL_CODE_DEBIT', 'REFUND_REQUEST_FEE', 'REFUND_REQUEST_CANCELLED', 'REFUND_REQUEST_FEE_REVERSAL', 'INVOICE_FEE', 'PRODUCT_INVOICE_FEE', 'CONSUMER_INVOICE_FEE', 'ASAAS_CARD_RECHARGE', 'ASAAS_CARD_RECHARGE_REVERSAL', 'ASAAS_CARD_BALANCE_REFUND', 'CHARGEBACK', 'CHARGEBACK_REVERSAL', 'ASAAS_CARD_BILL_PAYMENT', 'ASAAS_CARD_BILL_PAYMENT_REFUND', 'ASAAS_CARD_TRANSACTION', 'ASAAS_CARD_CASHBACK', 'ASAAS_CARD_CREDIT_VOUCHER', 'ASAAS_CARD_CREDIT_VOUCHER_REFUND', 'ASAAS_CARD_TRANSACTION_FEE', 'ASAAS_CARD_TRANSACTION_WITHDRAWAL_FEE', 'ASAAS_CARD_TRANSACTION_IOF_FEE', 'ASAAS_CARD_TRANSACTION_REFUND', 'ASAAS_CARD_TRANSACTION_FEE_REFUND', 'ASAAS_CARD_TRANSACTION_WITHDRAWAL_FEE_REFUND', 'ASAAS_CARD_TRANSACTION_PARTIAL_REFUND', 'ASAAS_CARD_TRANSACTION_REFUND_CANCELLATION', 'ASAAS_CARD_TRANSACTION_PARTIAL_REFUND_CANCELLATION', 'ASAAS_MONEY_PAYMENT_COMPROMISED_BALANCE', 'ASAAS_MONEY_PAYMENT_COMPROMISED_BALANCE_REFUND', 'ASAAS_MONEY_PAYMENT_ANTICIPATION_FEE', 'ASAAS_MONEY_PAYMENT_ANTICIPATION_FEE_REFUND', 'ASAAS_MONEY_PAYMENT_FINANCING_FEE', 'ASAAS_MONEY_PAYMENT_FINANCING_FEE_REFUND', 'ASAAS_MONEY_TRANSACTION_CASHBACK', 'ASAAS_MONEY_TRANSACTION_CASHBACK_REFUND', 'ASAAS_MONEY_TRANSACTION_CHARGEBACK', 'ASAAS_MONEY_TRANSACTION_CHARGEBACK_REVERSAL', 'CHARGED_FEE_REFUND', 'PIX_TRANSACTION_DEBIT', 'PIX_TRANSACTION_DEBIT_REFUND', 'PIX_TRANSACTION_CREDIT', 'PIX_TRANSACTION_CREDIT_FEE', 'PIX_TRANSACTION_CREDIT_REFUND', 'PIX_TRANSACTION_CREDIT_REFUND_CANCELLATION', 'PIX_TRANSACTION_DEBIT_FEE', 'CREDIT_BUREAU_REPORT', 'CONTRACTUAL_EFFECT_SETTLEMENT', 'CONTRACTUAL_EFFECT_SETTLEMENT_REVERSAL', 'FREE_PAYMENT_USE', 'MOBILE_PHONE_RECHARGE', 'REFUND_MOBILE_PHONE_RECHARGE', 'CANCEL_MOBILE_PHONE_RECHARGE', 'BACEN_JUDICIAL_LOCK', 'BACEN_JUDICIAL_UNLOCK', 'BACEN_JUDICIAL_TRANSFER', 'INSTANT_TEXT_MESSAGE_FEE', 'ASAAS_DEBIT_CARD_REQUEST_FEE', 'ASAAS_PREPAID_CARD_REQUEST_FEE', 'EXTERNAL_SETTLEMENT_CONTRACTUAL_EFFECT_BATCH_CREDIT', 'EXTERNAL_SETTLEMENT_CONTRACTUAL_EFFECT_BATCH_REVERSAL', 'CHILD_ACCOUNT_KNOWN_YOUR_CUSTOMER_BATCH_FEE', 'CONTRACTED_CUSTOMER_PLAN_FEE', 'ACCOUNT_INACTIVITY_FEE', 'PAYMENT_ORIGIN_CHANNEL_FEE', 'PAYMENT_SPLIT_DIVERGENCE_BLOCK', 'PAYMENT_SPLIT_DIVERGENCE_BLOCK_REVERSAL', 'CUSTOMER_ACCOUNT_PAYMENT_BONUS_FEE', 'RECEIVABLE_ANTICIPATION_PAYMENT_FEE', 'ASAAS_MONEY_DONATION_DEBIT', 'ASAAS_MONEY_DONATION_DEBIT_REFUND', 'ASAAS_MONEY_PAYMENT_DEBIT', 'ASAAS_MONEY_PAYMENT_DEBIT_REFUND', 'CUSTOMER_COMMISSION_CHECKOUT', 'RECEIVABLE_ANTICIPATION_CREDIT']
} as const;

export const ApiInstallmentPaymentBookResponseDTOSchema = {
    type: 'object',
    properties: {}
} as const;

export const ApiInstallmentGetResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'installment',
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique installment identifier in Asaas',
            example: '2765d086-c7c5-5cca-898a-4262d212587c',
            deprecated: false
        },
        value: {
            type: 'number',
            description: 'Installment amount',
            example: 360,
            deprecated: false
        },
        netValue: {
            type: 'number',
            description: 'Net installment amount',
            example: 312.12,
            deprecated: false
        },
        paymentValue: {
            type: 'number',
            description: 'Value of each installment',
            example: 30,
            deprecated: false
        },
        installmentCount: {
            type: 'integer',
            description: 'Number of installments',
            format: 'int32',
            example: 12,
            deprecated: false
        },
        billingType: {
            '$ref': '#/components/schemas/ApiInstallmentGetResponseBillingType'
        },
        paymentDate: {
            type: 'string',
            description: 'Bill settlement date on Asaas',
            format: 'date',
            deprecated: false,
            example: null
        },
        description: {
            type: 'string',
            description: 'Description of the installment',
            example: 'Order 056984',
            deprecated: false
        },
        expirationDay: {
            type: 'integer',
            description: 'Due date of each installment',
            format: 'int32',
            example: 31,
            deprecated: false
        },
        dateCreated: {
            type: 'string',
            description: 'Installment creation date',
            format: 'date',
            example: '2021-01-19',
            deprecated: false
        },
        customer: {
            type: 'string',
            description: 'Unique identifier of the customer to whom the installment belongs',
            example: 'cus_000000001645',
            deprecated: false
        },
        paymentLink: {
            type: 'string',
            description: 'Unique identifier of the payment link to which the installment belongs',
            example: '997152082166122',
            deprecated: false
        },
        transactionReceiptUrl: {
            type: 'string',
            description: 'URL of proof of confirmation, receipt, reversal or removal.',
            deprecated: false,
            example: null
        },
        chargeback: {
            '$ref': '#/components/schemas/ApiPaymentChargebackResponseDTO'
        },
        creditCard: {
            '$ref': '#/components/schemas/ApiPaymentSaveWithCreditCardCreditCardDTO'
        },
        deleted: {
            type: 'boolean',
            description: 'Indicates whether the installment has been removed',
            example: false,
            deprecated: false
        }
    }
} as const;

export const ApiInstallmentGetResponseBillingTypeSchema = {
    type: 'string',
    description: 'Form of payment',
    example: 'CREDIT_CARD',
    deprecated: false,
    enum: ['UNDEFINED', 'BOLETO', 'CREDIT_CARD', 'DEBIT_CARD', 'TRANSFER', 'DEPOSIT', 'PIX']
} as const;

export const ApiPaymentSaveWithCreditCardCreditCardDTOSchema = {
    type: 'object',
    properties: {
        creditCardNumber: {
            type: 'string',
            description: 'Last 4 digits of the card used',
            example: '8829',
            deprecated: false
        },
        creditCardBrand: {
            '$ref': '#/components/schemas/ApiPaymentSaveWithCreditCardCreditCardCreditCardBrand'
        },
        creditCardToken: {
            type: 'string',
            description: 'Credit card token if tokenization is active.',
            deprecated: false,
            example: null
        }
    },
    description: 'Credit card information',
    deprecated: false
} as const;

export const ApiPaymentSaveWithCreditCardCreditCardCreditCardBrandSchema = {
    type: 'string',
    description: 'Flag of the card used',
    example: 'VISA',
    deprecated: false,
    enum: ['VISA', 'MASTERCARD', 'ELO', 'DINERS', 'DISCOVER', 'AMEX', 'HIPERCARD', 'CABAL', 'BANESCARD', 'CREDZ', 'SOROCRED', 'CREDSYSTEM', 'JCB', 'UNKNOWN']
} as const;

export const ApiInstallmentSaveRequestDTOSchema = {
    required: ['installmentCount', 'customer', 'value', 'billingType', 'dueDate'],
    type: 'object',
    properties: {
        installmentCount: {
            required: ['installmentCount'],
            type: 'integer',
            description: 'Number of installments',
            format: 'int32',
            example: 3,
            deprecated: false
        },
        customer: {
            required: ['customer'],
            type: 'string',
            description: 'Unique customer identifier in Asaas',
            example: 'cus_G7Dvo4iphUNk',
            deprecated: false
        },
        value: {
            required: ['value'],
            type: 'number',
            description: 'Value of each installment',
            example: 100,
            deprecated: false
        },
        totalValue: {
            type: 'number',
            description: 'Total installment amount',
            example: 150,
            deprecated: false
        },
        billingType: {
            '$ref': '#/components/schemas/ApiInstallmentSaveRequestBillingType'
        },
        dueDate: {
            required: ['dueDate'],
            type: 'string',
            description: 'Due date of the first installment',
            format: 'date',
            example: '2025-07-08',
            deprecated: false
        },
        description: {
            type: 'string',
            description: 'Installment description (max. 500 characters)',
            example: 'Installment 08652',
            deprecated: false
        },
        postalService: {
            type: 'boolean',
            description: 'Define whether the payment will be sent via post',
            example: false,
            deprecated: false
        },
        daysAfterDueDateToRegistrationCancellation: {
            type: 'integer',
            description: 'Days after registration cancellation deadline (only for bank slip)',
            format: 'int32',
            example: 1,
            deprecated: false
        },
        paymentExternalReference: {
            type: 'string',
            description: 'Free search field',
            example: '056984',
            deprecated: false
        },
        discount: {
            '$ref': '#/components/schemas/ApiPaymentDiscountDTO'
        },
        interest: {
            '$ref': '#/components/schemas/ApiPaymentInterestRequestDTO'
        },
        fine: {
            '$ref': '#/components/schemas/ApiPaymentFineRequestDTO'
        },
        splits: {
            type: 'array',
            description: 'Split Settings',
            deprecated: false,
            items: {
                required: ['walletId'],
                type: 'object',
                properties: {
                    walletId: {
                        required: ['walletId'],
                        type: 'string',
                        description: 'Asaas wallet identifier that will be transferred',
                        deprecated: false,
                        example: null
                    },
                    fixedValue: {
                        type: 'number',
                        description: 'Fixed amount to be transferred to the account when the payment is received',
                        deprecated: false,
                        example: null
                    },
                    percentualValue: {
                        type: 'number',
                        description: 'Percentage of the net value of the charge to be transferred when received',
                        deprecated: false,
                        example: null
                    },
                    totalFixedValue: {
                        type: 'number',
                        description: '(Instalments only). Amount that will be split relative to the total amount that will be paid in installments.',
                        deprecated: false,
                        example: null
                    },
                    externalReference: {
                        type: 'string',
                        description: 'Split identifier in your system',
                        deprecated: false,
                        example: null
                    },
                    description: {
                        type: 'string',
                        description: 'Split description',
                        deprecated: false,
                        example: null
                    },
                    installmentNumber: {
                        type: 'integer',
                        description: "Installment number to which the split will be linked. Cannot be provided along with the 'totalFixedValue' field",
                        format: 'int32',
                        deprecated: false,
                        example: null
                    }
                }
            }
        }
    }
} as const;

export const ApiInstallmentSaveRequestBillingTypeSchema = {
    required: ['billingType'],
    type: 'string',
    description: 'Payment billing type',
    example: 'BOLETO',
    deprecated: false,
    enum: ['UNDEFINED', 'BOLETO', 'CREDIT_CARD', 'PIX']
} as const;

export const ApiPaymentDiscountDTOSchema = {
    type: 'object',
    properties: {
        value: {
            type: 'number',
            description: 'Percentage or fixed amount of discount to be applied to the Payment amount',
            example: 10,
            deprecated: false
        },
        dueDateLimitDays: {
            type: 'integer',
            description: 'Days before expiration to apply discount. Ex: 0 = until expiration, 1 = up to one day before, 2 = up to 2 days before, and so on',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        type: {
            '$ref': '#/components/schemas/ApiPaymentDiscountDiscountType'
        }
    },
    description: 'Discount information',
    deprecated: false
} as const;

export const ApiPaymentDiscountDiscountTypeSchema = {
    type: 'string',
    description: 'Discount type',
    example: 'PERCENTAGE',
    deprecated: false,
    enum: ['FIXED', 'PERCENTAGE']
} as const;

export const ApiPaymentInterestRequestDTOSchema = {
    type: 'object',
    properties: {
        value: {
            type: 'number',
            description: 'Percentage of interest per month on the amount charged for payment after maturity',
            deprecated: false,
            example: null
        }
    },
    description: 'Interest information for payment after due date',
    deprecated: false
} as const;

export const ApiPaymentFineRequestDTOSchema = {
    type: 'object',
    properties: {
        value: {
            type: 'number',
            description: 'Percentage of fine on the amount of the charge for payment after the due date',
            deprecated: false,
            example: null
        },
        type: {
            '$ref': '#/components/schemas/ApiPaymentFineRequestFineType'
        }
    },
    description: 'Fine information for payment after due date',
    deprecated: false
} as const;

export const ApiPaymentFineRequestFineTypeSchema = {
    type: 'string',
    description: 'Fine type',
    example: 'FIXED',
    deprecated: false,
    enum: ['FIXED', 'PERCENTAGE']
} as const;

export const ApiInstallmentSplitRequestDTOSchema = {
    required: ['walletId'],
    type: 'object',
    properties: {
        walletId: {
            required: ['walletId'],
            type: 'string',
            description: 'Asaas wallet identifier that will be transferred',
            deprecated: false,
            example: null
        },
        fixedValue: {
            type: 'number',
            description: 'Fixed amount to be transferred to the account when the payment is received',
            deprecated: false,
            example: null
        },
        percentualValue: {
            type: 'number',
            description: 'Percentage of the net value of the charge to be transferred when received',
            deprecated: false,
            example: null
        },
        totalFixedValue: {
            type: 'number',
            description: '(Instalments only). Amount that will be split relative to the total amount that will be paid in installments.',
            deprecated: false,
            example: null
        },
        externalReference: {
            type: 'string',
            description: 'Split identifier in your system',
            deprecated: false,
            example: null
        },
        description: {
            type: 'string',
            description: 'Split description',
            deprecated: false,
            example: null
        },
        installmentNumber: {
            type: 'integer',
            description: "Installment number to which the split will be linked. Cannot be provided along with the 'totalFixedValue' field",
            format: 'int32',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiInstallmentUpdateSplitRequestDTOSchema = {
    type: 'object',
    properties: {
        splits: {
            type: 'array',
            description: 'Split data to update',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiInstallmentSplitRequestDTO'
            }
        }
    }
} as const;

export const ApiInstallmentUpdateSplitResponseDTOSchema = {
    type: 'object',
    properties: {
        splits: {
            type: 'array',
            description: 'Split array',
            deprecated: false,
            items: {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        description: 'Unique split identifier in Asaas',
                        example: 'fd41396a-7453-47d0-9411-c8543522591d',
                        deprecated: false
                    },
                    walletId: {
                        type: 'string',
                        description: 'Asaas wallet identifier that will be transferred',
                        example: '7bafd95a-e783-4a62-9be1-23999af742c6',
                        deprecated: false
                    },
                    fixedValue: {
                        type: 'number',
                        description: 'Fixed amount to be transferred to the account when the charge is received',
                        example: 20.32,
                        deprecated: false
                    },
                    percentualValue: {
                        type: 'number',
                        description: 'Percentage of the net value of the charge to be transferred when received',
                        deprecated: false,
                        example: null
                    },
                    totalValue: {
                        type: 'number',
                        description: 'Amount that will be split relative to the total amount that will be paid',
                        example: 20.32,
                        deprecated: false
                    },
                    cancellationReason: {
                        '$ref': '#/components/schemas/ApiInstallmentSplitGetResponsePaymentSplitCancellationReason'
                    },
                    status: {
                        '$ref': '#/components/schemas/ApiInstallmentSplitGetResponsePaymentSplitStatus'
                    },
                    externalReference: {
                        type: 'string',
                        description: 'Unique identifier of split in your system',
                        deprecated: false,
                        example: null
                    },
                    description: {
                        type: 'string',
                        description: 'Split description',
                        deprecated: false,
                        example: null
                    },
                    installmentNumber: {
                        type: 'integer',
                        description: 'Installment to which the split is linked',
                        format: 'int32',
                        deprecated: false,
                        example: null
                    }
                }
            }
        }
    }
} as const;

export const ApiInstallmentSplitGetResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique split identifier in Asaas',
            example: 'fd41396a-7453-47d0-9411-c8543522591d',
            deprecated: false
        },
        walletId: {
            type: 'string',
            description: 'Asaas wallet identifier that will be transferred',
            example: '7bafd95a-e783-4a62-9be1-23999af742c6',
            deprecated: false
        },
        fixedValue: {
            type: 'number',
            description: 'Fixed amount to be transferred to the account when the charge is received',
            example: 20.32,
            deprecated: false
        },
        percentualValue: {
            type: 'number',
            description: 'Percentage of the net value of the charge to be transferred when received',
            deprecated: false,
            example: null
        },
        totalValue: {
            type: 'number',
            description: 'Amount that will be split relative to the total amount that will be paid',
            example: 20.32,
            deprecated: false
        },
        cancellationReason: {
            '$ref': '#/components/schemas/ApiInstallmentSplitGetResponsePaymentSplitCancellationReason'
        },
        status: {
            '$ref': '#/components/schemas/ApiInstallmentSplitGetResponsePaymentSplitStatus'
        },
        externalReference: {
            type: 'string',
            description: 'Unique identifier of split in your system',
            deprecated: false,
            example: null
        },
        description: {
            type: 'string',
            description: 'Split description',
            deprecated: false,
            example: null
        },
        installmentNumber: {
            type: 'integer',
            description: 'Installment to which the split is linked',
            format: 'int32',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiInstallmentSplitGetResponsePaymentSplitCancellationReasonSchema = {
    type: 'string',
    description: 'Reason for canceling the split',
    example: 'PAYMENT_DELETED',
    deprecated: false,
    enum: ['PAYMENT_DELETED', 'PAYMENT_OVERDUE', 'PAYMENT_RECEIVED_IN_CASH', 'PAYMENT_REFUNDED', 'VALUE_DIVERGENCE_BLOCK', 'WALLET_UNABLE_TO_RECEIVE']
} as const;

export const ApiInstallmentSplitGetResponsePaymentSplitStatusSchema = {
    type: 'string',
    description: 'Split status',
    example: 'PENDING',
    deprecated: false,
    enum: ['PENDING', 'AWAITING_CREDIT', 'CANCELLED', 'DONE', 'REFUNDED', 'BLOCKED_BY_VALUE_DIVERGENCE']
} as const;

export const ApiInstallmentListResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiInstallmentGetResponseDTO'
            }
        }
    }
} as const;

export const ApiInstallmentDeleteResponseDTOSchema = {
    type: 'object',
    properties: {
        deleted: {
            type: 'boolean',
            description: 'Indicates whether the installment plan is removed',
            example: true,
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique installment identifier in Asaas',
            example: 'a2c890b-dd63-4b5a-9169-96c8d7828f4c',
            deprecated: false
        }
    }
} as const;

export const ApiInstallmentRefundRequestDTOSchema = {
    type: 'object',
    properties: {}
} as const;

export const ApiMobilePhoneRechargeGetRequestDTOSchema = {
    required: ['id'],
    type: 'object',
    properties: {}
} as const;

export const ApiMobilePhoneRechargeGetResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier for cell phone recharge on Asaas',
            example: '37c22147-4194-11ec-8061-0242ac120002',
            deprecated: false
        },
        value: {
            type: 'number',
            description: 'Recharge value',
            example: 15,
            deprecated: false
        },
        phoneNumber: {
            type: 'string',
            description: 'Cell phone number that was requested to be recharged',
            example: '63997365512',
            deprecated: false
        },
        status: {
            '$ref': '#/components/schemas/ApiMobilePhoneRechargeGetResponseMobilePhoneRechargeStatus'
        },
        canBeCancelled: {
            type: 'boolean',
            description: 'Whether the top-up can be canceled',
            deprecated: false,
            default: true,
            example: null
        },
        operatorName: {
            type: 'string',
            description: 'Name of cell phone operator',
            example: 'Vivo',
            deprecated: false
        }
    }
} as const;

export const ApiMobilePhoneRechargeGetResponseMobilePhoneRechargeStatusSchema = {
    type: 'string',
    description: 'Recharge status',
    example: 'PENDING',
    deprecated: false,
    enum: ['PENDING', 'CONFIRMED', 'CANCELLED', 'REFUNDED', 'WAITING_CRITICAL_ACTION']
} as const;

export const ApiMobilePhoneRechargeFindProviderResponseDTOSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'Name of cell phone operator',
            example: 'Vivo',
            deprecated: false
        },
        values: {
            type: 'array',
            description: 'Amounts available for recharge',
            example: [
                {
                    name: 'R$ 12,00',
                    bonus: '5.0',
                    minValue: 1,
                    maxValue: 5
                },
                {
                    name: 'R$ 30,00',
                    bonus: '3.0',
                    minValue: 20,
                    maxValue: 50
                }
            ],
            deprecated: false,
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        description: 'Package name',
                        example: 'R$ 12,00',
                        deprecated: false
                    },
                    description: {
                        type: 'string',
                        description: 'Package Description',
                        deprecated: false,
                        example: null
                    },
                    bonus: {
                        type: 'string',
                        description: 'Package Bonuses',
                        example: '0.0',
                        deprecated: false
                    },
                    minValue: {
                        type: 'number',
                        description: 'Minimum top-up amount',
                        example: 12,
                        deprecated: false
                    },
                    maxValue: {
                        type: 'number',
                        description: 'Maximum recharge value',
                        example: 12,
                        deprecated: false
                    }
                }
            }
        }
    }
} as const;

export const ApiMobilePhoneRechargeFindProviderResponseValuesDTOSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'Package name',
            example: 'R$ 12,00',
            deprecated: false
        },
        description: {
            type: 'string',
            description: 'Package Description',
            deprecated: false,
            example: null
        },
        bonus: {
            type: 'string',
            description: 'Package Bonuses',
            example: '0.0',
            deprecated: false
        },
        minValue: {
            type: 'number',
            description: 'Minimum top-up amount',
            example: 12,
            deprecated: false
        },
        maxValue: {
            type: 'number',
            description: 'Maximum recharge value',
            example: 12,
            deprecated: false
        }
    }
} as const;

export const ApiMobilePhoneRechargeSaveRequestDTOSchema = {
    required: ['value', 'phoneNumber'],
    type: 'object',
    properties: {
        value: {
            required: ['value'],
            type: 'number',
            description: 'Recharge value',
            example: 15,
            deprecated: false
        },
        phoneNumber: {
            required: ['phoneNumber'],
            type: 'string',
            description: 'Cellphone number',
            example: '63997365512',
            deprecated: false
        }
    }
} as const;

export const ApiMobilePhoneRechargeListResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiMobilePhoneRechargeGetResponseDTO'
            }
        }
    }
} as const;

export const ApiMyAccountDisableAccountResponseDTOSchema = {
    type: 'object',
    properties: {
        observations: {
            type: 'string',
            description: 'Deletion information',
            example: 'Conta desabilitada com sucesso',
            deprecated: false
        }
    }
} as const;

export const ApiMyAccountGetAccountFeesResponseDTOSchema = {
    type: 'object',
    properties: {
        payment: {
            '$ref': '#/components/schemas/ApiMyAccountGetAccountFeesPaymentDTO'
        },
        transfer: {
            '$ref': '#/components/schemas/ApiMyAccountGetAccountFeesTransferDTO'
        },
        notification: {
            '$ref': '#/components/schemas/ApiMyAccountGetAccountFeesNotificationDTO'
        },
        creditBureauReport: {
            '$ref': '#/components/schemas/ApiMyAccountGetAccountFeesCreditBureauReportDTO'
        },
        invoice: {
            '$ref': '#/components/schemas/ApiMyAccountGetAccountFeesInvoiceDTO'
        },
        anticipation: {
            '$ref': '#/components/schemas/ApiMyAccountGetAccountFeesAnticipationDTO'
        }
    }
} as const;

export const ApiMyAccountGetAccountFeesPaymentDTOSchema = {
    type: 'object',
    properties: {
        bankSlip: {
            '$ref': '#/components/schemas/ApiMyAccountGetAccountFeesPaymentBankSlipDTO'
        },
        creditCard: {
            '$ref': '#/components/schemas/ApiMyAccountGetAccountFeesPaymentCreditCardDTO'
        },
        debitCard: {
            '$ref': '#/components/schemas/ApiMyAccountGetAccountFeesPaymentDebitCardDTO'
        },
        pix: {
            '$ref': '#/components/schemas/ApiMyAccountGetAccountFeesPaymentPixDTO'
        }
    },
    description: 'Billing fees',
    deprecated: false
} as const;

export const ApiMyAccountGetAccountFeesPaymentBankSlipDTOSchema = {
    type: 'object',
    properties: {
        defaultValue: {
            type: 'number',
            description: 'Fee per charge',
            example: 6.96,
            deprecated: false
        },
        discountValue: {
            type: 'number',
            description: 'Promotional fee (If any)',
            example: 3.99,
            deprecated: false
        },
        expirationDate: {
            type: 'string',
            description: 'Promotional fee expiration date (If any)',
            format: 'date-time',
            example: '2019-05-19 00:00:00',
            deprecated: false
        },
        daysToReceive: {
            type: 'integer',
            description: 'Days to receive billing',
            format: 'int32',
            example: 1,
            deprecated: false
        }
    },
    description: 'Boleto fees',
    deprecated: false
} as const;

export const ApiMyAccountGetAccountFeesPaymentCreditCardDTOSchema = {
    type: 'object',
    properties: {
        operationValue: {
            type: 'number',
            description: 'Operating fee per charge',
            example: 0.49,
            deprecated: false
        },
        oneInstallmentPercentage: {
            type: 'number',
            description: 'Spot percentage rate',
            example: 2.99,
            deprecated: false
        },
        upToSixInstallmentsPercentage: {
            type: 'number',
            description: 'Percentage rate for 2 to 6 installments',
            example: 2.99,
            deprecated: false
        },
        upToTwelveInstallmentsPercentage: {
            type: 'number',
            description: 'Percentage rate for 7 to 12 installments',
            example: 2.99,
            deprecated: false
        },
        discountOneInstallmentPercentage: {
            type: 'number',
            description: 'Promotional cash percentage rate (If any)',
            example: 1.99,
            deprecated: false
        },
        discountUpToSixInstallmentsPercentage: {
            type: 'number',
            description: 'Percentage rate for 2 to 6 promotional installments (If any)',
            example: 1.99,
            deprecated: false
        },
        discountUpToTwelveInstallmentsPercentage: {
            type: 'number',
            description: 'Percentage rate for 7 to 12 promotional installments (If any)',
            example: 1.99,
            deprecated: false
        },
        discountExpiration: {
            type: 'string',
            description: 'Promotional fee expiration date (If any)',
            format: 'date-time',
            example: '2019-05-19 00:00:00',
            deprecated: false
        },
        daysToReceive: {
            type: 'integer',
            description: 'Days to receive billing',
            format: 'int32',
            example: 32,
            deprecated: false
        }
    },
    description: 'Credit card fees',
    deprecated: false
} as const;

export const ApiMyAccountGetAccountFeesPaymentDebitCardDTOSchema = {
    type: 'object',
    properties: {
        operationValue: {
            type: 'number',
            description: 'Operating fee per charge',
            example: 0.35,
            deprecated: false
        },
        defaultPercentage: {
            type: 'number',
            description: 'Percentage rate per charge',
            example: 1.89,
            deprecated: false
        },
        daysToReceive: {
            type: 'integer',
            description: 'Days to receive billing',
            format: 'int32',
            example: 3,
            deprecated: false
        }
    },
    description: 'Debit card fees',
    deprecated: false
} as const;

export const ApiMyAccountGetAccountFeesPaymentPixDTOSchema = {
    type: 'object',
    properties: {
        fixedFeeValue: {
            type: 'number',
            description: 'Fixed fee (If any)',
            deprecated: false,
            example: null
        },
        fixedFeeValueWithDiscount: {
            type: 'number',
            description: 'Promotional fixed rate (If any)',
            deprecated: false,
            example: null
        },
        percentageFee: {
            type: 'number',
            description: 'Percentage rate (If any)',
            example: 0.99,
            deprecated: false
        },
        minimumFeeValue: {
            type: 'number',
            description: 'Minimum fixed rate in case of percentage rate',
            example: 0.29,
            deprecated: false
        },
        maximumFeeValue: {
            type: 'number',
            description: 'Maximum fixed rate in case of percentage rate',
            example: 1.99,
            deprecated: false
        },
        discountExpiration: {
            type: 'string',
            description: 'Promotional fee expiration date (If any)',
            format: 'date-time',
            deprecated: false,
            example: null
        },
        monthlyCreditsWithoutFee: {
            type: 'integer',
            description: 'Number of free transactions per month',
            format: 'int32',
            example: 30,
            deprecated: false
        },
        creditsReceivedOfCurrentMonth: {
            type: 'integer',
            description: 'How many transactions have you received this month?',
            format: 'int32',
            example: 10,
            deprecated: false
        }
    },
    description: 'Pix Fees',
    deprecated: false
} as const;

export const ApiMyAccountGetAccountFeesTransferDTOSchema = {
    type: 'object',
    properties: {
        monthlyTransfersWithoutFee: {
            type: 'integer',
            description: 'Number of monthly free transactions',
            format: 'int32',
            example: 30,
            deprecated: false
        },
        ted: {
            '$ref': '#/components/schemas/ApiMyAccountGetAccountFeesTransferTedDTO'
        },
        pix: {
            '$ref': '#/components/schemas/ApiMyAccountGetAccountFeesTransferPixDTO'
        }
    },
    description: 'Transfer fees',
    deprecated: false
} as const;

export const ApiMyAccountGetAccountFeesTransferTedDTOSchema = {
    type: 'object',
    properties: {
        feeValue: {
            type: 'number',
            description: 'Transfer fee via TED',
            example: 5,
            deprecated: false
        },
        consideredInMonthlyTransfersWithoutFee: {
            type: 'boolean',
            description: 'Indicates whether the number of monthly free transactions considers TED',
            example: true,
            deprecated: false
        }
    },
    description: 'Fees for TED transfers',
    deprecated: false
} as const;

export const ApiMyAccountGetAccountFeesTransferPixDTOSchema = {
    type: 'object',
    properties: {
        feeValue: {
            type: 'number',
            description: 'Fee for sending transfers via Pix',
            example: 5,
            deprecated: false
        },
        discountValue: {
            type: 'number',
            description: 'Promotional fee (If any)',
            deprecated: false,
            example: null
        },
        expirationDate: {
            type: 'string',
            description: 'Promotional fee expiration date (If any)',
            format: 'date-time',
            deprecated: false,
            example: null
        },
        consideredInMonthlyTransfersWithoutFee: {
            type: 'boolean',
            description: 'Indicates whether the number of free monthly transactions considers Pix',
            example: true,
            deprecated: false
        }
    },
    description: 'Fees for Pix transfers',
    deprecated: false
} as const;

export const ApiMyAccountGetAccountFeesNotificationDTOSchema = {
    type: 'object',
    properties: {
        phoneCallFeeValue: {
            type: 'number',
            description: 'Fees per voice robot call',
            example: 0.55,
            deprecated: false
        },
        whatsAppFeeValue: {
            type: 'number',
            description: 'Fees for notifications via WhatsApp',
            example: 0.55,
            deprecated: false
        },
        messagingFeeValue: {
            type: 'number',
            description: 'Fees for sending emails and SMS',
            example: 0.99,
            deprecated: false
        }
    },
    description: 'Notification fees',
    deprecated: false
} as const;

export const ApiMyAccountGetAccountFeesCreditBureauReportDTOSchema = {
    type: 'object',
    properties: {
        naturalPersonFeeValue: {
            type: 'number',
            description: 'Fee for Serasa consultation for natural person',
            example: 16.99,
            deprecated: false
        },
        legalPersonFeeValue: {
            type: 'number',
            description: 'Fee for Serasa consultation for legal person',
            example: 16.99,
            deprecated: false
        }
    },
    description: 'Serasa consultation fees',
    deprecated: false
} as const;

export const ApiMyAccountGetAccountFeesInvoiceDTOSchema = {
    type: 'object',
    properties: {
        feeValue: {
            type: 'number',
            description: 'Fee per service note issued',
            example: 0.99,
            deprecated: false
        }
    },
    description: 'Invoice fees',
    deprecated: false
} as const;

export const ApiMyAccountGetAccountFeesAnticipationDTOSchema = {
    type: 'object',
    properties: {
        creditCard: {
            '$ref': '#/components/schemas/ApiMyAccountGetAccountFeesAnticipationCreditCardDTO'
        },
        bankSlip: {
            '$ref': '#/components/schemas/ApiMyAccountGetAccountFeesAnticipationBankSlipDTO'
        }
    },
    description: 'Anticipation fees',
    deprecated: false
} as const;

export const ApiMyAccountGetAccountFeesAnticipationCreditCardDTOSchema = {
    type: 'object',
    properties: {
        detachedMonthlyFeeValue: {
            type: 'number',
            description: 'Monthly fee for upfront charges',
            example: 2.49,
            deprecated: false
        },
        installmentMonthlyFeeValue: {
            type: 'integer',
            description: 'Monthly fee for installment payments',
            format: 'int32',
            example: 2,
            deprecated: false
        }
    },
    description: 'Credit card anticipation fee',
    deprecated: false
} as const;

export const ApiMyAccountGetAccountFeesAnticipationBankSlipDTOSchema = {
    type: 'object',
    properties: {
        monthlyFeePercentage: {
            type: 'number',
            description: 'Monthly fee for invoice charges',
            example: 4.99,
            deprecated: false
        }
    },
    description: 'Anticipation fee on boletos',
    deprecated: false
} as const;

export const ApiMyAccountGetAccountNumberResponseDTOSchema = {
    type: 'object',
    properties: {
        agency: {
            type: 'string',
            description: 'Account agency',
            example: '0001',
            deprecated: false
        },
        account: {
            type: 'string',
            description: 'Account number',
            example: '6541',
            deprecated: false
        },
        accountDigit: {
            type: 'string',
            description: 'Account digit',
            example: '5',
            deprecated: false
        }
    }
} as const;

export const ApiMyAccountGetStatusResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique account identifier in Asaas',
            example: 'a910f50b-8745-4bc6-89fe-f1931c6a2e05',
            deprecated: false
        },
        commercialInfo: {
            '$ref': '#/components/schemas/ApiMyAccountGetStatusResponseStatus'
        },
        bankAccountInfo: {
            '$ref': '#/components/schemas/ApiMyAccountGetStatusResponseStatus'
        },
        documentation: {
            '$ref': '#/components/schemas/ApiMyAccountGetStatusResponseStatus'
        },
        general: {
            '$ref': '#/components/schemas/ApiMyAccountGetStatusResponseStatus'
        }
    }
} as const;

export const ApiMyAccountGetStatusResponseStatusSchema = {
    type: 'string',
    description: 'Status of sent business data',
    example: 'APPROVED',
    deprecated: false,
    enum: ['PENDING', 'APPROVED', 'REJECTED', 'AWAITING_APPROVAL']
} as const;

export const ApiNotificationBatchUpdateRequestDTOSchema = {
    required: ['customer'],
    type: 'object',
    properties: {
        customer: {
            required: ['customer'],
            type: 'string',
            description: 'Unique customer identifier in Asaas',
            example: 'cus_000005401844',
            deprecated: false
        },
        notifications: {
            type: 'array',
            description: 'List of notification information',
            deprecated: false,
            items: {
                required: ['id'],
                type: 'object',
                properties: {
                    id: {
                        required: ['id'],
                        type: 'string',
                        description: 'Unique identifier of the notification to be updated',
                        example: 'not_wuGp97JeCr7G',
                        deprecated: false
                    },
                    enabled: {
                        type: 'boolean',
                        description: 'Enable/disable notification',
                        example: true,
                        deprecated: false
                    },
                    emailEnabledForProvider: {
                        type: 'boolean',
                        description: 'enable/disable the email sent to you',
                        example: true,
                        deprecated: false
                    },
                    smsEnabledForProvider: {
                        type: 'boolean',
                        description: 'enable/disable the SMS sent to you',
                        example: true,
                        deprecated: false
                    },
                    emailEnabledForCustomer: {
                        type: 'boolean',
                        description: 'enable/disable the email sent to your customer',
                        example: true,
                        deprecated: false
                    },
                    smsEnabledForCustomer: {
                        type: 'boolean',
                        description: 'enable/disable the SMS sent to your customer',
                        example: true,
                        deprecated: false
                    },
                    phoneCallEnabledForCustomer: {
                        type: 'boolean',
                        description: 'enable/disable voice notification sent to your customer',
                        example: false,
                        deprecated: false
                    },
                    whatsappEnabledForCustomer: {
                        type: 'boolean',
                        description: 'enable/disable WhatsApp messages for your customer',
                        example: false,
                        deprecated: false
                    },
                    scheduleOffset: {
                        type: 'integer',
                        description: `Specifies how many days before the due date the notification must be sent.
 For the \`PAYMENT_DUEDATE_WARNING\` event, the accepted values are: \`0\`, \`5\`, \`10\`, \`15\` and \`30\`
 For the \`PAYMENT_OVERDUE\` event, the accepted values are: \`1\`, \`7\`, \`15\` and \`30\``,
                        format: 'int32',
                        example: 1,
                        deprecated: false,
                        enum: [0, 1, 5, 7, 10, 15, 30]
                    }
                }
            }
        }
    }
} as const;

export const ApiNotificationUpdateRequestDTOSchema = {
    required: ['id'],
    type: 'object',
    properties: {
        id: {
            required: ['id'],
            type: 'string',
            description: 'Unique identifier of the notification to be updated',
            example: 'not_wuGp97JeCr7G',
            deprecated: false
        },
        enabled: {
            type: 'boolean',
            description: 'Enable/disable notification',
            example: true,
            deprecated: false
        },
        emailEnabledForProvider: {
            type: 'boolean',
            description: 'enable/disable the email sent to you',
            example: true,
            deprecated: false
        },
        smsEnabledForProvider: {
            type: 'boolean',
            description: 'enable/disable the SMS sent to you',
            example: true,
            deprecated: false
        },
        emailEnabledForCustomer: {
            type: 'boolean',
            description: 'enable/disable the email sent to your customer',
            example: true,
            deprecated: false
        },
        smsEnabledForCustomer: {
            type: 'boolean',
            description: 'enable/disable the SMS sent to your customer',
            example: true,
            deprecated: false
        },
        phoneCallEnabledForCustomer: {
            type: 'boolean',
            description: 'enable/disable voice notification sent to your customer',
            example: false,
            deprecated: false
        },
        whatsappEnabledForCustomer: {
            type: 'boolean',
            description: 'enable/disable WhatsApp messages for your customer',
            example: false,
            deprecated: false
        },
        scheduleOffset: {
            type: 'integer',
            description: `Specifies how many days before the due date the notification must be sent.
 For the \`PAYMENT_DUEDATE_WARNING\` event, the accepted values are: \`0\`, \`5\`, \`10\`, \`15\` and \`30\`
 For the \`PAYMENT_OVERDUE\` event, the accepted values are: \`1\`, \`7\`, \`15\` and \`30\``,
            format: 'int32',
            example: 1,
            deprecated: false,
            enum: [0, 1, 5, 7, 10, 15, 30]
        }
    }
} as const;

export const ApiNotificationBatchUpdateResponseDTOSchema = {
    type: 'object',
    properties: {
        notifications: {
            type: 'array',
            description: 'List of notification information',
            deprecated: false,
            items: {
                type: 'object',
                properties: {
                    object: {
                        type: 'string',
                        description: 'Object type',
                        example: 'notification',
                        deprecated: false
                    },
                    id: {
                        type: 'string',
                        description: 'Unique notification identifier',
                        example: 'not_wuGp97JeCr7G',
                        deprecated: false
                    },
                    customer: {
                        type: 'string',
                        description: 'Unique customer identifier',
                        example: 'cus_000005401844',
                        deprecated: false
                    },
                    enabled: {
                        type: 'boolean',
                        description: 'Indicates whether notification is enabled',
                        example: true,
                        deprecated: false
                    },
                    emailEnabledForProvider: {
                        type: 'boolean',
                        description: 'Indicates whether the email sent to you is enabled or disabled',
                        example: true,
                        deprecated: false
                    },
                    smsEnabledForProvider: {
                        type: 'boolean',
                        description: 'Indicates whether the SMS sent to you is enabled or disabled',
                        example: true,
                        deprecated: false
                    },
                    emailEnabledForCustomer: {
                        type: 'boolean',
                        description: 'Indicates whether the email sent to the customer is enabled or disabled',
                        example: true,
                        deprecated: false
                    },
                    smsEnabledForCustomer: {
                        type: 'boolean',
                        description: 'Indicates whether the SMS sent to the customer is enabled or disabled',
                        example: true,
                        deprecated: false
                    },
                    phoneCallEnabledForCustomer: {
                        type: 'boolean',
                        description: 'Indicates whether voice notification to the customer is enabled or disabled',
                        example: false,
                        deprecated: false
                    },
                    whatsappEnabledForCustomer: {
                        type: 'boolean',
                        description: 'Indicates whether the WhatsApp notification sent to the customer is enabled or disabled',
                        example: false,
                        deprecated: false
                    },
                    event: {
                        '$ref': '#/components/schemas/ApiNotificationGetResponseNotificationEvent'
                    },
                    scheduleOffset: {
                        type: 'integer',
                        description: 'Specifies how many days before the due date the notification must be sent. Valid only for the `PAYMENT_DUEDATE_WARNING` and `PAYMENT_OVERDUE` events',
                        format: 'int32',
                        example: 1,
                        deprecated: false,
                        enum: [0, 1, 5, 7, 10, 15, 30]
                    },
                    deleted: {
                        type: 'boolean',
                        description: 'Indicates whether the notification was deleted',
                        example: true,
                        deprecated: false,
                        default: true
                    }
                }
            }
        }
    }
} as const;

export const ApiNotificationGetResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'notification',
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique notification identifier',
            example: 'not_wuGp97JeCr7G',
            deprecated: false
        },
        customer: {
            type: 'string',
            description: 'Unique customer identifier',
            example: 'cus_000005401844',
            deprecated: false
        },
        enabled: {
            type: 'boolean',
            description: 'Indicates whether notification is enabled',
            example: true,
            deprecated: false
        },
        emailEnabledForProvider: {
            type: 'boolean',
            description: 'Indicates whether the email sent to you is enabled or disabled',
            example: true,
            deprecated: false
        },
        smsEnabledForProvider: {
            type: 'boolean',
            description: 'Indicates whether the SMS sent to you is enabled or disabled',
            example: true,
            deprecated: false
        },
        emailEnabledForCustomer: {
            type: 'boolean',
            description: 'Indicates whether the email sent to the customer is enabled or disabled',
            example: true,
            deprecated: false
        },
        smsEnabledForCustomer: {
            type: 'boolean',
            description: 'Indicates whether the SMS sent to the customer is enabled or disabled',
            example: true,
            deprecated: false
        },
        phoneCallEnabledForCustomer: {
            type: 'boolean',
            description: 'Indicates whether voice notification to the customer is enabled or disabled',
            example: false,
            deprecated: false
        },
        whatsappEnabledForCustomer: {
            type: 'boolean',
            description: 'Indicates whether the WhatsApp notification sent to the customer is enabled or disabled',
            example: false,
            deprecated: false
        },
        event: {
            '$ref': '#/components/schemas/ApiNotificationGetResponseNotificationEvent'
        },
        scheduleOffset: {
            type: 'integer',
            description: 'Specifies how many days before the due date the notification must be sent. Valid only for the `PAYMENT_DUEDATE_WARNING` and `PAYMENT_OVERDUE` events',
            format: 'int32',
            example: 1,
            deprecated: false,
            enum: [0, 1, 5, 7, 10, 15, 30]
        },
        deleted: {
            type: 'boolean',
            description: 'Indicates whether the notification was deleted',
            example: true,
            deprecated: false,
            default: true
        }
    }
} as const;

export const ApiNotificationGetResponseNotificationEventSchema = {
    type: 'string',
    description: 'Kind of event',
    example: 'PAYMENT_CREATED',
    deprecated: false,
    enum: ['PAYMENT_CREATED', 'PAYMENT_UPDATED', 'PAYMENT_RECEIVED', 'PAYMENT_OVERDUE', 'PAYMENT_DUEDATE_WARNING', 'SEND_LINHA_DIGITAVEL']
} as const;

export const ApiNotificationListResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiNotificationGetResponseDTO'
            }
        }
    }
} as const;

export const ApiPaymentCampaignPathIdRequestDTOSchema = {
    type: 'object',
    properties: {}
} as const;

export const ApiPaymentCampaignGetResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier for your payments link in Asaas',
            example: '725104409743',
            deprecated: false
        },
        name: {
            type: 'string',
            description: 'Payment link name',
            example: 'Book sales',
            deprecated: false
        },
        value: {
            type: 'number',
            description: 'Value of the payment link, if not informed, the payer can inform how much they want to pay',
            example: 50,
            deprecated: false
        },
        active: {
            type: 'boolean',
            description: 'If the payments link is active',
            example: true,
            deprecated: false
        },
        chargeType: {
            '$ref': '#/components/schemas/ApiPaymentCampaignGetResponseChargeType'
        },
        url: {
            type: 'string',
            description: 'Payments link access link',
            example: 'https://www.asaas.com/c/291089675759',
            deprecated: false
        },
        billingType: {
            '$ref': '#/components/schemas/ApiPaymentCampaignGetResponseBillingType'
        },
        subscriptionCycle: {
            '$ref': '#/components/schemas/ApiPaymentCampaignGetResponseCycle'
        },
        description: {
            type: 'string',
            description: 'Payments link description',
            example: 'Any book for just R$: 50.00',
            deprecated: false
        },
        endDate: {
            type: 'string',
            description: 'End date',
            format: 'date',
            example: '2024-09-05',
            deprecated: false
        },
        deleted: {
            type: 'boolean',
            description: 'Indicates whether the payment link has been removed',
            example: false,
            deprecated: false
        },
        viewCount: {
            type: 'integer',
            description: 'The number of views of your payments link',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        maxInstallmentCount: {
            type: 'integer',
            description: 'Maximum number of installments that your customer can pay in installments for the payment link, if it is Installment.',
            format: 'int32',
            example: 1,
            deprecated: false
        },
        dueDateLimitDays: {
            type: 'integer',
            description: 'Number of business days that your customer can pay after the invoice is generated (For payment method such as Boleto)',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        notificationEnabled: {
            type: 'boolean',
            description: 'Defines whether customers registered via the payments link will have notifications enabled',
            example: true,
            deprecated: false
        },
        isAddressRequired: {
            type: 'boolean',
            description: 'Defines whether filling in the address will be obligatory in the charges.',
            example: true,
            deprecated: false
        },
        externalReference: {
            type: 'string',
            description: 'Free search field.',
            example: '056984',
            deprecated: false
        }
    }
} as const;

export const ApiPaymentCampaignGetResponseChargeTypeSchema = {
    type: 'string',
    description: 'Charge type',
    example: 'DETACHED',
    deprecated: false,
    enum: ['DETACHED', 'RECURRENT', 'INSTALLMENT']
} as const;

export const ApiPaymentCampaignGetResponseBillingTypeSchema = {
    type: 'string',
    description: 'Allowed payment method',
    example: 'UNDEFINED',
    deprecated: false,
    enum: ['UNDEFINED', 'BOLETO', 'CREDIT_CARD', 'PIX']
} as const;

export const ApiPaymentCampaignGetResponseCycleSchema = {
    type: 'string',
    description: 'Billing frequency, if the chargeType is RECURRENT',
    example: 'MONTHLY',
    deprecated: false,
    enum: ['WEEKLY', 'BIWEEKLY', 'MONTHLY', 'BIMONTHLY', 'QUARTERLY', 'SEMIANNUALLY', 'YEARLY']
} as const;

export const ApiPaymentCampaignSaveRequestDTOSchema = {
    required: ['name', 'billingType', 'chargeType'],
    type: 'object',
    properties: {
        name: {
            required: ['name'],
            type: 'string',
            description: 'Payment link name',
            example: 'Book sales',
            deprecated: false
        },
        description: {
            type: 'string',
            description: 'Payments link description',
            example: 'Any book for just R$: 50.00',
            deprecated: false
        },
        endDate: {
            type: 'string',
            description: 'End date',
            example: '2024-09-05',
            deprecated: false
        },
        value: {
            type: 'number',
            description: 'Value of the payment link, if not informed, the payer can inform how much they want to pay',
            example: 50,
            deprecated: false
        },
        billingType: {
            '$ref': '#/components/schemas/ApiPaymentCampaignSaveRequestBillingType'
        },
        chargeType: {
            '$ref': '#/components/schemas/ApiPaymentCampaignSaveRequestChargeType'
        },
        dueDateLimitDays: {
            type: 'integer',
            description: 'Number of business days that your customer can pay after the invoice is generated (For payment method such as Boleto)',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        subscriptionCycle: {
            '$ref': '#/components/schemas/ApiPaymentCampaignSaveRequestCycle'
        },
        maxInstallmentCount: {
            type: 'integer',
            description: 'Maximum number of installments that your customer can pay in installments for the payment link if the billing method selected is Installments. If not informed, the default value will be 1 installment',
            format: 'int32',
            example: 1,
            deprecated: false,
            default: 1
        },
        externalReference: {
            type: 'string',
            description: 'Free search field.',
            example: '1287',
            deprecated: false
        },
        notificationEnabled: {
            type: 'boolean',
            description: 'Defines whether customers registered via the payments link will have notifications enabled. If not informed, the default value will be true',
            example: false,
            deprecated: false,
            default: true
        },
        callback: {
            '$ref': '#/components/schemas/ApiPaymentCallbackRequestDTO'
        },
        isAddressRequired: {
            type: 'boolean',
            description: 'True to make it mandatory to fill in address data at checkout.',
            example: true,
            deprecated: false
        }
    }
} as const;

export const ApiPaymentCampaignSaveRequestBillingTypeSchema = {
    required: ['billingType'],
    type: 'string',
    description: 'Allowed payment method',
    example: 'UNDEFINED',
    deprecated: false,
    enum: ['UNDEFINED', 'BOLETO', 'CREDIT_CARD', 'PIX']
} as const;

export const ApiPaymentCampaignSaveRequestChargeTypeSchema = {
    required: ['chargeType'],
    type: 'string',
    description: 'Charge type',
    example: 'DETACHED',
    deprecated: false,
    enum: ['DETACHED', 'RECURRENT', 'INSTALLMENT']
} as const;

export const ApiPaymentCampaignSaveRequestCycleSchema = {
    type: 'string',
    description: 'Billing frequency, if the chargeType is RECURRENT',
    example: 'MONTHLY',
    deprecated: false,
    enum: ['WEEKLY', 'BIWEEKLY', 'MONTHLY', 'BIMONTHLY', 'QUARTERLY', 'SEMIANNUALLY', 'YEARLY']
} as const;

export const ApiPaymentCallbackRequestDTOSchema = {
    required: ['successUrl'],
    type: 'object',
    properties: {
        successUrl: {
            required: ['successUrl'],
            type: 'string',
            description: 'URL that the customer will be redirected to after successful payment of the invoice or payment link',
            deprecated: false,
            example: null
        },
        autoRedirect: {
            type: 'boolean',
            description: 'Define whether the customer will be automatically redirected or will just be informed with a button to return to the website. The default is true, if you want to disable it, enter false',
            deprecated: false,
            example: null
        }
    },
    description: 'Automatic redirection information after the payment of the link payment',
    deprecated: false
} as const;

export const ApiPaymentCampaignUpdateRequestDTOSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'Payment link name',
            example: 'Book sales',
            deprecated: false
        },
        description: {
            type: 'string',
            description: 'Payments link description',
            example: 'Any book for just R$: 50.00',
            deprecated: false
        },
        endDate: {
            type: 'string',
            description: 'End date',
            example: '2024-09-05',
            deprecated: false
        },
        value: {
            type: 'number',
            description: 'Value of the payment link, if not informed, the payer can inform how much they want to pay',
            example: 50,
            deprecated: false
        },
        active: {
            type: 'boolean',
            description: 'Determines whether the payments link is active',
            example: true,
            deprecated: false
        },
        billingType: {
            '$ref': '#/components/schemas/ApiPaymentCampaignUpdateRequestBillingType'
        },
        chargeType: {
            '$ref': '#/components/schemas/ApiPaymentCampaignUpdateRequestChargeType'
        },
        dueDateLimitDays: {
            type: 'integer',
            description: 'Number of business days that your customer can pay after the invoice is generated (For payment method such as Boleto)',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        subscriptionCycle: {
            '$ref': '#/components/schemas/ApiPaymentCampaignUpdateRequestCycle'
        },
        maxInstallmentCount: {
            type: 'integer',
            description: 'Maximum number of installments that your customer can pay in installments for the payment link if the billing method selected is Installments. If not informed, the default value will be 1 installment',
            format: 'int32',
            example: 1,
            deprecated: false,
            default: 1
        },
        externalReference: {
            type: 'string',
            description: 'Free search field.',
            example: '2323',
            deprecated: false
        },
        notificationEnabled: {
            type: 'boolean',
            description: 'Defines whether customers registered via the payments link will have notifications enabled. If not informed, the default value will be true',
            example: false,
            deprecated: false,
            default: true
        },
        callback: {
            '$ref': '#/components/schemas/ApiPaymentCallbackRequestDTO'
        }
    }
} as const;

export const ApiPaymentCampaignUpdateRequestBillingTypeSchema = {
    type: 'string',
    description: 'Allowed payment method',
    example: 'UNDEFINED',
    deprecated: false,
    enum: ['UNDEFINED', 'BOLETO', 'CREDIT_CARD', 'PIX']
} as const;

export const ApiPaymentCampaignUpdateRequestChargeTypeSchema = {
    type: 'string',
    description: 'Charge type',
    example: 'DETACHED',
    deprecated: false,
    enum: ['DETACHED', 'RECURRENT', 'INSTALLMENT']
} as const;

export const ApiPaymentCampaignUpdateRequestCycleSchema = {
    type: 'string',
    description: 'Billing frequency, if the chargeType is RECURRENT',
    example: 'MONTHLY',
    deprecated: false,
    enum: ['WEEKLY', 'BIWEEKLY', 'MONTHLY', 'BIMONTHLY', 'QUARTERLY', 'SEMIANNUALLY', 'YEARLY']
} as const;

export const ApiPaymentCampaignListResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiPaymentCampaignGetResponseDTO'
            }
        }
    }
} as const;

export const ApiPaymentCampaignDeleteResponseDTOSchema = {
    type: 'object',
    properties: {
        deleted: {
            type: 'boolean',
            description: 'Indicates whether the payment link has been removed',
            example: true,
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique identifier for your payments link in Asaas',
            example: '725104409743',
            deprecated: false
        }
    }
} as const;

export const ApiPaymentCampaignFilePathIdRequestDTOSchema = {
    type: 'object',
    properties: {}
} as const;

export const ApiPaymentCampaignFileGetResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique payment link image identifier in Asaas',
            example: '417d1fe7-f530-4368-935f-699045f2bf5d',
            deprecated: false
        },
        main: {
            type: 'boolean',
            description: 'Determines if this is the main image',
            example: true,
            deprecated: false
        },
        image: {
            '$ref': '#/components/schemas/ApiPaymentCampaignFileImageResponseDTO'
        }
    }
} as const;

export const ApiPaymentCampaignFileImageResponseDTOSchema = {
    type: 'object',
    properties: {
        originalName: {
            type: 'string',
            description: 'Original image name',
            example: 'cover.png',
            deprecated: false
        },
        size: {
            type: 'integer',
            description: 'Image size',
            format: 'int32',
            example: 50859,
            deprecated: false
        },
        extension: {
            type: 'string',
            description: 'Image extension',
            example: 'png',
            deprecated: false
        },
        previewUrl: {
            type: 'string',
            description: 'Link to download the image preview',
            example: 'https://www.asaas.com/file/preview/XtW5OjqOBy3sskIcEMPj6yhr7T3aCLnSWEbIJd08gMNf3Rk7r5buwAXQ9xC2TNmg',
            deprecated: false
        },
        downloadUrl: {
            type: 'string',
            description: 'Link to download the image',
            example: 'https://www.asaas.com/file/public/download/XtW5OjqOBy3sskIcEMPj6yhr7T3aCLnSWEbIJd08gMNf3Rk7r5buwAXQ9xC2TNmg',
            deprecated: false
        }
    },
    description: 'Payments link image information',
    deprecated: false
} as const;

export const ApiPaymentCampaignFileSaveRequestDTOSchema = {
    type: 'object',
    properties: {
        main: {
            type: 'boolean',
            description: 'true to set as the main image',
            example: true,
            deprecated: false
        },
        image: {
            '$ref': '#/components/schemas/File'
        }
    }
} as const;

export const ApiPaymentCampaignFileListResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiPaymentCampaignFileGetResponseDTO'
            }
        }
    }
} as const;

export const ApiPaymentCampaignFileDeleteResponseDTOSchema = {
    type: 'object',
    properties: {
        deleted: {
            type: 'boolean',
            description: 'Indicates whether the image was removed',
            example: true,
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique payment link image identifier in Asaas',
            example: '417d1fe7-f530-4368-935f-699045f2bf5d',
            deprecated: false
        }
    }
} as const;

export const ApiPaymentCheckoutConfigGetResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'paymentCheckoutConfig',
            deprecated: false
        },
        logoBackgroundColor: {
            type: 'string',
            description: 'Logo background color',
            example: '#00ff00',
            deprecated: false
        },
        infoBackgroundColor: {
            type: 'string',
            description: 'Background color of your information',
            example: '#000fff',
            deprecated: false
        },
        fontColor: {
            type: 'string',
            description: 'Font color of your information',
            example: '#00ff00',
            deprecated: false
        },
        enabled: {
            type: 'boolean',
            description: 'Indicates whether personalization is enabled',
            example: true,
            deprecated: false,
            default: true
        },
        logoUrl: {
            type: 'string',
            description: 'Logo download link',
            deprecated: false,
            example: null
        },
        observations: {
            type: 'string',
            description: 'Invoice personalization analysis notes',
            example: 'Aprovado automaticamente pelo sistema.',
            deprecated: false
        },
        status: {
            '$ref': '#/components/schemas/ApiPaymentCheckoutConfigGetResponseCustomerInvoiceConfigStatus'
        }
    }
} as const;

export const ApiPaymentCheckoutConfigGetResponseCustomerInvoiceConfigStatusSchema = {
    type: 'string',
    description: 'Invoice personalization status',
    example: 'APPROVED',
    deprecated: false,
    enum: ['AWAITING_APPROVAL', 'APPROVED', 'REJECTED']
} as const;

export const ApiPaymentCheckoutConfigSaveRequestDTOSchema = {
    required: ['logoBackgroundColor', 'infoBackgroundColor', 'fontColor'],
    type: 'object',
    properties: {
        logoBackgroundColor: {
            required: ['logoBackgroundColor'],
            type: 'string',
            description: 'Logo background color',
            example: '#00ff00',
            deprecated: false
        },
        infoBackgroundColor: {
            required: ['infoBackgroundColor'],
            type: 'string',
            description: 'Background color of your information',
            example: '#000fff',
            deprecated: false
        },
        fontColor: {
            required: ['fontColor'],
            type: 'string',
            description: 'Font color of your information',
            example: '#00ff0',
            deprecated: false
        },
        enabled: {
            type: 'boolean',
            description: 'Indicates whether personalization is enabled',
            example: true,
            deprecated: false
        },
        logoFile: {
            '$ref': '#/components/schemas/File'
        }
    }
} as const;

export const ApiPaymentPayWithCreditCardRequestDTOSchema = {
    type: 'object',
    properties: {
        creditCard: {
            '$ref': '#/components/schemas/ApiCreditCardRequestDTO'
        },
        creditCardHolderInfo: {
            '$ref': '#/components/schemas/ApiCreditCardHolderInfoRequestDTO'
        },
        creditCardToken: {
            type: 'string',
            description: 'Credit card token for using the credit card tokenization functionality. If informed, the fields above are not mandatory.',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiPaymentGetResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'payment',
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique payment identifier in Asaas',
            example: 'pay_080225913252',
            deprecated: false
        },
        dateCreated: {
            type: 'string',
            description: 'Payment creation date',
            format: 'date',
            example: '2017-03-10',
            deprecated: false
        },
        customer: {
            type: 'string',
            description: 'Unique identifier of the customer to whom the payment belongs',
            example: 'cus_G7Dvo4iphUNk',
            deprecated: false
        },
        subscription: {
            type: 'string',
            description: 'Unique subscription identifier (when recurring billing)',
            deprecated: false,
            example: null
        },
        installment: {
            type: 'string',
            description: 'Unique installment identifier (when billing in installments)',
            deprecated: false,
            example: null
        },
        paymentLink: {
            type: 'string',
            description: 'Unique identifier of the payments link to which the payment belongs',
            deprecated: false,
            example: null
        },
        value: {
            type: 'number',
            description: 'Payment amount',
            example: 129.9,
            deprecated: false
        },
        netValue: {
            type: 'number',
            description: 'Net value of the charge after discounting the Asaas fee',
            example: 124.9,
            deprecated: false
        },
        originalValue: {
            type: 'number',
            description: 'Original amount of charge (filled when paid with interest and fine)',
            deprecated: false,
            example: null
        },
        interestValue: {
            type: 'number',
            description: 'Calculated amount of interest and fine that must be paid after the charge is due',
            deprecated: false,
            example: null
        },
        description: {
            type: 'string',
            description: 'Description of the payment',
            example: 'Pedido 056984',
            deprecated: false
        },
        billingType: {
            '$ref': '#/components/schemas/ApiPaymentGetResponseBillingType'
        },
        creditCard: {
            '$ref': '#/components/schemas/ApiPaymentSaveWithCreditCardCreditCardDTO'
        },
        canBePaidAfterDueDate: {
            type: 'boolean',
            description: 'Informs whether the charge can be paid after the due date (Only for bank slip)',
            example: true,
            deprecated: false
        },
        pixTransaction: {
            type: 'string',
            description: 'Unique identifier of the Pix transaction to which the payment belongs',
            deprecated: false,
            example: null
        },
        pixQrCodeId: {
            type: 'string',
            description: 'Unique identifier of the static QrCode generated for a given Pix key',
            deprecated: false,
            example: null
        },
        status: {
            '$ref': '#/components/schemas/ApiPaymentGetResponsePaymentStatus'
        },
        dueDate: {
            type: 'string',
            description: 'Payment due date',
            format: 'date',
            example: '2017-06-10',
            deprecated: false
        },
        originalDueDate: {
            type: 'string',
            description: 'Original due date upon creation of the payment',
            format: 'date',
            example: '2017-06-10',
            deprecated: false
        },
        paymentDate: {
            type: 'string',
            description: 'Payment date on Asaas',
            format: 'date',
            deprecated: false,
            example: null
        },
        clientPaymentDate: {
            type: 'string',
            description: 'Date on which the customer paid the bank slip',
            format: 'date',
            deprecated: false,
            example: null
        },
        installmentNumber: {
            type: 'integer',
            description: 'Parcel number',
            format: 'int32',
            deprecated: false,
            example: null
        },
        invoiceUrl: {
            type: 'string',
            description: 'Invoice URL',
            example: 'https://www.asaas.com/i/080225913252',
            deprecated: false
        },
        invoiceNumber: {
            type: 'string',
            description: 'Bill number',
            example: '00005101',
            deprecated: false
        },
        externalReference: {
            type: 'string',
            description: 'Free search field',
            example: '056984',
            deprecated: false
        },
        deleted: {
            type: 'boolean',
            description: 'Determines if the payment has been removed',
            example: false,
            deprecated: false
        },
        anticipated: {
            type: 'boolean',
            description: 'Defines whether the charge was anticipated or is in the process of being anticipated',
            example: false,
            deprecated: false
        },
        anticipable: {
            type: 'boolean',
            description: 'Determines whether the charge is anticipated',
            example: false,
            deprecated: false
        },
        creditDate: {
            type: 'string',
            description: 'Date when the credit became available',
            format: 'date',
            example: '2017-06-10',
            deprecated: false
        },
        estimatedCreditDate: {
            type: 'string',
            description: 'Estimated date when the credit will be available',
            format: 'date',
            example: '2017-06-10',
            deprecated: false
        },
        transactionReceiptUrl: {
            type: 'string',
            description: 'URL of proof of confirmation, receipt, reversal or removal',
            deprecated: false,
            example: null
        },
        nossoNumero: {
            type: 'string',
            description: 'Unique identification of the bank slip',
            example: '6453',
            deprecated: false
        },
        bankSlipUrl: {
            type: 'string',
            description: 'URL to download the bank slip',
            example: 'https://www.asaas.com/b/pdf/080225913252',
            deprecated: false
        },
        discount: {
            '$ref': '#/components/schemas/ApiPaymentDiscountDTO'
        },
        fine: {
            '$ref': '#/components/schemas/ApiPaymentFineResponseDTO'
        },
        interest: {
            '$ref': '#/components/schemas/ApiPaymentInterestResponseDTO'
        },
        split: {
            type: 'array',
            description: 'Split Settings',
            deprecated: false,
            items: {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        description: 'Unique split identifier in Asaas',
                        example: 'fd41396a-7453-47d0-9411-c8543522591d',
                        deprecated: false
                    },
                    walletId: {
                        type: 'string',
                        description: 'Asaas wallet identifier that will be transferred',
                        example: '7bafd95a-e783-4a62-9be1-23999af742c6',
                        deprecated: false
                    },
                    fixedValue: {
                        type: 'number',
                        description: 'Fixed amount to be transferred to the account when the charge is received',
                        example: 20.32,
                        deprecated: false
                    },
                    percentualValue: {
                        type: 'number',
                        description: 'Percentage of the net value of the charge to be transferred when received',
                        deprecated: false,
                        example: null
                    },
                    totalValue: {
                        type: 'number',
                        description: 'Amount that will be split relative to the total amount that will be paid',
                        example: 20.32,
                        deprecated: false
                    },
                    cancellationReason: {
                        '$ref': '#/components/schemas/ApiPaymentSplitGetResponsePaymentSplitCancellationReason'
                    },
                    status: {
                        '$ref': '#/components/schemas/ApiPaymentSplitGetResponsePaymentSplitStatus'
                    },
                    externalReference: {
                        type: 'string',
                        description: 'Unique identifier of split in your system',
                        deprecated: false,
                        example: null
                    },
                    description: {
                        type: 'string',
                        description: 'Split description',
                        deprecated: false,
                        example: null
                    }
                }
            }
        },
        postalService: {
            type: 'boolean',
            description: 'Define whether the payment will be sent via post',
            example: false,
            deprecated: false
        },
        daysAfterDueDateToRegistrationCancellation: {
            type: 'integer',
            description: 'Days after registration cancellation deadline (only for bank slip)',
            format: 'int32',
            deprecated: false,
            example: null
        },
        chargeback: {
            '$ref': '#/components/schemas/ApiPaymentChargebackResponseDTO'
        },
        refunds: {
            type: 'array',
            description: 'Refunds information',
            deprecated: false,
            items: {
                type: 'object',
                properties: {
                    dateCreated: {
                        type: 'string',
                        description: 'Refund creation date',
                        format: 'date-time',
                        example: '2024-10-18 10:19:06',
                        deprecated: false
                    },
                    status: {
                        '$ref': '#/components/schemas/ApiPaymentRefundGetResponsePaymentRefundStatus'
                    },
                    value: {
                        type: 'number',
                        description: 'Refund value',
                        example: 40,
                        deprecated: false
                    },
                    endToEndIdentifier: {
                        type: 'string',
                        description: '(Pix only) Unique identifier of the Pix transaction at the Central Bank',
                        deprecated: false,
                        example: null
                    },
                    description: {
                        type: 'string',
                        description: 'Description of the refund',
                        deprecated: false,
                        example: null
                    },
                    effectiveDate: {
                        type: 'string',
                        description: 'Refund effective date',
                        format: 'date-time',
                        example: '2024-10-19 10:19:06',
                        deprecated: false
                    },
                    transactionReceiptUrl: {
                        type: 'string',
                        description: 'Transaction receipt link',
                        deprecated: false,
                        example: null
                    },
                    refundedSplits: {
                        type: 'array',
                        description: 'Refunded Splits, if any',
                        deprecated: false,
                        items: {
                            type: 'object',
                            properties: {
                                id: {
                                    type: 'string',
                                    description: 'Unique split identifier',
                                    example: 'cff860dd-148e-48ca-ac8e-849684175158',
                                    deprecated: false
                                },
                                value: {
                                    type: 'number',
                                    description: 'Refunded value',
                                    example: 10,
                                    deprecated: false
                                },
                                done: {
                                    type: 'boolean',
                                    description: 'Indicates whether the split was refunded',
                                    example: true,
                                    deprecated: false
                                }
                            }
                        }
                    }
                }
            }
        }
    }
} as const;

export const ApiPaymentGetResponseBillingTypeSchema = {
    type: 'string',
    description: 'Payment billing type',
    example: 'BOLETO',
    deprecated: false,
    enum: ['UNDEFINED', 'BOLETO', 'CREDIT_CARD', 'DEBIT_CARD', 'TRANSFER', 'DEPOSIT', 'PIX']
} as const;

export const ApiPaymentGetResponsePaymentStatusSchema = {
    type: 'string',
    description: 'Payment status',
    example: 'PENDING',
    deprecated: false,
    enum: ['PENDING', 'RECEIVED', 'CONFIRMED', 'OVERDUE', 'REFUNDED', 'RECEIVED_IN_CASH', 'REFUND_REQUESTED', 'REFUND_IN_PROGRESS', 'CHARGEBACK_REQUESTED', 'CHARGEBACK_DISPUTE', 'AWAITING_CHARGEBACK_REVERSAL', 'DUNNING_REQUESTED', 'DUNNING_RECEIVED', 'AWAITING_RISK_ANALYSIS']
} as const;

export const ApiPaymentFineResponseDTOSchema = {
    type: 'object',
    properties: {
        value: {
            type: 'number',
            description: 'Fine amount in percentage',
            example: 1,
            deprecated: false
        }
    },
    description: 'Fine information for payment after due date',
    deprecated: false
} as const;

export const ApiPaymentInterestResponseDTOSchema = {
    type: 'object',
    properties: {
        value: {
            type: 'number',
            description: 'Interest value in percentage',
            example: 2,
            deprecated: false
        }
    },
    description: 'Interest information for payment after due date',
    deprecated: false
} as const;

export const ApiPaymentSplitGetResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique split identifier in Asaas',
            example: 'fd41396a-7453-47d0-9411-c8543522591d',
            deprecated: false
        },
        walletId: {
            type: 'string',
            description: 'Asaas wallet identifier that will be transferred',
            example: '7bafd95a-e783-4a62-9be1-23999af742c6',
            deprecated: false
        },
        fixedValue: {
            type: 'number',
            description: 'Fixed amount to be transferred to the account when the charge is received',
            example: 20.32,
            deprecated: false
        },
        percentualValue: {
            type: 'number',
            description: 'Percentage of the net value of the charge to be transferred when received',
            deprecated: false,
            example: null
        },
        totalValue: {
            type: 'number',
            description: 'Amount that will be split relative to the total amount that will be paid',
            example: 20.32,
            deprecated: false
        },
        cancellationReason: {
            '$ref': '#/components/schemas/ApiPaymentSplitGetResponsePaymentSplitCancellationReason'
        },
        status: {
            '$ref': '#/components/schemas/ApiPaymentSplitGetResponsePaymentSplitStatus'
        },
        externalReference: {
            type: 'string',
            description: 'Unique identifier of split in your system',
            deprecated: false,
            example: null
        },
        description: {
            type: 'string',
            description: 'Split description',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiPaymentSplitGetResponsePaymentSplitCancellationReasonSchema = {
    type: 'string',
    description: 'Reason for canceling the split',
    example: 'PAYMENT_DELETED',
    deprecated: false,
    enum: ['PAYMENT_DELETED', 'PAYMENT_OVERDUE', 'PAYMENT_RECEIVED_IN_CASH', 'PAYMENT_REFUNDED', 'VALUE_DIVERGENCE_BLOCK', 'WALLET_UNABLE_TO_RECEIVE']
} as const;

export const ApiPaymentSplitGetResponsePaymentSplitStatusSchema = {
    type: 'string',
    description: 'Split status',
    example: 'PENDING',
    deprecated: false,
    enum: ['PENDING', 'AWAITING_CREDIT', 'CANCELLED', 'DONE', 'REFUNDED', 'BLOCKED_BY_VALUE_DIVERGENCE']
} as const;

export const ApiPaymentRefundGetResponseDTOSchema = {
    type: 'object',
    properties: {
        dateCreated: {
            type: 'string',
            description: 'Refund creation date',
            format: 'date-time',
            example: '2024-10-18 10:19:06',
            deprecated: false
        },
        status: {
            '$ref': '#/components/schemas/ApiPaymentRefundGetResponsePaymentRefundStatus'
        },
        value: {
            type: 'number',
            description: 'Refund value',
            example: 40,
            deprecated: false
        },
        endToEndIdentifier: {
            type: 'string',
            description: '(Pix only) Unique identifier of the Pix transaction at the Central Bank',
            deprecated: false,
            example: null
        },
        description: {
            type: 'string',
            description: 'Description of the refund',
            deprecated: false,
            example: null
        },
        effectiveDate: {
            type: 'string',
            description: 'Refund effective date',
            format: 'date-time',
            example: '2024-10-19 10:19:06',
            deprecated: false
        },
        transactionReceiptUrl: {
            type: 'string',
            description: 'Transaction receipt link',
            deprecated: false,
            example: null
        },
        refundedSplits: {
            type: 'array',
            description: 'Refunded Splits, if any',
            deprecated: false,
            items: {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        description: 'Unique split identifier',
                        example: 'cff860dd-148e-48ca-ac8e-849684175158',
                        deprecated: false
                    },
                    value: {
                        type: 'number',
                        description: 'Refunded value',
                        example: 10,
                        deprecated: false
                    },
                    done: {
                        type: 'boolean',
                        description: 'Indicates whether the split was refunded',
                        example: true,
                        deprecated: false
                    }
                }
            }
        }
    }
} as const;

export const ApiPaymentRefundGetResponsePaymentRefundStatusSchema = {
    type: 'string',
    description: 'Refund status',
    example: 'DONE',
    deprecated: false,
    enum: ['PENDING', 'AWAITING_CRITICAL_ACTION_AUTHORIZATION', 'AWAITING_CUSTOMER_EXTERNAL_AUTHORIZATION', 'CANCELLED', 'DONE']
} as const;

export const ApiPaymentRefundedSplitResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique split identifier',
            example: 'cff860dd-148e-48ca-ac8e-849684175158',
            deprecated: false
        },
        value: {
            type: 'number',
            description: 'Refunded value',
            example: 10,
            deprecated: false
        },
        done: {
            type: 'boolean',
            description: 'Indicates whether the split was refunded',
            example: true,
            deprecated: false
        }
    }
} as const;

export const ApiPaymentPathIdRequestDTOSchema = {
    type: 'object',
    properties: {}
} as const;

export const ApiPaymentSaveRequestDTOSchema = {
    required: ['customer', 'billingType', 'value', 'dueDate'],
    type: 'object',
    properties: {
        customer: {
            required: ['customer'],
            type: 'string',
            description: 'Unique customer identifier in Asaas',
            example: 'cus_G7Dvo4iphUNk',
            deprecated: false
        },
        billingType: {
            '$ref': '#/components/schemas/ApiPaymentSaveRequestBillingType'
        },
        value: {
            required: ['value'],
            type: 'number',
            description: 'Payment amount',
            example: 129.9,
            deprecated: false
        },
        dueDate: {
            required: ['dueDate'],
            type: 'string',
            description: 'Payment due date',
            format: 'date',
            example: '2017-06-10',
            deprecated: false
        },
        description: {
            type: 'string',
            description: 'Payment description (max. 500 characters)',
            example: 'Pedido 056984',
            deprecated: false
        },
        daysAfterDueDateToRegistrationCancellation: {
            type: 'integer',
            description: 'Days after registration cancellation deadline (only for bank slip)',
            format: 'int32',
            example: 1,
            deprecated: false
        },
        externalReference: {
            type: 'string',
            description: 'Free search field',
            example: '056984',
            deprecated: false
        },
        installmentCount: {
            type: 'integer',
            description: 'Number of installments (only in the case of installment payment)',
            format: 'int32',
            deprecated: false,
            example: null
        },
        totalValue: {
            type: 'number',
            description: 'Enter the total amount of a charge that will be paid in installments (only in the case of an installment charge). If this field is sent, the installmentValue is not necessary, the calculation per installment will be automatic.',
            deprecated: false,
            example: null
        },
        installmentValue: {
            type: 'number',
            description: 'Value of each installment (only in the case of installment payment). Send this field if you want to define the value of each installment.',
            deprecated: false,
            example: null
        },
        discount: {
            '$ref': '#/components/schemas/ApiPaymentDiscountDTO'
        },
        interest: {
            '$ref': '#/components/schemas/ApiPaymentInterestRequestDTO'
        },
        fine: {
            '$ref': '#/components/schemas/ApiPaymentFineRequestDTO'
        },
        postalService: {
            type: 'boolean',
            description: 'Define whether the payment will be sent via post',
            example: false,
            deprecated: false
        },
        split: {
            type: 'array',
            description: 'Split Settings',
            deprecated: false,
            items: {
                required: ['walletId'],
                type: 'object',
                properties: {
                    walletId: {
                        required: ['walletId'],
                        type: 'string',
                        description: 'Asaas wallet identifier that will be transferred',
                        deprecated: false,
                        example: null
                    },
                    fixedValue: {
                        type: 'number',
                        description: 'Fixed amount to be transferred to the account when the payment is received',
                        deprecated: false,
                        example: null
                    },
                    percentualValue: {
                        type: 'number',
                        description: 'Percentage of the net value of the charge to be transferred when received',
                        deprecated: false,
                        example: null
                    },
                    totalFixedValue: {
                        type: 'number',
                        description: '(Instalments only). Amount that will be split relative to the total amount that will be paid in installments.',
                        deprecated: false,
                        example: null
                    },
                    externalReference: {
                        type: 'string',
                        description: 'Split identifier in your system',
                        deprecated: false,
                        example: null
                    },
                    description: {
                        type: 'string',
                        description: 'Split description',
                        deprecated: false,
                        example: null
                    }
                }
            }
        },
        callback: {
            '$ref': '#/components/schemas/ApiPaymentCallbackRequestDTO'
        }
    }
} as const;

export const ApiPaymentSaveRequestBillingTypeSchema = {
    required: ['billingType'],
    type: 'string',
    description: 'Payment billing type',
    example: 'BOLETO',
    deprecated: false,
    enum: ['UNDEFINED', 'BOLETO', 'CREDIT_CARD', 'PIX']
} as const;

export const ApiPaymentSplitRequestDTOSchema = {
    required: ['walletId'],
    type: 'object',
    properties: {
        walletId: {
            required: ['walletId'],
            type: 'string',
            description: 'Asaas wallet identifier that will be transferred',
            deprecated: false,
            example: null
        },
        fixedValue: {
            type: 'number',
            description: 'Fixed amount to be transferred to the account when the payment is received',
            deprecated: false,
            example: null
        },
        percentualValue: {
            type: 'number',
            description: 'Percentage of the net value of the charge to be transferred when received',
            deprecated: false,
            example: null
        },
        totalFixedValue: {
            type: 'number',
            description: '(Instalments only). Amount that will be split relative to the total amount that will be paid in installments.',
            deprecated: false,
            example: null
        },
        externalReference: {
            type: 'string',
            description: 'Split identifier in your system',
            deprecated: false,
            example: null
        },
        description: {
            type: 'string',
            description: 'Split description',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiPaymentUpdateRequestDTOSchema = {
    required: ['billingType', 'value', 'dueDate'],
    type: 'object',
    properties: {
        billingType: {
            '$ref': '#/components/schemas/ApiPaymentUpdateRequestBillingType'
        },
        value: {
            required: ['value'],
            type: 'number',
            description: 'Payment amount',
            example: 129.9,
            deprecated: false
        },
        dueDate: {
            required: ['dueDate'],
            type: 'string',
            description: 'Payment due date',
            format: 'date',
            example: '2017-06-10',
            deprecated: false
        },
        description: {
            type: 'string',
            description: 'Payment description (max. 500 characters)',
            example: 'Pedido 056984',
            deprecated: false
        },
        daysAfterDueDateToRegistrationCancellation: {
            type: 'integer',
            description: 'Days after registration cancellation deadline (only for bank slip)',
            format: 'int32',
            example: 1,
            deprecated: false
        },
        externalReference: {
            type: 'string',
            description: 'Free search field',
            example: '056984',
            deprecated: false
        },
        discount: {
            '$ref': '#/components/schemas/ApiPaymentDiscountDTO'
        },
        interest: {
            '$ref': '#/components/schemas/ApiPaymentInterestRequestDTO'
        },
        fine: {
            '$ref': '#/components/schemas/ApiPaymentFineRequestDTO'
        },
        postalService: {
            type: 'boolean',
            description: 'Define whether the payment will be sent via post',
            example: false,
            deprecated: false
        },
        split: {
            type: 'array',
            description: 'Split Settings',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiPaymentSplitRequestDTO'
            }
        },
        callback: {
            '$ref': '#/components/schemas/ApiPaymentCallbackRequestDTO'
        }
    }
} as const;

export const ApiPaymentUpdateRequestBillingTypeSchema = {
    required: ['billingType'],
    type: 'string',
    description: 'Payment billing type',
    example: 'BOLETO',
    deprecated: false,
    enum: ['UNDEFINED', 'BOLETO', 'CREDIT_CARD', 'PIX']
} as const;

export const ApiPaymentListResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiPaymentGetResponseDTO'
            }
        }
    }
} as const;

export const ApiPaymentListRequestBillingTypeSchema = {
    type: 'string',
    description: 'Filter by billing type',
    example: 'UNDEFINED',
    deprecated: false,
    enum: ['UNDEFINED', 'BOLETO', 'CREDIT_CARD', 'PIX']
} as const;

export const ApiPaymentListRequestPaymentStatusSchema = {
    type: 'string',
    description: 'Filter by status',
    example: 'PENDING',
    deprecated: false,
    enum: ['PENDING', 'RECEIVED', 'CONFIRMED', 'OVERDUE', 'REFUNDED', 'RECEIVED_IN_CASH', 'REFUND_REQUESTED', 'REFUND_IN_PROGRESS', 'CHARGEBACK_REQUESTED', 'CHARGEBACK_DISPUTE', 'AWAITING_CHARGEBACK_REVERSAL', 'DUNNING_REQUESTED', 'DUNNING_RECEIVED', 'AWAITING_RISK_ANALYSIS']
} as const;

export const ApiPaymentListRequestInvoiceStatusSchema = {
    type: 'string',
    description: 'Filter to return charges that have or do not have an invoice',
    example: 'SCHEDULED',
    deprecated: false,
    enum: ['SCHEDULED', 'AUTHORIZED', 'PROCESSING_CANCELLATION', 'CANCELED', 'CANCELLATION_DENIED', 'ERROR']
} as const;

export const ApiPaymentDeleteResponseDTOSchema = {
    type: 'object',
    properties: {
        deleted: {
            type: 'boolean',
            description: 'Indicates whether the charge has been removed',
            example: true,
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique payment identifier in Asaas',
            example: 'pay_pCczZjBBr6RL',
            deprecated: false
        }
    }
} as const;

export const ApiPaymentIdentificationFieldResponseDTOSchema = {
    type: 'object',
    properties: {
        identificationField: {
            type: 'string',
            description: 'Digitable bill line',
            example: '00190000090275928800021932978170187890000005000',
            deprecated: false
        },
        nossoNumero: {
            type: 'string',
            description: 'Unique identification of the bank slip',
            example: '6543',
            deprecated: false
        },
        barCode: {
            type: 'string',
            description: 'Bank slip bar code',
            example: '00191878900000050000000002759288002193297817',
            deprecated: false
        }
    }
} as const;

export const ApiPaymentReceiveInCashRequestDTOSchema = {
    type: 'object',
    properties: {
        paymentDate: {
            type: 'string',
            description: 'Date the customer made the payment',
            format: 'date',
            example: '17/01/2025',
            deprecated: false
        },
        value: {
            type: 'number',
            description: 'Amount paid by the customer',
            example: 129.9,
            deprecated: false
        },
        notifyCustomer: {
            type: 'boolean',
            description: 'Send or not send notification of confirmed payment to the customer',
            example: false,
            deprecated: false
        }
    }
} as const;

export const ApiPaymentBillingInfoResponseDTOSchema = {
    type: 'object',
    properties: {
        pix: {
            '$ref': '#/components/schemas/ApiPaymentPixQrCodeResponseDTO'
        },
        creditCard: {
            '$ref': '#/components/schemas/ApiCreditCardTokenizeResponseDTO'
        },
        bankSlip: {
            '$ref': '#/components/schemas/ApiBankSlipBillingInfoResponseDTO'
        }
    }
} as const;

export const ApiPaymentPixQrCodeResponseDTOSchema = {
    type: 'object',
    properties: {
        encodedImage: {
            type: 'string',
            description: 'QrCode image in base64',
            example: '=iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAAAXNSR0IArs4c6QAAFIBJREFUeF7t3dt2GzsOBNDk/z86s2aO5DnqpLVZDVCWHfgVJC6FKpC6tX/++vXr14/5GwQGgT8i8HMEMswYBM4R+BDIz58/X4pT9eA65nv0l9aj/dV8j+AqfzVD9e2uR/GP+Qs/4ZHGE36y3/MdgdyQ2k2oEcjzm/wI5MAQTRQpvBvQEYgQf7SnE1397u5nVs3vq+cEgWDVsGoDqv5F0N2CV/xvf8WS4lOCiBCyp/G614sQIqQIo/oVX/Wqn6l/+dOVMs1X+Mif7Gf+T1+DpABcTeC+bzcAyk92EWgE8hxB4VcdIOqf7CMQIQS7GjwCGYGUKKYTQvZS8IbNI5BHENMbhvD78ifIqwuUYF5tl8aqhNH+r15v+ppEJ7Lsab/KV6wRyHPIRXARRPtHII8fZI9ADp/sC5Dd9nQiab0InwpK/lK78pegtV8Dt9pPxV/1v/wulgrqvkOmDV0tePVds2q9apDqG4E8fvIuvKr9evsr1m4AUsJV16f7Vb8Ep3jan54Iuwh5lqfw2ZXP25wguwEQgUQQ5ScCar/s8q/6tF/1d/tP69X6EUj4bWM1XICLEPKf7k/zEeGrhNntP61X66v1zhXr0HEBnhI8JVT6mkn+la/2VwWf+u/G/9sLJG2wGlptgBr+2fa0/u43Ubr7JTzVzxHIAcGUIOl6Neyz7dV6uk8wEVT5Cs8RCK5AmoCaaGqQGqwGvtperWcEsvY28tu8iyWCj0AeERiBPCe4BtbqgFgWiALKnh6RqwXc4+oEkD/lL4FW61N81af9af1aL3uaj9YLX+2XvfwulgLIrgK77SmhlX/qTwTSCZCeqMpf+XTXl+aj9eKH9ss+Ajk8/mv3RBYhRyDZ49hGIM1fTkwnoiZM6m8E8hzR6oBI96u/8Qkih1V7SiBNkLFnXwf/6vhX+af9d3ze5rlYQ/C/i+BVgYrgVfsIBK9Jqg2c/WufM5y9Cyn8qgLQ/hHICOSBI1/tBBfBq/bfBFJ12L0/fZep+qJN8bonWpqv8kvfRFC/VG+av962rvpTPVftb/t09yohUkAUT4RJ46WEUH4jkLQDa+tHIDecRMARyPM3Edbo9v9VutKl/natH4GMQP7ILQ2E9AT88lcsTdBUoQJY/qoNkP+0Yd34pPlpfTdemvApHuLDu9k/3l27/4eptOC0Yan/7oYr325CKF63vRuvbjzeTQCqbwRyYKgASwXeLQD5G4H0fu4yAhmBPNVc98D4didId0GagLKrYXpNIf9pvfJXzee4XyeE8Knaq/Uq/xQv9Uv4CQ+eIEogtacACzABnl6JdteT5qMGp/iIELKn/av6E17ql/BbzW/5F4VyKHsKcEoArVd8AS5Byr8arv2KL/yrduUn/JW/9qeET9ef5TcCuSE5AnmvDwI1UNSv7QLRxFCCsqsAxU8nThpPE1fx0/rTelVPmr/q6c5P/lKBpPmrP3f75d+DrAb4eLGDR4emR3AKiAglf8pPhFTDRRjZ037IX3e+wk/4V/un/Wf9G4GcMEWEV0NFWBE0tSteN0Gr+Wm/BKp60v0jkENHUoCr69UwEUb2EcgjQsJ7Fa/TLyumAaoTVQQUQWRPT4RX+0vjaf0qAVavwGk8rU/7IT4qnvjFE0QE1x1O+9OGqeDUnjZE/rv9pfG0PsV7NwFTfmi96u/i65wgKdK39SOQR+A0oUV47d8t4DlB8NytVCcjkL9MIGnDpejqEZ/u14TqOnLP7uzKNxWg/KUTV+uFn/IRvuKL9qf4Vevh5yACVAUL0G67AEkboIGR2tMGp/iofvUz3V/tv/BI85W/tF8jkMNjf6oEEaHVQAlYDU7zVz6KNwIJCVRtcNoQTZi0gSnB0nxFyCp+af7Kp1pfdWCov8o/xYMv0lNABIAKfHW8FLDd61W/CKD9uweE8uu2d9crfx+vNc9+k54KYDXgR+Dmp7lLkLsJn/pP8ar61wmV+u8WgPwJr3QgyN8IJHzbdxXQrgHwasKMQP78/0o+7fcgIlzVXiVYlTCfnX86Uav1Cu+qPcVTJ6b88QRRQbrSpA1aTfgsrzSe6pM/NSD1342n4qeCEB7d+Vf5UK2Pb/MK4HcDpNpAAVrFQ/678VS+aT5VfNP9I5Dw3w+o4WkDqv7mBHlEoFvgI5ARyAPDugmmATAnyNqD5j7t4dXVia8J021PTwzFTwkqwgtP7Vd98i+Bp/Gr+HThPwK5dUKf+4hAr26o4lUJ2Y1HNZ8uwp/lceZ/BDIC+SNnRiD/XMFGICOQEch/hXDywfGyQHQHTY9QTSjZ0yuP8tMRXq0/rUf1pfmmrxFS/8JX9u78dAVVP377HEQFVAnS3XD5Uz1VAFP/aoj8aX9qV7wRSHjFGoE8PppTBJOAUzxTAYjgyl/70/wVb06QA0LVhouAasicIM8RGoEcThBNhFThKUGrhJXglI/2p/V3E6yaX5pPWq/wrdrT/DVA5e++f/nRo68GTAWkdjWoSsCqwHfnl+L16n6r/jT/EUj4gys1YATS++8PhHdqH4EcEEsBEcHVEO1PJ2qa/+780nzSepV/1Z7m//ITJA2YApISVICl8bVer9G0f7c9xU/5pPUqfpU/qWBTfvCDwt2AqCECOLUrXmpP8Un9V9d345PWq/gjEPyDHBFAAKd2xUvtKWFS/9X13fik9Sr+CGQEUuV4ab8IWr2iKDnF//ICEQC608ku/9125ZNOSOWXElD+jva0HhFWdhFa+af4pvkovvIXnvf9l7+sqIJ2E0YACYC0gYq3u960nrQ/wiOtT/5SAgt/2VM8RiDFK6EarIal9hFIitjj+hHIAb+UUDX4f/xIJ2waL60nJYQmflqf/GnApPuFZ4rHbyeIGqAEtF/26p1bgKf+q+vT/cJHdsVT/0Qg4av8qnblL/vV+MtPVtyVwJnftCA1UATShFQ+u/FJ46cTeATy56/ajEBuzB6BPH8MjgaQBFy1awDJfjX+CGQE8j8E5gTBCaIriBSqCaP9uhKogam9u17Vr/q0v4qf9lfxE55V/8JP/tP67+sv/xvoqwFXX3OIMFePzKvxVW+ar/zpyidCyn+abzUfEVj+RyD4XCIFWALqJlhKOBFYhOnOP8VX+Qt/2dP6lL/yPcN7TpAbcppQAngE8oiABCD72wlEBKkqNCVYdb0msOpVfOEhu/zLLv/V+lP/InxqV/2yq34J8L7/8m/SqwRTgVW7AKrmXyVQd30ioAiRnoDV+rW/Gx/5O8NvBCLkTuxqsOwXw35sk//qgEj9S6CpvRsf+RuBHBCaE+T5g/BGIHiyYlXxmmDVI1/7uxuseJpQusJof9oP1a94af+ET5pPGl8DT/54gnzXAu91VQkmfES4EUjtqyzCdwRy+JdtIqwmVmpXPDVwBDICeeCAjrSUcPJXPSG0P81XglE9ipcKXBO2KuBqvtX4qk94x1csNbgKiBqs+NovQKr5d+cngaYESNerHuElgiufdH/a/xTf3z4HSQESYNUClE/qX/5SAOUvza8aX/FEQNWjfsv/CCR8Vm7a0LQBc4Jkb+OOQMKvu1cBkwBkV3ztH4GMQP7NofSE5hVLDnXkVgkqgXTbuwW3G59ufNP6dWVSftX9wrfrxrH8bd60YK1PC+wWRBeAq3mlA0f4dOM7Anl8G/qO/wjkhkRKkFVhfACN12jy1y2w6oCongDV/Rog1fpGIAcERyDPP8gTPiJkldDpAFE+qwNn26NHVVBqV4NkF2BqYOo/rS9dryvWKgFWT7iqP+GvE6Ubn9V+j0BOkBchuhvaTQDlv0qQVQHJ3wik+Vm3KaDphK9O4BHIn1/Ungkq7Wc6MORf/spfNdFE2k0YCUD2FMDPrlcNrQpcE194pvGFfzd/lN9q/csPjlMBXQl1TSA1uJuAqT/hKX+yq/7UrnirhFvtrwSlfKoD7rcPCrscKvHVO60IlDZY/tKGVP2l+1dxva+r4pMOvBFI+NwqNbRbkFV/I5De/5P+6n50C3ROEChYEzQ9ATTRNVBSu+Kl9jT+txeIABHA6X6t3zUhzuKmDa4KSvtfXb/6kQ4I+eu2d/Fz+bE/uoKkgKWEeDVBRiDPKZv2u1sA8jcCCX9/IoFXBSjBi1DaX80vrV8EVD3av9s+AhmBPHAsJUQqSAl0N+FT/ykeZwNk+asmAqgbcBW4O161Xl3RUv9Vf+kJonivtlfzl8DO+DQCuSEnwYkQKeHT9dX4VYKlA0v5pvZq/iMQIXCwq0EpgXevr+ZbJdgIZDPB5F4EkF3+dxN4t/+0fr2Irp6YyqfbXhW4+NF+xVJAEUb7NbFSwBRP9irhdvuv5tdN6LR/6qfyE9+uDoTLr0HUcCWs/SnAAkDxZK8ScLf/an4iYLddeKj/6rfyFT/v/kcg6tTNXiWgwlT9d+9PCSpCKr85QcIfVKlBAlSETO1qsCaa4lX9d+8X/lW78Ej9r54IZ3HPBP5pTzVRQz8bQOUnQVQnakoQ5Ss8Xz1wlI/w694/AjkgqgaIcCMQUbRmV3/kPd0/AhmBiFMPdg2AyNmFxSnB54p1QCC9gqQAzgny/KEMFzgfbfnyAlEBVYIJTcXX/t2Cqean/bKn9QuP1J9OIOUv/iifdIC2X7GqBQpAAaD42i9CCGC9qK3mp/2yp/ULj9Sf+qv8RyD4n4NqiADWfhFiBPL83ycI3xHI5t9jqAEjkN6HLGhgqB86UeU/HUjKR/5W7W3PxUoT1vrU/i5H8j3v3fl0E7JKYJ0YX9X/COTWudWJciYA7U8Fn/oTQdMTV+tlV73aL/ur/I9ARiB/5JoIKvurCHwWR/nJ/jEIf91GjzZ0XxkEYGrvzi/FI534qi/1NyfII6LV/sUCUUPThHSHlr/0Tvvd8hc+sqf4aQClglb/d+e36n/5ivXdCLYK0OqLbhHk3Se8BDUC2fw/9KoAdxNsBFK7kugEUL+1f3d/Vv3PCXJDavcE7RZ4mm81vgivE1Q3kFfnVxZIWlAVQAEse5qv1u+uR/Gr9lfjJcJ11yN/GiDK947fy57Nq4ZV7QJME0qA6Uqghkhwyj+1C0/5S/FK8VN84a396ofyHYEAYRFaBJRdDa7aq/FHIP983X9OkBMmjkBqvwcRfukASAXbfoIo4WpA+U/tmpACtFqP/OsIr14hhJfqkz31r/WpXfhKgCk/zvBYfuxPCqgKSAEToar5pQ3R+hFIrcPCV/wagRx+TzICeSSk8JBd9BZBtV/2EYgQgj2dEJroaUO0XvF0Ihbh+SEByK74I5ADQgKkSlg1RISrxld9aX5ar3yr+1P/Wl8dCPKversHyuqAuPwaRAmvJpACc18v/7JLcFfzWt1XJYz2y767f8K/OpBSwarfZ/5GIDfkqg1bFcZ9XUrgKqFVn/JJCTkCOXSsG2ARLm2AGiwCKZ/ULrzkT/tlrwpO+aX9kT/lm+5Xfh83lfsPpq4eQWeJpYRLCVxdr/xEsN32lBCrDV/tV7W+lLCqN62vq79tD6+WwARYlfCKr4ZXG6QGpnblk9Yr/NP8UjwVX/UqP+Fx1f8I5KRzIsBuuxoqQmjgpPtFUE3sEcgBgRQwNVQNqjZchFT8brvySesVQXfnr/iqV/kJj6v+l08QFSiCq4Duiax8lU8KaLq+u14RKB1YqifFN12verr7F7/NmwI6Anls2WcLQPFTwqb9Tf2L8IovvgqPEQg6VgVYE1cT8dX2lMAiaOpP64WHBFXtx33/XLFuSIxAnlP2rxeICCJFvnoiVPPRBNKRrHqr++W/u/40nvgiQWl/mo/w0Il0Zm/7RaEKUoIirPyrIdqv/NKGjkCe/yIxxVP9G4EAoRFI7SeyKQFFcPVD+9N8RiAjkKcIiJBVwqUnvPL5cgLpBjD1J8B2A64rUWoXoVRPuj+9Iiq+/KX9VT06ARQv5c9qfctfd1eCVXtaYAq48ksFsArwPW66XvW9e77Cu9pv4SPBrfZjBHJD8t0Jp4ZW7SKcThwJQv5FaPlPBSe8Pgbb2dfdlVC3PS0wBVz5jkAeEVolkHA9s1f7nfY/7e9vAlHCV4E425cmrIbtzr+aryZkWp8muvyJYGm98pfyJ42f1qt87/Evfw6SFrybICOQ2gkggskuwqV8GYGEz7VSg0YgI5B/I6ATVoKeEyQcadWJtvsEXW346muCtF7FD+H+kcbXAFX8s/1t/0DnagJXG6aGpAAr/6q9u4FpPpqoOoG1v9oPDRDVW81/BFL8F3NqkOwjkMevwlQJLUGmghuBjECeang3YXWip4QegYSE1oSWXSdA1V6NLwIrP12R5F/7RdhvLxABqAkggsiuBoggyk/+1WARKMVP9Sie9qd4Cx/h212/6kv7Vb5ipQV2Jbj6Il6AqYEiQFqP/KX5pvnL/wjk+Wsivs0rQqgB2p/auwmnCSwCyd6d7whEjHu0p/yaE+SA7wjk5wMiwiMVvAia0T1frfir9uXPQd7tiqWGqeHVE6Dbf06Bxx3V/lTjV/erH59V3wjk1tluwqvhVUJpQMi/6tX+brvwGoGEb+uKICKAGvJq/1XCfRaBqnnf96sfn1XfnCBzgnRxvORnBIITIp0Q6oZOEO2XPW2oXhQqnuyvrjd9V039FT676zvD921PEBFC9t2AjkAeOyC8RyAHxqYTQQBKEOlES/2lr0lSAVXzEUGr/tUfxU/3C79qPav75wRZReqwTg1M7RfT+Ngmglb9pwTXQNFAE37Velb3Lwtk1eHpXa74GkQESAHV+m5CpCdqine1HsWr4r8bTwnyav4jkBuyIrAmXtogEVqErcZL/V8l2D3OCASIixDvBuDufIRHSmD5Uz2KNwIpflAngKsNrDaoe+JW8xEewrO7HsXrrrf7RE7xWF3/to/9EYCfTTBdyXYTSvisEmDXa0blp/7JLkGrfu2/928EckNKDana1TAJbrWhVwn/6vy68RQ+6RVzBHJAtNow7X81AdN46fqrhDt70a4BoRN5BBI+aE6AVQlRbagEVSVgWl+6vppfWv+nCyQl1KwfBP4GBN7m3x/8DWBPjV8Pgf8AkKUrmAjxSVQAAAAASUVORK5CYII=',
            deprecated: false
        },
        payload: {
            type: 'string',
            description: 'Copy and Paste of the Pix QrCode',
            example: '00020101021226730014br.gov.bcb.pix2551pix-h.asaas.com/pixqrcode/cobv/pay_76575613967995145204000053039865802BR5905ASAAS6009Joinville61088922827162070503***63045E7A',
            deprecated: false
        },
        expirationDate: {
            type: 'string',
            description: 'QrCode expiration date',
            format: 'date-time',
            example: '2022-06-24 23:59:59',
            deprecated: false
        }
    },
    description: 'Payment data related to pix',
    deprecated: false
} as const;

export const ApiBankSlipBillingInfoResponseDTOSchema = {
    type: 'object',
    properties: {
        identificationField: {
            type: 'string',
            description: 'Digitable bill line',
            example: '00190000090275928800021932978170187890000005000',
            deprecated: false
        },
        nossoNumero: {
            type: 'string',
            description: 'Unique identification of the bank slip',
            example: '6543',
            deprecated: false
        },
        barCode: {
            type: 'string',
            description: 'Bank slip bar code',
            example: '00191878900000050000000002759288002193297817',
            deprecated: false
        },
        bankSlipUrl: {
            type: 'string',
            description: 'URL to download the bank slip',
            example: 'https://www.asaas.com/b/pdf/080225913252',
            deprecated: false
        },
        daysAfterDueDateToRegistrationCancellation: {
            type: 'integer',
            description: 'Days after registration cancellation deadline (only for bank slip)',
            format: 'int32',
            example: 1,
            deprecated: false
        }
    },
    description: 'Payment data related to bank slip',
    deprecated: false
} as const;

export const ApiPaymentLimitsResponseDTOSchema = {
    type: 'object',
    properties: {
        creation: {
            '$ref': '#/components/schemas/ApiPaymentLimitsResponseCreationDTO'
        }
    }
} as const;

export const ApiPaymentLimitsResponseCreationDTOSchema = {
    type: 'object',
    properties: {
        daily: {
            '$ref': '#/components/schemas/ApiPaymentLimitsResponseCreationDailyDTO'
        }
    },
    description: 'Breeding limits',
    deprecated: false
} as const;

export const ApiPaymentLimitsResponseCreationDailyDTOSchema = {
    type: 'object',
    properties: {
        limit: {
            type: 'integer',
            description: 'Total limit',
            format: 'int64',
            example: 10,
            deprecated: false
        },
        used: {
            type: 'integer',
            description: 'Limit used',
            format: 'int64',
            example: 5,
            deprecated: false
        },
        wasReached: {
            type: 'boolean',
            description: 'Indicates whether the limit has been reached',
            deprecated: false,
            example: null
        }
    },
    description: 'Daily limits',
    deprecated: false
} as const;

export const ApiPaymentRefundRequestDTOSchema = {
    type: 'object',
    properties: {
        value: {
            type: 'number',
            description: 'Amount to be refunded',
            example: 5,
            deprecated: false
        },
        description: {
            type: 'string',
            description: 'Reason for the refund',
            example: 'Valor a mais',
            deprecated: false
        }
    }
} as const;

export const ApiPaymentStatusResponseDTOSchema = {
    type: 'object',
    properties: {
        status: {
            '$ref': '#/components/schemas/ApiPaymentStatusResponsePaymentStatus'
        }
    }
} as const;

export const ApiPaymentStatusResponsePaymentStatusSchema = {
    type: 'string',
    description: 'Payment status',
    example: 'PENDING',
    deprecated: false,
    enum: ['PENDING', 'RECEIVED', 'CONFIRMED', 'OVERDUE', 'REFUNDED', 'RECEIVED_IN_CASH', 'REFUND_REQUESTED', 'REFUND_IN_PROGRESS', 'CHARGEBACK_REQUESTED', 'CHARGEBACK_DISPUTE', 'AWAITING_CHARGEBACK_REVERSAL', 'DUNNING_REQUESTED', 'DUNNING_RECEIVED', 'AWAITING_RISK_ANALYSIS']
} as const;

export const ApiPaymentDocumentSaveRequestDTOSchema = {
    required: ['availableAfterPayment', 'type'],
    type: 'object',
    properties: {
        availableAfterPayment: {
            required: ['availableAfterPayment'],
            type: 'boolean',
            description: 'true to make the file available only after receipt of the payment',
            example: true,
            deprecated: false
        },
        type: {
            '$ref': '#/components/schemas/ApiPaymentDocumentSaveRequestPaymentDocumentType'
        },
        file: {
            '$ref': '#/components/schemas/File'
        }
    }
} as const;

export const ApiPaymentDocumentSaveRequestPaymentDocumentTypeSchema = {
    required: ['type'],
    type: 'string',
    description: 'Document type',
    example: 'INVOICE',
    deprecated: false,
    enum: ['INVOICE', 'CONTRACT', 'MEDIA', 'DOCUMENT', 'SPREADSHEET', 'PROGRAM', 'OTHER']
} as const;

export const ApiPaymentDocumentGetResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'paymentDocument',
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique document identifier',
            example: '609a3f98-8db7-4a89-b511-de4c3be6d462',
            deprecated: false
        },
        name: {
            type: 'string',
            description: 'Document name',
            example: 'Nota Fiscal.pdf',
            deprecated: false
        },
        type: {
            '$ref': '#/components/schemas/ApiPaymentDocumentGetResponsePaymentDocumentType'
        },
        availableAfterPayment: {
            type: 'boolean',
            description: 'Available only after payment',
            example: true,
            deprecated: false
        },
        file: {
            '$ref': '#/components/schemas/ApiPaymentDocumentFileResponseDTO'
        },
        deleted: {
            type: 'boolean',
            description: 'Indicates whether the file was removed',
            example: false,
            deprecated: false
        }
    }
} as const;

export const ApiPaymentDocumentGetResponsePaymentDocumentTypeSchema = {
    type: 'string',
    description: 'Document type',
    example: 'INVOICE',
    deprecated: false,
    enum: ['INVOICE', 'CONTRACT', 'MEDIA', 'DOCUMENT', 'SPREADSHEET', 'PROGRAM', 'OTHER']
} as const;

export const ApiPaymentDocumentFileResponseDTOSchema = {
    type: 'object',
    properties: {
        publicId: {
            type: 'string',
            description: 'Unique document identifier',
            example: 'TSrLvzPGF7HPQhYu9OZhZSBX3mm1sxpToEcFm30imOM3sKEjhzCc1zAIuqQ7n11',
            deprecated: false
        },
        originalName: {
            type: 'string',
            description: 'Original document name',
            example: 'Nota Fiscal.pdf',
            deprecated: false
        },
        size: {
            type: 'integer',
            description: 'File size',
            format: 'int32',
            example: 14499,
            deprecated: false
        },
        extension: {
            type: 'string',
            description: 'File extension',
            example: 'pdf',
            deprecated: false
        },
        previewUrl: {
            type: 'string',
            description: 'Link to download the file preview',
            example: 'https://www.asaas.com/file/preview/TSrLvzPGF7HPQhYu9OZhZSBX3mm1sxpToEcFm30imOM3sKEjhzCc1zAIuqQ7n11',
            deprecated: false
        },
        downloadUrl: {
            type: 'string',
            description: 'Link to download the file',
            example: 'https://www.asaas.com/file/public/download/TSrLvzPGF7HPQhYu9OZhZSBX3mm1sxpToEcFm30imOM3sKEjhzCc1zAIuqQ7n11',
            deprecated: false
        }
    },
    description: 'File object',
    deprecated: false
} as const;

export const ApiPaymentDocumentUpdateRequestDTOSchema = {
    required: ['id', 'documentId', 'availableAfterPayment', 'type'],
    type: 'object',
    properties: {
        availableAfterPayment: {
            required: ['availableAfterPayment'],
            type: 'boolean',
            description: 'true to make the file available only after receipt of the payment',
            example: true,
            deprecated: false
        },
        type: {
            '$ref': '#/components/schemas/ApiPaymentDocumentUpdateRequestPaymentDocumentType'
        }
    }
} as const;

export const ApiPaymentDocumentUpdateRequestPaymentDocumentTypeSchema = {
    required: ['type'],
    type: 'string',
    description: 'Document type',
    example: 'INVOICE',
    deprecated: false,
    enum: ['INVOICE', 'CONTRACT', 'MEDIA', 'DOCUMENT', 'SPREADSHEET', 'PROGRAM', 'OTHER']
} as const;

export const ApiPaymentDocumentListResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiPaymentDocumentGetResponseDTO'
            }
        }
    }
} as const;

export const ApiPaymentDocumentDeleteResponseDTOSchema = {
    type: 'object',
    properties: {
        deleted: {
            type: 'boolean',
            description: 'Indicates whether the file was removed',
            example: true,
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique document identifier',
            example: '609a3f98-8db7-4a89-b511-de4c3be6d462',
            deprecated: false
        }
    }
} as const;

export const ApiPaymentDunningCancelRequestDTOSchema = {
    required: ['id'],
    type: 'object',
    properties: {}
} as const;

export const ApiPaymentDunningCancelResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier of the payment dunning in Asaas',
            example: 'ce35702d-0d9f-475a-ba46-e251ad265c91',
            deprecated: false
        },
        dunningNumber: {
            type: 'integer',
            description: 'Payment dunning number',
            format: 'int32',
            example: 15,
            deprecated: false
        },
        status: {
            '$ref': '#/components/schemas/ApiPaymentDunningCancelResponsePaymentDunningStatus'
        },
        type: {
            '$ref': '#/components/schemas/ApiPaymentDunningCancelResponsePaymentDunningType'
        },
        payment: {
            type: 'string',
            description: 'Unique identifier of the payment to be recovered in Asaas',
            example: 'pay_080225913252',
            deprecated: false
        },
        requestDate: {
            type: 'string',
            description: 'Request date',
            format: 'date',
            example: '2020-05-26',
            deprecated: false
        },
        description: {
            type: 'string',
            description: 'Description of the payment dunning',
            example: 'Duas mesas com 8 cadeiras solicitadas via encomenda no dia 01/05/2018',
            deprecated: false
        },
        value: {
            type: 'number',
            description: 'Payment amount',
            example: 80,
            deprecated: false
        },
        feeValue: {
            type: 'number',
            description: 'Cost and/or payment dunning fee',
            example: 8,
            deprecated: false
        },
        netValue: {
            type: 'number',
            description: 'Net amount to be recovered',
            example: 72,
            deprecated: false
        },
        receivedInCashFeeValue: {
            type: 'number',
            description: 'Cash receipt fee',
            example: 0,
            deprecated: false
        },
        denialReason: {
            type: 'string',
            description: 'Reason for denial of payment dunning',
            deprecated: false,
            example: null
        },
        cancellationFeeValue: {
            type: 'number',
            description: 'Fee charged in case of cancellation',
            example: 0,
            deprecated: false
        },
        canBeCancelled: {
            type: 'boolean',
            description: 'Whether the payment dunning can be canceled',
            deprecated: false,
            default: true,
            example: null
        },
        cannotBeCancelledReason: {
            type: 'string',
            description: 'Reason for not being able to request cancellation',
            deprecated: false,
            example: null
        },
        isNecessaryResendDocumentation: {
            type: 'boolean',
            description: 'Determine whether documentation needs to be resubmitted',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiPaymentDunningCancelResponsePaymentDunningStatusSchema = {
    type: 'string',
    description: 'Payment dunning status',
    example: 'PENDING',
    deprecated: false,
    enum: ['PENDING', 'AWAITING_APPROVAL', 'AWAITING_CANCELLATION', 'PROCESSED', 'PAID', 'PARTIALLY_PAID', 'DENIED', 'CANCELLED']
} as const;

export const ApiPaymentDunningCancelResponsePaymentDunningTypeSchema = {
    type: 'string',
    description: 'Type of payment dunning',
    example: 'CREDIT_BUREAU',
    deprecated: false,
    enum: ['CREDIT_BUREAU']
} as const;

export const ApiPaymentDunningSaveDocumentsRequestDTOSchema = {
    required: ['id', 'documents'],
    type: 'object',
    properties: {
        documents: {
            required: ['documents'],
            type: 'string',
            description: 'Invoice and/or contract notarized',
            format: 'binary',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiPaymentDunningSaveDocumentsResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier of the payment dunning in Asaas',
            example: 'ce35702d-0d9f-475a-ba46-e251ad265c91',
            deprecated: false
        },
        dunningNumber: {
            type: 'integer',
            description: 'Payment dunning number',
            format: 'int32',
            example: 15,
            deprecated: false
        },
        status: {
            '$ref': '#/components/schemas/ApiPaymentDunningSaveDocumentsResponsePaymentDunningStatus'
        },
        type: {
            '$ref': '#/components/schemas/ApiPaymentDunningSaveDocumentsResponsePaymentDunningType'
        },
        payment: {
            type: 'string',
            description: 'Unique identifier of the payment to be recovered in Asaas',
            example: 'pay_080225913252',
            deprecated: false
        },
        requestDate: {
            type: 'string',
            description: 'Request date',
            format: 'date',
            example: '2020-05-26',
            deprecated: false
        },
        description: {
            type: 'string',
            description: 'Description of the payment dunning',
            example: 'Duas mesas com 8 cadeiras solicitadas via encomenda no dia 01/05/2018',
            deprecated: false
        },
        value: {
            type: 'number',
            description: 'Payment amount',
            example: 80,
            deprecated: false
        },
        feeValue: {
            type: 'number',
            description: 'Cost and/or payment dunning fee',
            example: 8,
            deprecated: false
        },
        netValue: {
            type: 'number',
            description: 'Net amount to be recovered',
            example: 72,
            deprecated: false
        },
        receivedInCashFeeValue: {
            type: 'number',
            description: 'Cash receipt fee',
            example: 0,
            deprecated: false
        },
        denialReason: {
            type: 'string',
            description: 'Reason for denial of payment dunning',
            deprecated: false,
            example: null
        },
        cancellationFeeValue: {
            type: 'number',
            description: 'Fee charged in case of cancellation',
            example: 0,
            deprecated: false
        },
        canBeCancelled: {
            type: 'boolean',
            description: 'Whether the payment dunning can be canceled',
            deprecated: false,
            default: true,
            example: null
        },
        cannotBeCancelledReason: {
            type: 'string',
            description: 'Reason for not being able to request cancellation',
            deprecated: false,
            example: null
        },
        isNecessaryResendDocumentation: {
            type: 'boolean',
            description: 'Determine whether documentation needs to be resubmitted',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiPaymentDunningSaveDocumentsResponsePaymentDunningStatusSchema = {
    type: 'string',
    description: 'Payment dunning status',
    example: 'PENDING',
    deprecated: false,
    enum: ['PENDING', 'AWAITING_APPROVAL', 'AWAITING_CANCELLATION', 'PROCESSED', 'PAID', 'PARTIALLY_PAID', 'DENIED', 'CANCELLED']
} as const;

export const ApiPaymentDunningSaveDocumentsResponsePaymentDunningTypeSchema = {
    type: 'string',
    description: 'Type of payment dunning',
    example: 'CREDIT_BUREAU',
    deprecated: false,
    enum: ['CREDIT_BUREAU']
} as const;

export const ApiPaymentDunningPaymentsAvailableForDunningResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            example: [
                {
                    payment: 'pay_856437540297',
                    customer: 'cus_000000001663',
                    value: 250,
                    status: 'PENDING',
                    billingType: 'BOLETO',
                    dueDate: '2020-05-18',
                    typeSimulations: [
                        {
                            type: 'CREDIT_BUREAU',
                            isAllowed: true,
                            feeValue: 0,
                            netValue: 0,
                            startDate: '2020-05-18'
                        },
                        {
                            type: 'CREDIT_BUREAU',
                            isAllowed: false,
                            notAllowedReason: 'A negativação via Serasa não está disponível para parcelamentos de cartão de crédito.',
                            feeValue: 0,
                            netValue: 0
                        }
                    ]
                },
                {
                    payment: 'pay_4272418031993158',
                    customer: 'cus_000000001838',
                    value: 23,
                    status: 'OVERDUE',
                    billingType: 'CREDIT_CARD',
                    dueDate: '2020-08-12',
                    typeSimulations: [
                        {
                            type: 'CREDIT_BUREAU',
                            isAllowed: true,
                            feeValue: 0,
                            netValue: 0,
                            startDate: '2020-05-18'
                        },
                        {
                            type: 'CREDIT_BUREAU',
                            isAllowed: false,
                            notAllowedReason: 'A negativação via Serasa não está disponível para parcelamentos de cartão de crédito.',
                            feeValue: 0,
                            netValue: 0
                        }
                    ]
                },
                {
                    payment: 'pay_4311673768874477',
                    customer: 'cus_000000001342',
                    value: 23,
                    status: 'OVERDUE',
                    billingType: 'CREDIT_CARD',
                    dueDate: '2022-12-19',
                    typeSimulations: [
                        {
                            type: 'CREDIT_BUREAU',
                            isAllowed: true,
                            feeValue: 0,
                            netValue: 0,
                            startDate: '2020-05-18'
                        },
                        {
                            type: 'CREDIT_BUREAU',
                            isAllowed: false,
                            notAllowedReason: 'A negativação via Serasa não está disponível para parcelamentos de cartão de crédito.',
                            feeValue: 0,
                            netValue: 0
                        }
                    ]
                }
            ],
            deprecated: false,
            items: {
                type: 'object',
                properties: {
                    payment: {
                        type: 'string',
                        description: 'Unique identifier of the payment to be recovered in Asaas',
                        example: 'pay_856437540297',
                        deprecated: false
                    },
                    customer: {
                        type: 'string',
                        description: 'Unique customer identifier',
                        example: 'cus_000000001663',
                        deprecated: false
                    },
                    value: {
                        type: 'number',
                        description: 'Payment amount',
                        example: 250,
                        deprecated: false
                    },
                    status: {
                        '$ref': '#/components/schemas/ApiPaymentDunningPaymentsAvailableForDunningResponseDataPaymentStatus'
                    },
                    billingType: {
                        '$ref': '#/components/schemas/ApiPaymentDunningPaymentsAvailableForDunningResponseDataBillingType'
                    },
                    dueDate: {
                        type: 'string',
                        description: 'Due date',
                        example: '2020-05-18',
                        deprecated: false
                    },
                    typeSimulations: {
                        type: 'array',
                        description: 'Simulation of denial request for each type of payment dunning available',
                        deprecated: false,
                        items: {
                            type: 'object',
                            properties: {
                                type: {
                                    '$ref': '#/components/schemas/ApiPaymentDunningPaymentsAvailableForDunningResponseDataTypeSimulationItemPaymentDunningType'
                                },
                                isAllowed: {
                                    type: 'boolean',
                                    description: 'Whether it is possible to request a payment dunning of this type',
                                    deprecated: false,
                                    default: true,
                                    example: null
                                },
                                notAllowedReason: {
                                    type: 'string',
                                    description: 'Reason why it is not possible to request a payment dunning for this type',
                                    deprecated: false,
                                    example: null
                                },
                                feeValue: {
                                    type: 'number',
                                    description: 'Cost and/or payment dunning fee',
                                    example: 0,
                                    deprecated: false
                                },
                                netValue: {
                                    type: 'number',
                                    description: 'Net amount to be recovered',
                                    example: 0,
                                    deprecated: false
                                },
                                startDate: {
                                    type: 'string',
                                    description: 'Expected start date of the payment dunning',
                                    example: '2020-05-27',
                                    deprecated: false
                                }
                            }
                        }
                    }
                }
            }
        }
    }
} as const;

export const ApiPaymentDunningPaymentsAvailableForDunningResponseDataDTOSchema = {
    type: 'object',
    properties: {
        payment: {
            type: 'string',
            description: 'Unique identifier of the payment to be recovered in Asaas',
            example: 'pay_856437540297',
            deprecated: false
        },
        customer: {
            type: 'string',
            description: 'Unique customer identifier',
            example: 'cus_000000001663',
            deprecated: false
        },
        value: {
            type: 'number',
            description: 'Payment amount',
            example: 250,
            deprecated: false
        },
        status: {
            '$ref': '#/components/schemas/ApiPaymentDunningPaymentsAvailableForDunningResponseDataPaymentStatus'
        },
        billingType: {
            '$ref': '#/components/schemas/ApiPaymentDunningPaymentsAvailableForDunningResponseDataBillingType'
        },
        dueDate: {
            type: 'string',
            description: 'Due date',
            example: '2020-05-18',
            deprecated: false
        },
        typeSimulations: {
            type: 'array',
            description: 'Simulation of denial request for each type of payment dunning available',
            deprecated: false,
            items: {
                type: 'object',
                properties: {
                    type: {
                        '$ref': '#/components/schemas/ApiPaymentDunningPaymentsAvailableForDunningResponseDataTypeSimulationItemPaymentDunningType'
                    },
                    isAllowed: {
                        type: 'boolean',
                        description: 'Whether it is possible to request a payment dunning of this type',
                        deprecated: false,
                        default: true,
                        example: null
                    },
                    notAllowedReason: {
                        type: 'string',
                        description: 'Reason why it is not possible to request a payment dunning for this type',
                        deprecated: false,
                        example: null
                    },
                    feeValue: {
                        type: 'number',
                        description: 'Cost and/or payment dunning fee',
                        example: 0,
                        deprecated: false
                    },
                    netValue: {
                        type: 'number',
                        description: 'Net amount to be recovered',
                        example: 0,
                        deprecated: false
                    },
                    startDate: {
                        type: 'string',
                        description: 'Expected start date of the payment dunning',
                        example: '2020-05-27',
                        deprecated: false
                    }
                }
            }
        }
    }
} as const;

export const ApiPaymentDunningPaymentsAvailableForDunningResponseDataPaymentStatusSchema = {
    type: 'string',
    description: 'Billing status',
    example: 'PENDING',
    deprecated: false,
    enum: ['PENDING', 'RECEIVED', 'CONFIRMED', 'OVERDUE']
} as const;

export const ApiPaymentDunningPaymentsAvailableForDunningResponseDataBillingTypeSchema = {
    type: 'string',
    description: 'Form of payment',
    example: 'BOLETO',
    deprecated: false,
    enum: ['BOLETO', 'CREDIT_CARD', 'TRANSFER', 'DEPOSIT', 'DEBIT_CARD', 'PIX']
} as const;

export const ApiPaymentDunningPaymentsAvailableForDunningResponseDataTypeSimulationItemDTOSchema = {
    type: 'object',
    properties: {
        type: {
            '$ref': '#/components/schemas/ApiPaymentDunningPaymentsAvailableForDunningResponseDataTypeSimulationItemPaymentDunningType'
        },
        isAllowed: {
            type: 'boolean',
            description: 'Whether it is possible to request a payment dunning of this type',
            deprecated: false,
            default: true,
            example: null
        },
        notAllowedReason: {
            type: 'string',
            description: 'Reason why it is not possible to request a payment dunning for this type',
            deprecated: false,
            example: null
        },
        feeValue: {
            type: 'number',
            description: 'Cost and/or payment dunning fee',
            example: 0,
            deprecated: false
        },
        netValue: {
            type: 'number',
            description: 'Net amount to be recovered',
            example: 0,
            deprecated: false
        },
        startDate: {
            type: 'string',
            description: 'Expected start date of the payment dunning',
            example: '2020-05-27',
            deprecated: false
        }
    }
} as const;

export const ApiPaymentDunningPaymentsAvailableForDunningResponseDataTypeSimulationItemPaymentDunningTypeSchema = {
    type: 'string',
    description: 'Type of payment dunning',
    example: 'CREDIT_BUREAU',
    deprecated: false,
    enum: ['CREDIT_BUREAU']
} as const;

export const ApiPaymentDunningListPartialPaymentsResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            example: [
                {
                    value: 800,
                    description: 'A quitação desta cobrança foi efetuada pelo cliente.',
                    paymentDate: '2020-02-10'
                },
                {
                    value: 800,
                    description: 'Pagamento parcial efetuado pelo cliente. Há pagamentos pendentes para a quitação dessa cobrança.',
                    paymentDate: '2020-01-10'
                },
                {
                    value: 800,
                    description: 'A quitação desta cobrança foi efetuada pelo cliente.',
                    paymentDate: '2019-12-10'
                }
            ],
            deprecated: false,
            items: {
                type: 'object',
                properties: {
                    value: {
                        type: 'number',
                        description: 'Amount paid',
                        example: 800,
                        deprecated: false
                    },
                    description: {
                        type: 'string',
                        description: 'Payment Description',
                        example: 'A quitação desta cobrança foi efetuada pelo cliente.',
                        deprecated: false
                    },
                    paymentDate: {
                        type: 'string',
                        description: 'Pay day',
                        example: '2020-02-10',
                        deprecated: false
                    }
                }
            }
        }
    }
} as const;

export const ApiPaymentDunningListPartialPaymentsResponseDataDTOSchema = {
    type: 'object',
    properties: {
        value: {
            type: 'number',
            description: 'Amount paid',
            example: 800,
            deprecated: false
        },
        description: {
            type: 'string',
            description: 'Payment Description',
            example: 'A quitação desta cobrança foi efetuada pelo cliente.',
            deprecated: false
        },
        paymentDate: {
            type: 'string',
            description: 'Pay day',
            example: '2020-02-10',
            deprecated: false
        }
    }
} as const;

export const ApiPaymentDunningShowResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier of the payment dunning in Asaas',
            example: 'ce35702d-0d9f-475a-ba46-e251ad265c91',
            deprecated: false
        },
        dunningNumber: {
            type: 'integer',
            description: 'Payment dunning number',
            format: 'int32',
            example: 15,
            deprecated: false
        },
        status: {
            '$ref': '#/components/schemas/ApiPaymentDunningShowResponsePaymentDunningStatus'
        },
        type: {
            '$ref': '#/components/schemas/ApiPaymentDunningShowResponsePaymentDunningType'
        },
        requestDate: {
            type: 'string',
            description: 'Request date',
            format: 'date',
            example: '2020-05-26',
            deprecated: false
        },
        description: {
            type: 'string',
            description: 'Description of the payment dunning',
            example: 'Duas mesas com 8 cadeiras solicitadas via encomenda no dia 01/05/2018',
            deprecated: false
        },
        value: {
            type: 'number',
            description: 'Payment amount',
            example: 80,
            deprecated: false
        },
        feeValue: {
            type: 'number',
            description: 'Cost and/or payment dunning fee',
            example: 8,
            deprecated: false
        },
        netValue: {
            type: 'number',
            description: 'Net amount to be recovered',
            example: 72,
            deprecated: false
        },
        receivedInCashFeeValue: {
            type: 'number',
            description: 'Cash receipt fee',
            example: 0,
            deprecated: false
        },
        denialReason: {
            type: 'string',
            description: 'Reason for denial of payment dunning',
            deprecated: false,
            example: null
        },
        cancellationFeeValue: {
            type: 'number',
            description: 'Fee charged in case of cancellation',
            example: 0,
            deprecated: false
        },
        canBeCancelled: {
            type: 'boolean',
            description: 'Whether the payment dunning can be canceled',
            deprecated: false,
            default: true,
            example: null
        },
        cannotBeCancelledReason: {
            type: 'string',
            description: 'Reason for not being able to request cancellation',
            deprecated: false,
            example: null
        },
        isNecessaryResendDocumentation: {
            type: 'boolean',
            description: 'Determine whether documentation needs to be resubmitted',
            deprecated: false,
            example: null
        },
        payment: {
            type: 'string',
            description: 'Unique identifier of the payment to be recovered in Asaas',
            example: 'pay_080225913252',
            deprecated: false
        }
    }
} as const;

export const ApiPaymentDunningShowResponsePaymentDunningStatusSchema = {
    type: 'string',
    description: 'Payment dunning status',
    example: 'PENDING',
    deprecated: false,
    enum: ['PENDING', 'AWAITING_APPROVAL', 'AWAITING_CANCELLATION', 'PROCESSED', 'PAID', 'PARTIALLY_PAID', 'DENIED', 'CANCELLED']
} as const;

export const ApiPaymentDunningShowResponsePaymentDunningTypeSchema = {
    type: 'string',
    description: 'Type of payment dunning',
    example: 'CREDIT_BUREAU',
    deprecated: false,
    enum: ['CREDIT_BUREAU']
} as const;

export const ApiPaymentDunningSaveRequestDTOSchema = {
    required: ['payment', 'type', 'customerName', 'customerCpfCnpj', 'customerPrimaryPhone', 'customerPostalCode', 'customerAddress', 'customerAddressNumber', 'customerProvince'],
    type: 'object',
    properties: {
        payment: {
            required: ['payment'],
            type: 'string',
            description: 'Unique identifier of the payment to be recovered in Asaas',
            example: 'pay_080225913252',
            deprecated: false
        },
        type: {
            '$ref': '#/components/schemas/ApiPaymentDunningSaveRequestPaymentDunningType'
        },
        description: {
            type: 'string',
            description: 'Description of the product or service provided',
            example: 'Duas mesas com 8 cadeiras solicitadas via encomenda no dia 01/05/2018',
            deprecated: false
        },
        customerName: {
            required: ['customerName'],
            type: 'string',
            description: 'Client name',
            example: 'John Doe',
            deprecated: false
        },
        customerCpfCnpj: {
            required: ['customerCpfCnpj'],
            type: 'string',
            description: 'Customer CPF or CNPJ',
            example: '378.285.120-07',
            deprecated: false
        },
        customerPrimaryPhone: {
            required: ['customerPrimaryPhone'],
            type: 'string',
            description: 'Customer main telephone number',
            example: '(11) 99999-9999',
            deprecated: false
        },
        customerSecondaryPhone: {
            type: 'string',
            description: 'Secondary customer phone number',
            example: '(11) 99999-9999',
            deprecated: false
        },
        customerPostalCode: {
            required: ['customerPostalCode'],
            type: 'string',
            description: 'Customer address zip code',
            example: '99050-460',
            deprecated: false
        },
        customerAddress: {
            required: ['customerAddress'],
            type: 'string',
            description: 'Customer public address',
            example: 'Rua Izaías Fontana',
            deprecated: false
        },
        customerAddressNumber: {
            required: ['customerAddressNumber'],
            type: 'string',
            description: 'Customer address number',
            example: '123',
            deprecated: false
        },
        customerComplement: {
            type: 'string',
            description: 'Customer address complement',
            example: 'AP 101',
            deprecated: false
        },
        customerProvince: {
            required: ['customerProvince'],
            type: 'string',
            description: 'Customer neighborhood',
            example: 'Petrópolis',
            deprecated: false
        },
        documents: {
            type: 'string',
            description: 'Invoice and/or contract notarized',
            format: 'binary',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiPaymentDunningSaveRequestPaymentDunningTypeSchema = {
    required: ['type'],
    type: 'string',
    description: 'Type of payment dunning',
    example: 'CREDIT_BUREAU',
    deprecated: false,
    enum: ['CREDIT_BUREAU']
} as const;

export const ApiPaymentDunningListResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiPaymentDunningShowResponseDTO'
            }
        }
    }
} as const;

export const ApiPaymentDunningListRequestPaymentDunningStatusSchema = {
    type: 'string',
    description: 'Filter by payment dunning status',
    example: 'PENDING',
    deprecated: false,
    enum: ['PENDING', 'AWAITING_APPROVAL', 'AWAITING_CANCELLATION', 'PROCESSED', 'PAID', 'PARTIALLY_PAID', 'DENIED', 'CANCELLED']
} as const;

export const ApiPaymentDunningListRequestPaymentDunningTypeSchema = {
    type: 'string',
    description: 'Filter by type of payment dunning',
    example: 'CREDIT_BUREAU',
    deprecated: false,
    enum: ['CREDIT_BUREAU', 'DEBT_RECOVERY_ASSISTANCE']
} as const;

export const ApiPaymentDunningSimulateRequestDTOSchema = {
    required: ['payment'],
    type: 'object',
    properties: {}
} as const;

export const ApiPaymentDunningSimulateResponseDTOSchema = {
    type: 'object',
    properties: {
        payment: {
            type: 'string',
            description: 'Unique identifier of the payment to be recovered in Asaas',
            example: 'pay_080225913252',
            deprecated: false
        },
        value: {
            type: 'number',
            description: 'Payment amount',
            example: 80,
            deprecated: false
        },
        typeSimulations: {
            type: 'array',
            description: 'Simulation of denial request for each type of denial available',
            example: [
                {
                    type: 'CREDIT_BUREAU',
                    isAllowed: true,
                    feeValue: 0,
                    netValue: 0,
                    startDate: '2020-05-18'
                },
                {
                    type: 'CREDIT_BUREAU',
                    isAllowed: false,
                    notAllowedReason: 'A negativação via Serasa não está disponível para parcelamentos de cartão de crédito.',
                    feeValue: 0,
                    netValue: 0
                }
            ],
            deprecated: false,
            items: {
                type: 'object',
                properties: {
                    type: {
                        '$ref': '#/components/schemas/ApiPaymentDunningSimulateResponseTypeSimulationItemPaymentDunningType'
                    },
                    isAllowed: {
                        type: 'boolean',
                        description: 'Whether it is possible to request a payment dunning of this type',
                        deprecated: false,
                        example: null
                    },
                    notAllowedReason: {
                        type: 'string',
                        description: 'Reason why it is not possible to request a payment dunning for this type',
                        example: 'A negativação via Serasa não está disponível para parcelamentos de cartão de crédito.',
                        deprecated: false
                    },
                    feeValue: {
                        type: 'number',
                        description: 'Cost and/or payment dunning fee',
                        example: 0,
                        deprecated: false
                    },
                    netValue: {
                        type: 'number',
                        description: 'Net amount to be recovered',
                        example: 0,
                        deprecated: false
                    },
                    startDate: {
                        type: 'string',
                        description: 'Expected start date of the payment dunning',
                        deprecated: false,
                        example: null
                    }
                }
            }
        }
    }
} as const;

export const ApiPaymentDunningSimulateResponseTypeSimulationItemDTOSchema = {
    type: 'object',
    properties: {
        type: {
            '$ref': '#/components/schemas/ApiPaymentDunningSimulateResponseTypeSimulationItemPaymentDunningType'
        },
        isAllowed: {
            type: 'boolean',
            description: 'Whether it is possible to request a payment dunning of this type',
            deprecated: false,
            example: null
        },
        notAllowedReason: {
            type: 'string',
            description: 'Reason why it is not possible to request a payment dunning for this type',
            example: 'A negativação via Serasa não está disponível para parcelamentos de cartão de crédito.',
            deprecated: false
        },
        feeValue: {
            type: 'number',
            description: 'Cost and/or payment dunning fee',
            example: 0,
            deprecated: false
        },
        netValue: {
            type: 'number',
            description: 'Net amount to be recovered',
            example: 0,
            deprecated: false
        },
        startDate: {
            type: 'string',
            description: 'Expected start date of the payment dunning',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiPaymentDunningSimulateResponseTypeSimulationItemPaymentDunningTypeSchema = {
    type: 'string',
    description: 'Type of payment dunning',
    example: 'CREDIT_BUREAU',
    deprecated: false,
    enum: ['CREDIT_BUREAU']
} as const;

export const ApiPaymentDunningListHistoryResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                type: 'object',
                properties: {
                    status: {
                        '$ref': '#/components/schemas/ApiPaymentDunningListHistoryResponseDataPaymentDunningHistoryStatus'
                    },
                    description: {
                        type: 'string',
                        description: 'Description of the event',
                        example: 'Negativação negociada com o cliente. O pagamento será iniciado.',
                        deprecated: false
                    },
                    eventDate: {
                        type: 'string',
                        description: 'Date the event occurred',
                        example: '2019-02-20',
                        deprecated: false
                    }
                }
            }
        }
    }
} as const;

export const ApiPaymentDunningListHistoryResponseDataDTOSchema = {
    type: 'object',
    properties: {
        status: {
            '$ref': '#/components/schemas/ApiPaymentDunningListHistoryResponseDataPaymentDunningHistoryStatus'
        },
        description: {
            type: 'string',
            description: 'Description of the event',
            example: 'Negativação negociada com o cliente. O pagamento será iniciado.',
            deprecated: false
        },
        eventDate: {
            type: 'string',
            description: 'Date the event occurred',
            example: '2019-02-20',
            deprecated: false
        }
    }
} as const;

export const ApiPaymentDunningListHistoryResponseDataPaymentDunningHistoryStatusSchema = {
    type: 'string',
    description: 'Negotiation status',
    example: 'NEGOTIATED',
    deprecated: false,
    enum: ['IN_NEGOTIATION', 'NEGOTIATION_FAIL', 'NEGOTIATED', 'PAID']
} as const;

export const ApiPaymentRefundListResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiPaymentRefundGetResponseDTO'
            }
        }
    }
} as const;

export const ApiPaymentBankSlipRefundResponseDTOSchema = {
    type: 'object',
    properties: {
        requestUrl: {
            type: 'string',
            description: 'Link to report refund details',
            example: 'https://sandbox.asaas.com/solicitar-estorno/37ij5mdxwo1234',
            deprecated: false
        }
    }
} as const;

export const ApiPaymentSimulateRequestDTOSchema = {
    required: ['value', 'billingTypes'],
    type: 'object',
    properties: {
        value: {
            required: ['value'],
            type: 'number',
            description: 'Total installment or billing amount',
            example: 100,
            deprecated: false
        },
        installmentCount: {
            type: 'integer',
            description: 'Number of installments',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        billingTypes: {
            required: ['billingTypes'],
            type: 'array',
            description: 'Form of payment',
            example: ['CREDIT_CARD', 'BOLETO', 'PIX'],
            deprecated: false,
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const ApiPaymentSimulateRequestBillingTypeSchema = {
    type: 'string'
} as const;

export const ApiPaymentSimulateResponseDTOSchema = {
    type: 'object',
    properties: {
        value: {
            type: 'number',
            description: 'Total installment or billing amount',
            example: 100,
            deprecated: false
        },
        creditCard: {
            '$ref': '#/components/schemas/ApiPaymentSimulateCreditCardResponseDTO'
        },
        bankSlip: {
            '$ref': '#/components/schemas/ApiPaymentSimulateBankSlipResponseDTO'
        },
        pix: {
            '$ref': '#/components/schemas/ApiPaymentSimulatePixResponseDTO'
        }
    }
} as const;

export const ApiPaymentSimulateCreditCardResponseDTOSchema = {
    type: 'object',
    properties: {
        netValue: {
            type: 'number',
            description: 'Net value',
            example: 100,
            deprecated: false
        },
        feePercentage: {
            type: 'number',
            description: 'Rate in percentage',
            example: 2.49,
            deprecated: false
        },
        operationFee: {
            type: 'number',
            description: 'Operation fee',
            example: 0.49,
            deprecated: false
        },
        installment: {
            '$ref': '#/components/schemas/ApiPaymentSimulateInstallmentResponseDTO'
        }
    },
    description: 'Card fees',
    deprecated: false
} as const;

export const ApiPaymentSimulateInstallmentResponseDTOSchema = {
    type: 'object',
    properties: {
        paymentNetValue: {
            type: 'number',
            description: 'Net value',
            example: 48.52,
            deprecated: false
        },
        paymentValue: {
            type: 'number',
            description: 'Total value',
            example: 50,
            deprecated: false
        }
    },
    description: 'Installment information',
    deprecated: false
} as const;

export const ApiPaymentSimulateBankSlipResponseDTOSchema = {
    type: 'object',
    properties: {
        netValue: {
            type: 'number',
            description: 'Net value',
            example: 98.02,
            deprecated: false
        },
        feeValue: {
            type: 'number',
            description: 'Fee value',
            example: 0.99,
            deprecated: false
        },
        installment: {
            '$ref': '#/components/schemas/ApiPaymentSimulateInstallmentResponseDTO'
        }
    },
    description: 'Boleto fees',
    deprecated: false
} as const;

export const ApiPaymentSimulatePixResponseDTOSchema = {
    type: 'object',
    properties: {
        netValue: {
            type: 'number',
            description: 'Net value',
            example: 98.02,
            deprecated: false
        },
        feePercentage: {
            type: 'number',
            description: 'Rate in percentage',
            deprecated: false,
            example: null
        },
        feeValue: {
            type: 'number',
            description: 'Fee value',
            example: 0.99,
            deprecated: false
        },
        installment: {
            '$ref': '#/components/schemas/ApiPaymentSimulateInstallmentResponseDTO'
        }
    },
    description: 'PIX fees',
    deprecated: false
} as const;

export const ApiPaymentSplitListResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiPaymentSplitGetResponseDTO'
            }
        }
    }
} as const;

export const ApiPaymentSplitListPaidRequestPaymentSplitStatusSchema = {
    type: 'string',
    description: 'Filter by status',
    example: 'PENDING',
    deprecated: false,
    enum: ['PENDING', 'AWAITING_CREDIT', 'CANCELLED', 'DONE', 'REFUNDED', 'BLOCKED_BY_VALUE_DIVERGENCE']
} as const;

export const ApiPaymentSplitListReceivedRequestPaymentSplitStatusSchema = {
    type: 'string',
    description: 'Filter by status',
    example: 'PENDING',
    deprecated: false,
    enum: ['PENDING', 'AWAITING_CREDIT', 'CANCELLED', 'DONE', 'REFUNDED', 'BLOCKED_BY_VALUE_DIVERGENCE']
} as const;

export const ApiPaymentViewingInfoResponseDTOSchema = {
    type: 'object',
    properties: {
        invoiceViewedDate: {
            type: 'string',
            description: 'Invoice viewing date and time',
            format: 'date-time',
            example: '2017-06-10 11:00:00',
            deprecated: false
        },
        boletoViewedDate: {
            type: 'string',
            description: 'Bill viewing date and time',
            format: 'date-time',
            example: '2017-06-10 11:00:00',
            deprecated: false
        }
    }
} as const;

export const ApiPushNotificationConfigGetResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique Webhook Identifier',
            example: 'bbf67496-1379-4b6d-a348-fd5fa229f1c',
            deprecated: false
        },
        name: {
            type: 'string',
            description: 'Webhook name',
            example: 'Name Example',
            deprecated: false
        },
        url: {
            type: 'string',
            description: 'Webhook URL',
            example: 'https://www.exemplo.com/webhook/asaas',
            deprecated: false
        },
        email: {
            type: 'string',
            description: 'Email that will receive notifications about the Webhook',
            example: 'john.doe@asaas.com.br',
            deprecated: false
        },
        enabled: {
            type: 'boolean',
            description: 'Set whether the Webhook is active',
            example: true,
            deprecated: false
        },
        interrupted: {
            type: 'boolean',
            description: 'Set whether the sync queue is stopped',
            example: false,
            deprecated: false
        },
        apiVersion: {
            type: 'integer',
            description: 'API Version',
            format: 'int32',
            example: 3,
            deprecated: false
        },
        authToken: {
            type: 'string',
            description: 'Webhook authentication token',
            example: '5tLxsL6uoN',
            deprecated: false
        },
        sendType: {
            '$ref': '#/components/schemas/ApiPushNotificationConfigGetResponsePushNotificationSendType'
        },
        events: {
            type: 'array',
            description: 'List of events this Webhook will observe',
            example: ['PAYMENT_RECEIVED', 'PAYMENT_CONFIRMED'],
            deprecated: false,
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const ApiPushNotificationConfigGetResponsePushNotificationSendTypeSchema = {
    type: 'string',
    description: 'Sequential (SEQUENTIALLY) or non-sequential (NON_SEQUENTIALLY)',
    example: 'SEQUENTIALLY',
    deprecated: false,
    enum: ['NON_SEQUENTIALLY', 'SEQUENTIALLY']
} as const;

export const ApiPushNotificationConfigGetResponsePushNotificationRequestEventSchema = {
    type: 'string'
} as const;

export const ApiPushNotificationConfigUpdateRequestDTOSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'Webhook name',
            example: 'Name Example',
            deprecated: false
        },
        url: {
            type: 'string',
            description: 'Event destination URL',
            example: 'https://www.exemplo.com/webhook/asaas',
            deprecated: false
        },
        sendType: {
            '$ref': '#/components/schemas/ApiPushNotificationConfigUpdateRequestPushNotificationSendType'
        },
        enabled: {
            type: 'boolean',
            description: 'Set whether the Webhook is active',
            example: true,
            deprecated: false
        },
        interrupted: {
            type: 'boolean',
            description: 'Set whether the sync queue is stopped',
            example: false,
            deprecated: false
        },
        authToken: {
            type: 'string',
            description: 'Webhook authentication token',
            example: '5tLxsL6uoN',
            deprecated: false
        },
        events: {
            type: 'array',
            description: 'List of events this Webhook will observe',
            example: ['PAYMENT_RECEIVED', 'PAYMENT_CONFIRMED'],
            deprecated: false,
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const ApiPushNotificationConfigUpdateRequestPushNotificationSendTypeSchema = {
    type: 'string',
    description: 'Sequential (SEQUENTIALLY) or non-sequential (NON_SEQUENTIALLY)',
    example: 'SEQUENTIALLY',
    deprecated: false,
    enum: ['NON_SEQUENTIALLY', 'SEQUENTIALLY']
} as const;

export const ApiPushNotificationConfigUpdateRequestPushNotificationRequestEventSchema = {
    type: 'string'
} as const;

export const ApiPushNotificationConfigListResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiPushNotificationConfigGetResponseDTO'
            }
        }
    }
} as const;

export const ApiPushNotificationConfigDeleteResponseDTOSchema = {
    type: 'object',
    properties: {
        deleted: {
            type: 'boolean',
            description: 'Indicates whether the Webhook was removed',
            example: false,
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique Webhook Identifier',
            example: 'bbf67496-1379-4b6d-a348-fd5fa229f1c',
            deprecated: false
        }
    }
} as const;

export const ApiReceivableAnticipationConfigurationGetResponseDTOSchema = {
    type: 'object',
    properties: {
        creditCardAutomaticEnabled: {
            type: 'boolean',
            description: 'Indicates whether automatic anticipation is enabled for credit card payments',
            example: false,
            deprecated: false
        }
    }
} as const;

export const ApiReceivableAnticipationConfigurationUpdateRequestDTOSchema = {
    type: 'object',
    properties: {
        creditCardAutomaticEnabled: {
            type: 'boolean',
            description: 'Define whether automatic anticipation is enabled for credit card payments',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiReceivableAnticipationPathIdRequestDTOSchema = {
    type: 'object',
    properties: {}
} as const;

export const ApiReceivableAnticipationGetResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'receivableAnticipation',
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique identifier of anticipation in Asaas',
            example: '9e7d8639-350f-45c0-8bc3-d4ddc5f4ebac',
            deprecated: false
        },
        installment: {
            type: 'string',
            description: 'Unique identifier of the installment to be anticipated',
            deprecated: false,
            example: null
        },
        payment: {
            type: 'string',
            description: 'Unique identifier of the payment to be anticipated.',
            example: 'pay_626366773834',
            deprecated: false
        },
        status: {
            '$ref': '#/components/schemas/ApiReceivableAnticipationGetResponseReceivableAnticipationStatus'
        },
        anticipationDate: {
            type: 'string',
            description: 'Anticipation request date',
            format: 'date',
            example: '2019-05-20',
            deprecated: false
        },
        dueDate: {
            type: 'string',
            description: 'Request due date',
            format: 'date',
            example: '2019-05-26',
            deprecated: false
        },
        requestDate: {
            type: 'string',
            description: 'Anticipation request date',
            format: 'date',
            example: '2019-05-14',
            deprecated: false
        },
        fee: {
            type: 'number',
            description: 'Anticipation fee',
            example: 2.33,
            deprecated: false
        },
        anticipationDays: {
            type: 'integer',
            description: 'Number of days that were anticipated',
            format: 'int32',
            example: 5,
            deprecated: false
        },
        netValue: {
            type: 'number',
            description: 'Net value discounted the anticipation fee',
            example: 73.68,
            deprecated: false
        },
        totalValue: {
            type: 'number',
            description: 'Total amount of the payment to be anticipated',
            example: 80,
            deprecated: false
        },
        value: {
            type: 'number',
            description: 'Anticipation value',
            example: 76.01,
            deprecated: false
        },
        denialObservation: {
            type: 'string',
            description: 'Reason for rejecting the anticipation payment',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiReceivableAnticipationGetResponseReceivableAnticipationStatusSchema = {
    type: 'string',
    description: 'Anticipation status',
    example: 'PENDING',
    deprecated: false,
    enum: ['PENDING', 'DENIED', 'CREDITED', 'DEBITED', 'CANCELLED', 'OVERDUE', 'SCHEDULED']
} as const;

export const ApiReceivableAnticipationSaveRequestDTOSchema = {
    type: 'object',
    properties: {
        installment: {
            type: 'string',
            description: 'ID of the installment to be anticipated',
            deprecated: false,
            example: null
        },
        payment: {
            type: 'string',
            description: 'ID of the payment to be anticipated',
            example: 'pay_626366773834',
            deprecated: false
        },
        documents: {
            '$ref': '#/components/schemas/File'
        }
    }
} as const;

export const ApiReceivableAnticipationListResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiReceivableAnticipationGetResponseDTO'
            }
        }
    }
} as const;

export const ApiReceivableAnticipationListRequestReceivableAnticipationStatusSchema = {
    type: 'string',
    description: 'Filter by status',
    example: 'PENDING',
    deprecated: false,
    enum: ['PENDING', 'DENIED', 'CREDITED', 'DEBITED', 'CANCELLED', 'OVERDUE', 'SCHEDULED']
} as const;

export const ApiReceivableAnticipationSimulateRequestDTOSchema = {
    type: 'object',
    properties: {
        installment: {
            type: 'string',
            description: 'ID of the installment to be anticipated',
            deprecated: false,
            example: null
        },
        payment: {
            type: 'string',
            description: 'ID of the payment to be anticipated',
            example: 'pay_626366773834',
            deprecated: false
        }
    }
} as const;

export const ApiReceivableAnticipationSimulateResponseDTOSchema = {
    type: 'object',
    properties: {
        installment: {
            type: 'string',
            description: 'Unique identifier of the installment to be anticipated',
            deprecated: false,
            example: null
        },
        payment: {
            type: 'string',
            description: 'Unique identifier of the payment to be anticipated',
            example: 'pay_626366773834',
            deprecated: false
        },
        anticipationDate: {
            type: 'string',
            description: 'Anticipation request date',
            format: 'date',
            example: '2019-05-20',
            deprecated: false
        },
        dueDate: {
            type: 'string',
            description: 'Request due date',
            format: 'date',
            example: '2019-05-26',
            deprecated: false
        },
        fee: {
            type: 'number',
            description: 'Anticipation fee',
            example: 2.33,
            deprecated: false
        },
        anticipationDays: {
            type: 'integer',
            description: 'Number of days that were anticipated',
            format: 'int32',
            example: 6,
            deprecated: false
        },
        netValue: {
            type: 'number',
            description: 'Net value discounted the anticipation fee',
            example: 73.68,
            deprecated: false
        },
        totalValue: {
            type: 'number',
            description: 'Total amount of the payment to be anticipated',
            example: 80,
            deprecated: false
        },
        value: {
            type: 'number',
            description: 'Anticipation value',
            example: 76.01,
            deprecated: false
        },
        isDocumentationRequired: {
            type: 'boolean',
            description: 'Determines the obligation to send electronic invoices or service provision contracts when requesting anticipation payment',
            example: false,
            deprecated: false
        }
    }
} as const;

export const ApiReceivableAnticipationLimitsResponseDTOSchema = {
    type: 'object',
    properties: {
        creditCard: {
            '$ref': '#/components/schemas/ApiReceivableAnticipationLimitsInfoResponseDTO'
        },
        bankSlip: {
            '$ref': '#/components/schemas/ApiReceivableAnticipationLimitsInfoResponseDTO'
        }
    }
} as const;

export const ApiReceivableAnticipationLimitsInfoResponseDTOSchema = {
    type: 'object',
    properties: {
        total: {
            type: 'number',
            description: 'Anticipation limit released on the account',
            example: 50000,
            deprecated: false
        },
        available: {
            type: 'number',
            description: 'Limit available to anticipate',
            example: 35360.7,
            deprecated: false
        }
    },
    description: 'Credit card anticipation limits',
    deprecated: false
} as const;

export const ApiSubscriptionGetInvoicesRequestInvoiceStatusSchema = {
    type: 'string',
    description: 'Filter by invoice status',
    example: 'SCHEDULED',
    deprecated: false,
    enum: ['SCHEDULED', 'WAITING_OVERDUE_PAYMENT', 'PENDING', 'SYNCHRONIZED', 'AUTHORIZED', 'PROCESSING_CANCELLATION', 'CANCELLED', 'CANCELLATION_DENIED', 'ERROR', 'NONE', 'CANCELED']
} as const;

export const ApiSubscriptionInvoiceConfigUpdateRequestDTOSchema = {
    type: 'object',
    properties: {
        deductions: {
            type: 'number',
            description: 'Deductions. Deductions do not change the total value of the invoice, but they do change the ISS calculation basis.',
            example: 55,
            deprecated: false
        },
        effectiveDatePeriod: {
            type: 'string',
            description: 'When the invoice will be issued',
            example: 'ON_PAYMENT_CONFIRMATION',
            deprecated: false,
            enum: ['ON_PAYMENT_CONFIRMATION', 'ON_PAYMENT_DUE_DATE', 'BEFORE_PAYMENT_DUE_DATE', 'ON_DUE_DATE_MONTH', 'ON_NEXT_MONTH']
        },
        receivedOnly: {
            type: 'boolean',
            description: 'Issue only for paid charges',
            deprecated: false,
            example: null
        },
        daysBeforeDueDate: {
            type: 'integer',
            description: 'Number of days before billing due date',
            format: 'int32',
            deprecated: false,
            example: null
        },
        observations: {
            type: 'string',
            description: 'Additional notes on the invoice',
            example: 'Regarding March work',
            deprecated: false
        },
        taxes: {
            '$ref': '#/components/schemas/ApiCustomerInvoiceTaxesDTO'
        }
    }
} as const;

export const ApiSubscriptionInvoiceConfigGetResponseDTOSchema = {
    type: 'object',
    properties: {
        municipalServiceId: {
            type: 'string',
            description: 'Unique municipal service identifier',
            deprecated: false,
            example: null
        },
        municipalServiceCode: {
            type: 'string',
            description: 'Municipal Service Code',
            example: '1.01',
            deprecated: false
        },
        municipalServiceName: {
            type: 'string',
            description: 'Name of municipal service',
            deprecated: false,
            example: null
        },
        deductions: {
            type: 'number',
            description: 'Deductions. Deductions do not change the total value of the invoice, but they do change the ISS calculation basis.',
            example: 55,
            deprecated: false
        },
        invoiceCreationPeriod: {
            type: 'string',
            description: 'When the invoice will be issued',
            example: 'ON_PAYMENT_CONFIRMATION',
            deprecated: false,
            enum: ['ON_PAYMENT_CONFIRMATION', 'ON_PAYMENT_DUE_DATE', 'BEFORE_PAYMENT_DUE_DATE', 'ON_DUE_DATE_MONTH', 'ON_NEXT_MONTH']
        },
        daysBeforeDueDate: {
            type: 'integer',
            description: 'Number of days before billing due date',
            format: 'int32',
            deprecated: false,
            example: null
        },
        receivedOnly: {
            type: 'boolean',
            description: 'Issue only for paid charges',
            deprecated: false,
            example: null
        },
        observations: {
            type: 'string',
            description: 'Additional notes on the invoice',
            example: 'Regarding March work',
            deprecated: false
        },
        taxes: {
            '$ref': '#/components/schemas/ApiCustomerInvoiceTaxesDTO'
        }
    }
} as const;

export const ApiSubscriptionDeleteInvoiceConfigResponseDTOSchema = {
    type: 'object',
    properties: {
        deleted: {
            type: 'boolean',
            description: 'Informs if configurations have been removed',
            example: true,
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique subscription identifier in Asaas',
            example: 'sub_VXJBYgP2u0eO',
            deprecated: false
        }
    }
} as const;

export const ApiSubscriptionPaymentBookResponseDTOSchema = {
    type: 'object',
    properties: {}
} as const;

export const ApiSubscriptionGetResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'subscription',
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique subscription identifier in Asaas',
            example: 'sub_VXJBYgP2u0eO',
            deprecated: false
        },
        dateCreated: {
            type: 'string',
            description: 'Subscription creation date',
            format: 'date',
            example: '2017-03-17',
            deprecated: false
        },
        customer: {
            type: 'string',
            description: 'Unique customer identifier',
            example: 'cus_0T1mdomVMi39',
            deprecated: false
        },
        paymentLink: {
            type: 'string',
            description: 'Unique identifier of the payments link to which the subscription belongs',
            deprecated: false,
            example: null
        },
        billingType: {
            '$ref': '#/components/schemas/ApiSubscriptionGetResponseBillingType'
        },
        cycle: {
            '$ref': '#/components/schemas/ApiSubscriptionGetResponseCycle'
        },
        value: {
            type: 'number',
            description: 'Subscription value',
            example: 19.9,
            deprecated: false
        },
        nextDueDate: {
            type: 'string',
            description: 'Due date of the next payment to be generated',
            format: 'date',
            example: '2017-06-15',
            deprecated: false
        },
        endDate: {
            type: 'string',
            description: 'Deadline for payments to be due',
            format: 'date',
            example: '2018-06-15',
            deprecated: false
        },
        description: {
            type: 'string',
            description: 'Subscription description',
            example: 'Pro Plan Subscription',
            deprecated: false
        },
        status: {
            '$ref': '#/components/schemas/ApiSubscriptionGetResponseSubscriptionStatus'
        },
        discount: {
            '$ref': '#/components/schemas/ApiPaymentDiscountDTO'
        },
        fine: {
            '$ref': '#/components/schemas/ApiPaymentFineResponseDTO'
        },
        interest: {
            '$ref': '#/components/schemas/ApiPaymentInterestResponseDTO'
        },
        deleted: {
            type: 'boolean',
            description: 'Informs if the subscription has been removed',
            example: false,
            deprecated: false
        },
        maxPayments: {
            type: 'integer',
            description: 'Maximum number of payments to be generated for this subscription',
            format: 'int32',
            example: 12,
            deprecated: false
        },
        externalReference: {
            type: 'string',
            description: 'Subscription identifier on your system',
            deprecated: false,
            example: null
        },
        split: {
            type: 'array',
            description: 'Split information',
            deprecated: false,
            items: {
                type: 'object',
                properties: {
                    walletId: {
                        type: 'string',
                        description: 'Asaas wallet identifier that will be transferred',
                        example: '7bafd95a-e783-4a62-9be1-23999af742c6',
                        deprecated: false
                    },
                    fixedValue: {
                        type: 'number',
                        description: 'Fixed amount to be transferred to the account when the payment is received',
                        example: 20.32,
                        deprecated: false
                    },
                    percentualValue: {
                        type: 'number',
                        description: 'Percentage of the net value of the charge to be transferred when received',
                        deprecated: false,
                        example: null
                    },
                    externalReference: {
                        type: 'string',
                        description: 'Split identifier in your system',
                        deprecated: false,
                        example: null
                    },
                    description: {
                        type: 'string',
                        description: 'Split description',
                        deprecated: false,
                        example: null
                    },
                    status: {
                        '$ref': '#/components/schemas/ApiSubscriptionSplitResponseSubscriptionSplitStatus'
                    },
                    disabledReason: {
                        '$ref': '#/components/schemas/ApiSubscriptionSplitResponseSubscriptionSplitDisabledReason'
                    }
                }
            }
        }
    }
} as const;

export const ApiSubscriptionGetResponseBillingTypeSchema = {
    type: 'string',
    description: 'Billing type',
    example: 'BOLETO',
    deprecated: false,
    enum: ['UNDEFINED', 'BOLETO', 'CREDIT_CARD', 'DEBIT_CARD', 'TRANSFER', 'DEPOSIT', 'PIX']
} as const;

export const ApiSubscriptionGetResponseCycleSchema = {
    type: 'string',
    description: 'Billing frequency',
    example: 'MONTHLY',
    deprecated: false,
    enum: ['WEEKLY', 'BIWEEKLY', 'MONTHLY', 'BIMONTHLY', 'QUARTERLY', 'SEMIANNUALLY', 'YEARLY']
} as const;

export const ApiSubscriptionGetResponseSubscriptionStatusSchema = {
    type: 'string',
    description: 'Subscription status',
    example: 'ACTIVE',
    deprecated: false,
    enum: ['ACTIVE', 'EXPIRED', 'INACTIVE']
} as const;

export const ApiSubscriptionSplitResponseDTOSchema = {
    type: 'object',
    properties: {
        walletId: {
            type: 'string',
            description: 'Asaas wallet identifier that will be transferred',
            example: '7bafd95a-e783-4a62-9be1-23999af742c6',
            deprecated: false
        },
        fixedValue: {
            type: 'number',
            description: 'Fixed amount to be transferred to the account when the payment is received',
            example: 20.32,
            deprecated: false
        },
        percentualValue: {
            type: 'number',
            description: 'Percentage of the net value of the charge to be transferred when received',
            deprecated: false,
            example: null
        },
        externalReference: {
            type: 'string',
            description: 'Split identifier in your system',
            deprecated: false,
            example: null
        },
        description: {
            type: 'string',
            description: 'Split description',
            deprecated: false,
            example: null
        },
        status: {
            '$ref': '#/components/schemas/ApiSubscriptionSplitResponseSubscriptionSplitStatus'
        },
        disabledReason: {
            '$ref': '#/components/schemas/ApiSubscriptionSplitResponseSubscriptionSplitDisabledReason'
        }
    }
} as const;

export const ApiSubscriptionSplitResponseSubscriptionSplitStatusSchema = {
    type: 'string',
    description: 'Subscription split status',
    example: 'ACTIVE',
    deprecated: false,
    enum: ['ACTIVE', 'DISABLED']
} as const;

export const ApiSubscriptionSplitResponseSubscriptionSplitDisabledReasonSchema = {
    type: 'string',
    description: 'Reason why subscription split was disabled',
    example: 'WALLET_UNABLE_TO_RECEIVE',
    deprecated: false,
    enum: ['WALLET_UNABLE_TO_RECEIVE', 'VALUE_DIVERGENCE']
} as const;

export const ApiSubscriptionSaveRequestDTOSchema = {
    required: ['customer', 'billingType', 'value', 'nextDueDate', 'cycle'],
    type: 'object',
    properties: {
        customer: {
            required: ['customer'],
            type: 'string',
            description: 'Unique customer identifier in Asaas',
            example: 'cus_0T1mdomVMi39',
            deprecated: false
        },
        billingType: {
            '$ref': '#/components/schemas/ApiSubscriptionSaveRequestBillingType'
        },
        value: {
            required: ['value'],
            type: 'number',
            description: 'Subscription value',
            example: 19.9,
            deprecated: false
        },
        nextDueDate: {
            required: ['nextDueDate'],
            type: 'string',
            description: 'First payment due',
            format: 'date',
            example: '2017-05-15',
            deprecated: false
        },
        discount: {
            '$ref': '#/components/schemas/ApiPaymentDiscountDTO'
        },
        interest: {
            '$ref': '#/components/schemas/ApiPaymentInterestRequestDTO'
        },
        fine: {
            '$ref': '#/components/schemas/ApiPaymentFineRequestDTO'
        },
        cycle: {
            '$ref': '#/components/schemas/ApiSubscriptionSaveRequestCycle'
        },
        description: {
            type: 'string',
            description: 'Subscription description (max. 500 characters)',
            example: 'Pro Plan Subscription',
            deprecated: false
        },
        endDate: {
            type: 'string',
            description: 'Deadline for payments to be due',
            format: 'date',
            deprecated: false,
            example: null
        },
        maxPayments: {
            type: 'integer',
            description: 'Maximum number of payments to be generated for this subscription',
            format: 'int32',
            deprecated: false,
            example: null
        },
        externalReference: {
            type: 'string',
            description: 'Subscription identifier on your system',
            deprecated: false,
            example: null
        },
        split: {
            type: 'array',
            description: 'Split information',
            deprecated: false,
            items: {
                required: ['walletId'],
                type: 'object',
                properties: {
                    walletId: {
                        required: ['walletId'],
                        type: 'string',
                        description: 'Asaas wallet identifier that will be transferred',
                        deprecated: false,
                        example: null
                    },
                    fixedValue: {
                        type: 'number',
                        description: 'Fixed amount to be transferred to the account when the payment is received',
                        deprecated: false,
                        example: null
                    },
                    percentualValue: {
                        type: 'number',
                        description: 'Percentage of the net value of the charge to be transferred when received',
                        deprecated: false,
                        example: null
                    },
                    externalReference: {
                        type: 'string',
                        description: 'Split identifier in your system',
                        deprecated: false,
                        example: null
                    },
                    description: {
                        type: 'string',
                        description: 'Split description',
                        deprecated: false,
                        example: null
                    }
                }
            }
        },
        callback: {
            '$ref': '#/components/schemas/ApiPaymentCallbackRequestDTO'
        }
    }
} as const;

export const ApiSubscriptionSaveRequestBillingTypeSchema = {
    required: ['billingType'],
    type: 'string',
    description: 'Billing type',
    example: 'BOLETO',
    deprecated: false,
    enum: ['UNDEFINED', 'BOLETO', 'CREDIT_CARD', 'PIX']
} as const;

export const ApiSubscriptionSaveRequestCycleSchema = {
    required: ['cycle'],
    type: 'string',
    description: 'Billing frequency',
    example: 'MONTHLY',
    deprecated: false,
    enum: ['WEEKLY', 'BIWEEKLY', 'MONTHLY', 'BIMONTHLY', 'QUARTERLY', 'SEMIANNUALLY', 'YEARLY']
} as const;

export const ApiSubscriptionSplitRequestDTOSchema = {
    required: ['walletId'],
    type: 'object',
    properties: {
        walletId: {
            required: ['walletId'],
            type: 'string',
            description: 'Asaas wallet identifier that will be transferred',
            deprecated: false,
            example: null
        },
        fixedValue: {
            type: 'number',
            description: 'Fixed amount to be transferred to the account when the payment is received',
            deprecated: false,
            example: null
        },
        percentualValue: {
            type: 'number',
            description: 'Percentage of the net value of the charge to be transferred when received',
            deprecated: false,
            example: null
        },
        externalReference: {
            type: 'string',
            description: 'Split identifier in your system',
            deprecated: false,
            example: null
        },
        description: {
            type: 'string',
            description: 'Split description',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiSubscriptionUpdateRequestDTOSchema = {
    type: 'object',
    properties: {
        billingType: {
            '$ref': '#/components/schemas/ApiSubscriptionUpdateRequestBillingType'
        },
        status: {
            '$ref': '#/components/schemas/ApiSubscriptionUpdateRequestSubscriptionStatus'
        },
        nextDueDate: {
            type: 'string',
            description: 'First payment due',
            format: 'date',
            example: '2017-05-15',
            deprecated: false
        },
        discount: {
            '$ref': '#/components/schemas/ApiPaymentDiscountDTO'
        },
        interest: {
            '$ref': '#/components/schemas/ApiPaymentInterestRequestDTO'
        },
        fine: {
            '$ref': '#/components/schemas/ApiPaymentFineRequestDTO'
        },
        cycle: {
            '$ref': '#/components/schemas/ApiSubscriptionUpdateRequestCycle'
        },
        description: {
            type: 'string',
            description: 'Subscription description (max. 500 characters)',
            example: 'Pro Plan Subscription',
            deprecated: false
        },
        endDate: {
            type: 'string',
            description: 'Deadline for payments to be due',
            format: 'date',
            deprecated: false,
            example: null
        },
        updatePendingPayments: {
            type: 'boolean',
            description: 'true to update the possible properties of already existing pending payments',
            example: true,
            deprecated: false
        },
        externalReference: {
            type: 'string',
            description: 'Subscription identifier on your system',
            deprecated: false,
            example: null
        },
        split: {
            type: 'array',
            description: 'Split information',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiSubscriptionSplitRequestDTO'
            }
        },
        callback: {
            '$ref': '#/components/schemas/ApiPaymentCallbackRequestDTO'
        }
    }
} as const;

export const ApiSubscriptionUpdateRequestBillingTypeSchema = {
    type: 'string',
    description: 'Billing type',
    example: 'BOLETO',
    deprecated: false,
    enum: ['UNDEFINED', 'BOLETO', 'CREDIT_CARD', 'PIX']
} as const;

export const ApiSubscriptionUpdateRequestSubscriptionStatusSchema = {
    type: 'string',
    description: 'Subscription status',
    example: 'ACTIVE',
    deprecated: false,
    enum: ['ACTIVE', 'INACTIVE']
} as const;

export const ApiSubscriptionUpdateRequestCycleSchema = {
    type: 'string',
    description: 'Billing frequency',
    example: 'MONTHLY',
    deprecated: false,
    enum: ['WEEKLY', 'BIWEEKLY', 'MONTHLY', 'BIMONTHLY', 'QUARTERLY', 'SEMIANNUALLY', 'YEARLY']
} as const;

export const ApiSubscriptionConfigureInvoiceRequestDTOSchema = {
    type: 'object',
    properties: {
        municipalServiceId: {
            type: 'string',
            description: 'Unique municipal service identifier',
            deprecated: false,
            example: null
        },
        municipalServiceCode: {
            type: 'string',
            description: 'Municipal Service Code',
            example: '1.01',
            deprecated: false
        },
        municipalServiceName: {
            type: 'string',
            description: 'Name of municipal service',
            deprecated: false,
            example: null
        },
        updatePayment: {
            type: 'boolean',
            description: 'Update the Payment amount with the invoice taxes already deducted.',
            example: false,
            deprecated: false
        },
        deductions: {
            type: 'number',
            description: 'Deductions. Deductions do not change the total value of the invoice, but they do change the ISS calculation basis.',
            example: 55,
            deprecated: false
        },
        effectiveDatePeriod: {
            type: 'string',
            description: 'When the invoice will be issued',
            example: 'ON_PAYMENT_CONFIRMATION',
            deprecated: false,
            enum: ['ON_PAYMENT_CONFIRMATION', 'ON_PAYMENT_DUE_DATE', 'BEFORE_PAYMENT_DUE_DATE', 'ON_DUE_DATE_MONTH', 'ON_NEXT_MONTH']
        },
        receivedOnly: {
            type: 'boolean',
            description: 'Issue only for paid charges',
            deprecated: false,
            example: null
        },
        daysBeforeDueDate: {
            type: 'integer',
            description: 'Number of days before billing due date',
            format: 'int32',
            deprecated: false,
            example: null
        },
        observations: {
            type: 'string',
            description: 'Additional notes on the invoice',
            example: 'Regarding March work',
            deprecated: false
        },
        taxes: {
            '$ref': '#/components/schemas/ApiCustomerInvoiceTaxesDTO'
        }
    }
} as const;

export const ApiSubscriptionListResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiSubscriptionGetResponseDTO'
            }
        }
    }
} as const;

export const ApiSubscriptionListRequestBillingTypeSchema = {
    type: 'string',
    description: 'Filter by billing type',
    example: 'UNDEFINED',
    deprecated: false,
    enum: ['UNDEFINED', 'BOLETO', 'CREDIT_CARD', 'DEBIT_CARD', 'TRANSFER', 'DEPOSIT', 'PIX']
} as const;

export const ApiSubscriptionListRequestSubscriptionStatusSchema = {
    type: 'string',
    description: 'Filter by status',
    example: 'ACTIVE',
    deprecated: false,
    enum: ['ACTIVE', 'EXPIRED', 'INACTIVE']
} as const;

export const ApiSubscriptionDeleteResponseDTOSchema = {
    type: 'object',
    properties: {
        deleted: {
            type: 'boolean',
            description: 'Informs if the subscription has been removed',
            example: true,
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique subscription identifier in Asaas',
            example: 'sub_VXJBYgP2u0eO',
            deprecated: false
        }
    }
} as const;

export const ApiTransferGetResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'transfer',
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique transfer identifier in Asaas',
            example: '777eb7c8-b1a2-4356-8fd8-a1b0644b5282',
            deprecated: false
        },
        type: {
            type: 'string',
            description: 'Type of transfer',
            example: 'BANK_ACCOUNT',
            deprecated: false,
            enum: ['PIX', 'TED', 'INTERNAL']
        },
        dateCreated: {
            type: 'string',
            description: 'Transfer request date',
            format: 'date',
            example: '2019-05-02',
            deprecated: false
        },
        value: {
            type: 'number',
            description: 'Transfer amount',
            example: 1000,
            deprecated: false
        },
        netValue: {
            type: 'number',
            description: 'Net value minus transfer fee',
            example: 0,
            deprecated: false
        },
        status: {
            '$ref': '#/components/schemas/ApiTransferGetResponseTransferStatus'
        },
        transferFee: {
            type: 'number',
            description: 'Transfer rate',
            example: 0,
            deprecated: false
        },
        effectiveDate: {
            type: 'string',
            description: 'Effective date',
            format: 'date',
            example: '2019-05-02',
            deprecated: false
        },
        scheduleDate: {
            type: 'string',
            description: 'Schedule date',
            format: 'date',
            example: '2019-05-02',
            deprecated: false
        },
        endToEndIdentifier: {
            type: 'string',
            description: 'Unique identifier of the Pix transaction at the Central Bank',
            deprecated: false,
            example: null
        },
        authorized: {
            type: 'boolean',
            description: `\`false\` when awaiting authorization via SMS Token`,
            example: true,
            deprecated: false
        },
        failReason: {
            type: 'string',
            description: 'Reason for transfer failure',
            deprecated: false,
            example: null
        },
        externalReference: {
            type: 'string',
            description: 'Transfer identifier in your system',
            deprecated: false,
            example: null
        },
        transactionReceiptUrl: {
            type: 'string',
            description: 'Proof of transfer will be available after the transfer is confirmed',
            deprecated: false,
            example: null
        },
        operationType: {
            '$ref': '#/components/schemas/ApiTransferGetResponseTransferType'
        },
        description: {
            type: 'string',
            description: 'Transfer description',
            deprecated: false,
            example: null
        },
        recurring: {
            type: 'string',
            description: 'Unique recurrence identifier in Asaas',
            deprecated: false,
            example: null
        },
        bankAccount: {
            '$ref': '#/components/schemas/ApiTransferBankAccountGetResponseDTO'
        }
    }
} as const;

export const ApiTransferGetResponseTransferStatusSchema = {
    type: 'string',
    description: 'Transfer status',
    example: 'PENDING',
    deprecated: false,
    enum: ['PENDING', 'BANK_PROCESSING', 'DONE', 'CANCELLED', 'FAILED']
} as const;

export const ApiTransferGetResponseTransferTypeSchema = {
    type: 'string',
    description: 'Transfer method',
    example: 'TED',
    deprecated: false,
    enum: ['PIX', 'TED', 'INTERNAL']
} as const;

export const ApiTransferBankAccountGetResponseDTOSchema = {
    type: 'object',
    properties: {
        bank: {
            '$ref': '#/components/schemas/ApiTransferBankGetResponseDTO'
        },
        accountName: {
            type: 'string',
            description: 'Name of bank account owner',
            example: 'Banco do Brasil account',
            deprecated: false
        },
        ownerName: {
            type: 'string',
            description: 'Name of bank account owner',
            example: 'John Doe',
            deprecated: false
        },
        cpfCnpj: {
            type: 'string',
            description: 'CPF or CNPJ of the bank account owner',
            example: '***.143.689-**',
            deprecated: false
        },
        agency: {
            type: 'string',
            description: 'Non-digit agency number',
            example: '1263',
            deprecated: false
        },
        agencyDigit: {
            type: 'string',
            description: 'Agency digit',
            example: '3',
            deprecated: false
        },
        account: {
            type: 'string',
            description: 'Non-digit bank account number',
            example: '9999991',
            deprecated: false
        },
        accountDigit: {
            type: 'string',
            description: 'Bank account digit',
            example: '1',
            deprecated: false
        },
        pixAddressKey: {
            type: 'string',
            description: 'Pix key address',
            deprecated: false,
            example: null
        }
    },
    description: 'Bank account details',
    deprecated: false
} as const;

export const ApiTransferBankGetResponseDTOSchema = {
    type: 'object',
    properties: {
        ispb: {
            type: 'string',
            description: 'Identifier in the Brazilian Payment System',
            deprecated: false,
            example: null
        },
        code: {
            type: 'string',
            description: 'Bank clearing code in the banking system',
            example: '001',
            deprecated: false
        },
        name: {
            type: 'string',
            description: 'Bank name',
            example: 'Banco do Brasil',
            deprecated: false
        }
    },
    description: 'Bank account name',
    deprecated: false
} as const;

export const ApiTransferSaveRequestDTOSchema = {
    required: ['value'],
    type: 'object',
    properties: {
        value: {
            required: ['value'],
            type: 'number',
            description: 'Amount to be transferred',
            example: 1000,
            deprecated: false
        },
        bankAccount: {
            '$ref': '#/components/schemas/ApiTransferBankAccountSaveRequestDTO'
        },
        operationType: {
            '$ref': '#/components/schemas/ApiTransferSaveRequestTransferType'
        },
        pixAddressKey: {
            type: 'string',
            description: 'Enter the Pix key if it is a transfer to a Pix key',
            deprecated: false,
            example: null
        },
        pixAddressKeyType: {
            '$ref': '#/components/schemas/ApiTransferSaveRequestPixAddressKeyType'
        },
        description: {
            type: 'string',
            description: 'Transfers via Pix allow description',
            example: 'Barbecue paid via Pix scheduled',
            deprecated: false
        },
        scheduleDate: {
            type: 'string',
            description: 'For scheduled transfers, if not informed, payment is instantaneous',
            format: 'date',
            example: '2018-01-26',
            deprecated: false
        },
        externalReference: {
            type: 'string',
            description: 'Transfer identifier in your system',
            deprecated: false,
            example: null
        },
        recurring: {
            '$ref': '#/components/schemas/ApiTransferRecurringSaveRequestDTO'
        }
    }
} as const;

export const ApiTransferBankAccountSaveRequestDTOSchema = {
    required: ['ownerName', 'cpfCnpj', 'agency', 'account', 'accountDigit'],
    type: 'object',
    properties: {
        bank: {
            '$ref': '#/components/schemas/ApiTransferBankSaveRequestDTO'
        },
        accountName: {
            type: 'string',
            description: 'Bank account name',
            example: 'Bradesco account',
            deprecated: false
        },
        ownerName: {
            required: ['ownerName'],
            type: 'string',
            description: 'Name of bank account owner',
            example: 'John Doe',
            deprecated: false
        },
        ownerBirthDate: {
            type: 'string',
            description: "Account owner's date of birth. Only when the bank account does not belong to the same CPF or CNPJ as the Asaas account.",
            format: 'date',
            example: '1995-04-12',
            deprecated: false
        },
        cpfCnpj: {
            required: ['cpfCnpj'],
            type: 'string',
            description: 'CPF or CNPJ of the bank account owner',
            example: '52233424611',
            deprecated: false
        },
        agency: {
            required: ['agency'],
            type: 'string',
            description: 'Non-digit agency number',
            example: '1263',
            deprecated: false
        },
        account: {
            required: ['account'],
            type: 'string',
            description: 'Non-digit bank account number',
            example: '9999991',
            deprecated: false
        },
        accountDigit: {
            required: ['accountDigit'],
            type: 'string',
            description: 'Bank account digit',
            example: '1',
            deprecated: false
        },
        bankAccountType: {
            '$ref': '#/components/schemas/ApiTransferBankAccountSaveRequestBankAccountType'
        },
        ispb: {
            type: 'string',
            description: 'Identifier in the Brazilian Payment System',
            example: '60746948',
            deprecated: false
        }
    },
    description: 'Enter your account details if it is a transfer to a bank account',
    deprecated: false
} as const;

export const ApiTransferBankSaveRequestDTOSchema = {
    required: ['code'],
    type: 'object',
    properties: {
        code: {
            required: ['code'],
            type: 'string',
            description: 'Bank clearing code in the banking system',
            example: '237',
            deprecated: false
        }
    },
    description: 'Details of the bank account to which the transfer will be made',
    deprecated: false
} as const;

export const ApiTransferBankAccountSaveRequestBankAccountTypeSchema = {
    type: 'string',
    description: 'Account type',
    example: 'CONTA_CORRENTE',
    deprecated: false,
    enum: ['CONTA_CORRENTE', 'CONTA_POUPANCA']
} as const;

export const ApiTransferSaveRequestTransferTypeSchema = {
    type: 'string',
    description: 'Transfer modality. If not informed and the receiving institution is a Pix participant, the transfer is via Pix. Otherwise via TED.',
    example: 'PIX',
    deprecated: false,
    enum: ['PIX', 'TED']
} as const;

export const ApiTransferSaveRequestPixAddressKeyTypeSchema = {
    type: 'string',
    description: 'Enter the type of key if it is a transfer to a Pix key',
    example: 'EVP',
    deprecated: false,
    enum: ['CPF', 'CNPJ', 'EMAIL', 'PHONE', 'EVP']
} as const;

export const ApiTransferRecurringSaveRequestDTOSchema = {
    type: 'object',
    properties: {
        frequency: {
            '$ref': '#/components/schemas/ApiTransferRecurringSaveRequestRecurringCheckoutScheduleFrequency'
        },
        quantity: {
            maximum: 52,
            minimum: 1,
            type: 'integer',
            description: `Number of repetitions. This transfer will be included as the first transaction of the recurrence.
 For the \`WEEKLY\` frequency, the maximum accepted is: \`52\`
 For the \`MONTHLY\` frequency, the maximum accepted is: \`12\``,
            format: 'int32',
            example: 3,
            deprecated: false
        }
    },
    description: 'Recurrence information. Only for Pix transfers',
    deprecated: false
} as const;

export const ApiTransferRecurringSaveRequestRecurringCheckoutScheduleFrequencySchema = {
    type: 'string',
    description: 'Frequency',
    example: 'MONTHLY',
    deprecated: false,
    enum: ['WEEKLY', 'MONTHLY']
} as const;

export const ApiTransferListResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiTransferGetResponseDTO'
            }
        }
    }
} as const;

export const ApiWalletShowResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                type: 'object',
                properties: {
                    object: {
                        type: 'string',
                        description: 'Object type',
                        example: 'wallet',
                        deprecated: false
                    },
                    id: {
                        type: 'string',
                        description: 'Unique wallet identifier in Asaas',
                        example: '0000c712-0a0b-a0b0-0000-031e7ac51a2',
                        deprecated: false
                    }
                }
            }
        }
    }
} as const;

export const ApiWalletGetResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'wallet',
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique wallet identifier in Asaas',
            example: '0000c712-0a0b-a0b0-0000-031e7ac51a2',
            deprecated: false
        }
    }
} as const;

export const ApiPaymentLeanGetResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'payment',
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique payment identifier in Asaas',
            example: 'pay_080225913252',
            deprecated: false
        },
        dateCreated: {
            type: 'string',
            description: 'Payment creation date',
            format: 'date',
            example: '2017-03-10',
            deprecated: false
        },
        customerId: {
            type: 'string',
            description: 'Unique identifier of the customer to whom the payment belongs',
            example: 'cus_G7Dvo4iphUNk',
            deprecated: false
        },
        subscriptionId: {
            type: 'string',
            description: 'Unique subscription identifier (when recurring billing)',
            deprecated: false,
            example: null
        },
        installmentId: {
            type: 'string',
            description: 'Unique installment identifier (when billing in installments)',
            deprecated: false,
            example: null
        },
        paymentLinkId: {
            type: 'string',
            description: 'Unique identifier of the payments link to which the payment belongs',
            deprecated: false,
            example: null
        },
        value: {
            type: 'number',
            description: 'Payment amount',
            example: 129.9,
            deprecated: false
        },
        netValue: {
            type: 'number',
            description: 'Net value of the charge after discounting the Asaas fee',
            example: 124.9,
            deprecated: false
        },
        originalValue: {
            type: 'number',
            description: 'Original amount of charge (filled when paid with interest and fine)',
            deprecated: false,
            example: null
        },
        interestValue: {
            type: 'number',
            description: 'Calculated amount of interest and fine that must be paid after the charge is due',
            deprecated: false,
            example: null
        },
        description: {
            type: 'string',
            description: 'Description of the payment',
            example: 'Pedido 056984',
            deprecated: false
        },
        billingType: {
            '$ref': '#/components/schemas/ApiPaymentLeanGetResponseBillingType'
        },
        canBePaidAfterDueDate: {
            type: 'boolean',
            description: 'Informs whether the charge can be paid after the due date (Only for bank slip)',
            example: true,
            deprecated: false
        },
        confirmedDate: {
            type: 'string',
            description: 'Billing confirmation date',
            format: 'date',
            example: '2017-03-10',
            deprecated: false
        },
        pixTransactionId: {
            type: 'string',
            description: 'Unique identifier of the Pix transaction to which the payment belongs',
            deprecated: false,
            example: null
        },
        status: {
            '$ref': '#/components/schemas/ApiPaymentLeanGetResponsePaymentStatus'
        },
        dueDate: {
            type: 'string',
            description: 'Payment due date',
            format: 'date',
            example: '2017-06-10',
            deprecated: false
        },
        originalDueDate: {
            type: 'string',
            description: 'Original due date upon creation of the payment',
            format: 'date',
            example: '2017-06-10',
            deprecated: false
        },
        paymentDate: {
            type: 'string',
            description: 'Payment date on Asaas',
            format: 'date',
            deprecated: false,
            example: null
        },
        customerPaymentDate: {
            type: 'string',
            description: 'Date on which the customer paid the bank slip',
            format: 'date',
            deprecated: false,
            example: null
        },
        installmentNumber: {
            type: 'integer',
            description: 'Parcel number',
            format: 'int32',
            deprecated: false,
            example: null
        },
        externalReference: {
            type: 'string',
            description: 'Free search field',
            example: '056984',
            deprecated: false
        },
        deleted: {
            type: 'boolean',
            description: 'Determines if the payment has been removed',
            example: false,
            deprecated: false
        },
        anticipated: {
            type: 'boolean',
            description: 'Defines whether the charge was anticipated or is in the process of being anticipated',
            example: false,
            deprecated: false
        },
        anticipable: {
            type: 'boolean',
            description: 'Determines whether the charge is anticipated',
            example: false,
            deprecated: false
        },
        creditDate: {
            type: 'string',
            description: 'Billing Credit date',
            example: '2017-03-10',
            deprecated: false
        },
        transactionReceiptUrl: {
            type: 'string',
            description: 'URL of proof of confirmation, receipt, reversal or removal',
            deprecated: false,
            example: null
        },
        duplicatedPaymentId: {
            type: 'string',
            description: 'Duplicate billing identifier (if true)',
            deprecated: false,
            example: null
        },
        discount: {
            '$ref': '#/components/schemas/ApiPaymentDiscountDTO'
        },
        fine: {
            '$ref': '#/components/schemas/ApiPaymentFineResponseDTO'
        },
        interest: {
            '$ref': '#/components/schemas/ApiPaymentInterestResponseDTO'
        },
        postalService: {
            type: 'boolean',
            description: 'Define whether the payment will be sent via post',
            example: false,
            deprecated: false
        }
    }
} as const;

export const ApiPaymentLeanGetResponseBillingTypeSchema = {
    type: 'string',
    description: 'Payment billing type',
    example: 'BOLETO',
    deprecated: false,
    enum: ['UNDEFINED', 'BOLETO', 'CREDIT_CARD', 'DEBIT_CARD', 'TRANSFER', 'DEPOSIT', 'PIX']
} as const;

export const ApiPaymentLeanGetResponsePaymentStatusSchema = {
    type: 'string',
    description: 'Payment status',
    example: 'PENDING',
    deprecated: false,
    enum: ['PENDING', 'RECEIVED', 'CONFIRMED', 'OVERDUE', 'REFUNDED', 'RECEIVED_IN_CASH', 'REFUND_REQUESTED', 'REFUND_IN_PROGRESS', 'CHARGEBACK_REQUESTED', 'CHARGEBACK_DISPUTE', 'AWAITING_CHARGEBACK_REVERSAL', 'DUNNING_REQUESTED', 'DUNNING_RECEIVED', 'AWAITING_RISK_ANALYSIS']
} as const;

export const ApiPaymentLeanListResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiPaymentLeanGetResponseDTO'
            }
        }
    }
} as const;

export const ApiPixAddressKeyGetResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique Pix key identifier in Asaas',
            example: 'a33047b1-fb19-4b68-9373-a7ba8a8162aa',
            deprecated: false
        },
        key: {
            type: 'string',
            description: 'Key value',
            example: 'b6295ee1-f054-47d1-9e90-ee57b74f60d9',
            deprecated: false
        },
        type: {
            '$ref': '#/components/schemas/ApiPixAddressKeyGetResponsePixAddressKeyType'
        },
        status: {
            '$ref': '#/components/schemas/ApiPixAddressKeyGetResponsePixAddressKeyStatus'
        },
        dateCreated: {
            type: 'string',
            description: 'Key creation date',
            format: 'date-time',
            example: '2022-02-07 17:17:48',
            deprecated: false
        },
        canBeDeleted: {
            type: 'boolean',
            description: 'Determines whether the key can be deleted',
            example: true,
            deprecated: false
        },
        cannotBeDeletedReason: {
            type: 'string',
            description: 'Reason it cannot be removed',
            deprecated: false,
            example: null
        },
        qrCode: {
            '$ref': '#/components/schemas/ApiPixAddressKeyQrCodeGetResponseDTO'
        }
    }
} as const;

export const ApiPixAddressKeyGetResponsePixAddressKeyTypeSchema = {
    type: 'string',
    description: 'Pix key type',
    example: 'EVP',
    deprecated: false,
    enum: ['EVP']
} as const;

export const ApiPixAddressKeyGetResponsePixAddressKeyStatusSchema = {
    type: 'string',
    description: 'Key status',
    example: 'ACTIVE',
    deprecated: false,
    enum: ['AWAITING_ACTIVATION', 'ACTIVE', 'AWAITING_DELETION', 'AWAITING_ACCOUNT_DELETION', 'DELETED', 'ERROR']
} as const;

export const ApiPixAddressKeyQrCodeGetResponseDTOSchema = {
    type: 'object',
    properties: {
        encodedImage: {
            type: 'string',
            description: 'QrCode image in base64',
            example: 'QRCODE IMAGE IN BASE64',
            deprecated: false
        },
        payload: {
            type: 'string',
            description: 'Copy and Paste the QrCode',
            example: '00020126580014br.gov.bcb.pix0136a9fe43bc-164d-44d1-91c2-2f9b4d6956e95204000053039865802BR5925Joao da Silva6009Joinville62290525JOAOSILVA00000055ASA6304E62B',
            deprecated: false
        }
    },
    description: 'Pix key QRCode',
    deprecated: false
} as const;

export const ApiPixAddressKeySaveRequestDTOSchema = {
    required: ['type'],
    type: 'object',
    properties: {
        type: {
            '$ref': '#/components/schemas/ApiPixAddressKeySaveRequestPixAddressKeyType'
        }
    }
} as const;

export const ApiPixAddressKeySaveRequestPixAddressKeyTypeSchema = {
    required: ['type'],
    type: 'string',
    description: 'Pix key type',
    example: 'EVP',
    deprecated: false,
    enum: ['EVP']
} as const;

export const ApiPixAddressKeyListResponseDTOSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiPixAddressKeyGetResponseDTO'
            }
        }
    }
} as const;

export const ApiPixAddressKeyListRequestPixAddressKeyStatusSchema = {
    type: 'string',
    description: 'Filter by current key status',
    example: 'AWAITING_ACTIVATION',
    deprecated: false,
    enum: ['AWAITING_ACTIVATION', 'ACTIVE', 'AWAITING_DELETION', 'AWAITING_ACCOUNT_DELETION', 'DELETED', 'ERROR']
} as const;

export const ApiPixQrCodeSaveRequestDTOSchema = {
    type: 'object',
    properties: {
        addressKey: {
            type: 'string',
            description: 'Key that will receive QrCode payments',
            example: 'b6295ee1-f054-47d1-9e90-ee57b74f60d9',
            deprecated: false
        },
        description: {
            type: 'string',
            description: 'QrCode Description',
            example: 'Barbecue',
            deprecated: false
        },
        value: {
            type: 'number',
            description: 'Value of the QrCode, if not informed, the payer can choose the value',
            example: 50,
            deprecated: false
        },
        format: {
            type: 'string',
            description: 'QrCode Format',
            example: 'ALL',
            deprecated: false,
            enum: ['ALL', 'IMAGE', 'PAYLOAD']
        },
        expirationDate: {
            type: 'string',
            description: 'QrCode expiration date/time, after this date all payments will be refused.',
            format: 'date-time',
            example: '2023-05-05 14:20:50',
            deprecated: false
        },
        expirationSeconds: {
            type: 'integer',
            description: 'Determines the expiration date in seconds.',
            format: 'int32',
            deprecated: false,
            example: null
        },
        allowsMultiplePayments: {
            type: 'boolean',
            description: 'Defines whether the QrCode can be paid multiple times, if not entered the default value is true.',
            example: true,
            deprecated: false
        },
        externalReference: {
            maxLength: 100,
            type: 'string',
            description: 'Free search field',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiPixQrCodeSaveResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'qrCode image in base64',
            example: '9bea9bcd126b45c7939960f577be84d6',
            deprecated: false
        },
        encodedImage: {
            type: 'string',
            description: 'QrCode identifier',
            example: 'QRCODE IMAGE IN BASE64',
            deprecated: false
        },
        payload: {
            type: 'string',
            description: 'Copy and Paste the QrCode',
            example: '00020126580014br.gov.bcb.pix0136a9fe43bc-164d-44d1-91c2-2f9b4d6956e95204000053039865802BR5925Churrasco6009Joinville62290525JOAOSILVA00000055ASA6304E62B',
            deprecated: false
        },
        allowsMultiplePayments: {
            type: 'boolean',
            description: 'Indicates whether multiple payments are allowed',
            example: true,
            deprecated: false
        },
        expirationDate: {
            type: 'string',
            description: 'QrCode expiration date/time, after this date all payments will be refused',
            format: 'date-time',
            example: '2023-05-05 14:20:5',
            deprecated: false
        },
        externalReference: {
            type: 'string',
            description: 'Free search field',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiPixQrCodeDecodeRequestDTOSchema = {
    required: ['payload'],
    type: 'object',
    properties: {
        payload: {
            required: ['payload'],
            type: 'string',
            description: 'QRCode payload',
            example: '00020101021226730014br.gov.bcb.pix2551pix-h.asaas.com/pixqrcode/cobv/pay_76575613967995145204000053039865802BR5905ASAAS6009Joinville61088922827162070503***63045E7A',
            deprecated: false
        },
        changeValue: {
            type: 'number',
            description: 'Change amount (for QRCode Change)',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiPixQrCodeDecodeResponseDTOSchema = {
    type: 'object',
    properties: {
        payload: {
            type: 'string',
            description: 'Copy and Paste of the QRCode',
            example: '00020101021226730014br.gov.bcb.pix2551pix-h.asaas.com/pixqrcode/cobv/pay_76575613967995145204000053039865802BR5905ASAAS6009Joinville61088922827162070503***63045E7A',
            deprecated: false
        },
        type: {
            '$ref': '#/components/schemas/ApiPixQrCodeDecodeResponsePixQrCodeType'
        },
        transactionOriginType: {
            '$ref': '#/components/schemas/ApiPixQrCodeDecodeResponsePixTransactionOriginType'
        },
        pixKey: {
            type: 'string',
            description: 'Pix key used',
            example: 'f9560206-807f-4273-ad72-d9ba9ddd867b',
            deprecated: false
        },
        conciliationIdentifier: {
            type: 'string',
            description: 'Unique Pix reconciliation identifier with Asaas',
            example: 'dcabae5bbfb6nffbb87c69388365648',
            deprecated: false
        },
        endToEndIdentifier: {
            type: 'string',
            description: 'Unique identifier of the Pix transaction at the Banco Central',
            example: 'E238472938479238461974982374923',
            deprecated: false
        },
        dueDate: {
            type: 'string',
            description: 'Due date',
            format: 'date',
            example: '2030-02-05',
            deprecated: false
        },
        expirationDate: {
            type: 'string',
            description: 'Expiration date',
            format: 'date-time',
            example: '030-02-10 11:00:00',
            deprecated: false
        },
        finality: {
            '$ref': '#/components/schemas/ApiPixQrCodeDecodeResponsePixTransactionCashValueFinality'
        },
        value: {
            type: 'number',
            description: 'QRCode Value',
            example: 100,
            deprecated: false
        },
        changeValue: {
            type: 'number',
            description: 'Change value',
            example: 2,
            deprecated: false
        },
        interest: {
            type: 'number',
            description: 'Interest value',
            example: 1,
            deprecated: false
        },
        fine: {
            type: 'number',
            description: 'Fine value',
            example: 3,
            deprecated: false
        },
        discount: {
            type: 'number',
            description: 'Discount value',
            example: 5,
            deprecated: false
        },
        totalValue: {
            type: 'number',
            description: 'Total amount with fine, interest and discount applied',
            example: 99,
            deprecated: false
        },
        canBePaidWithDifferentValue: {
            type: 'boolean',
            description: 'Informs if the QRCode can be paid with another amount',
            example: true,
            deprecated: false
        },
        canBeModifyChangeValue: {
            type: 'boolean',
            description: 'Informs whether the change can be paid with another amount',
            example: false,
            deprecated: false
        },
        receiver: {
            '$ref': '#/components/schemas/ApiPixQrCodeDecodeReceiverDTO'
        },
        payer: {
            '$ref': '#/components/schemas/ApiPixTransactionQrCodePayerResponseDTO'
        },
        description: {
            type: 'string',
            description: 'Description provided during the creation of the QRCode',
            deprecated: false,
            example: null
        },
        canBePaid: {
            type: 'boolean',
            description: 'Informs if the QRCode can be paid',
            example: true,
            deprecated: false
        },
        cannotBePaidReason: {
            type: 'string',
            description: 'Informs why QRCode cannot be paid',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiPixQrCodeDecodeResponsePixQrCodeTypeSchema = {
    type: 'string',
    description: 'QRCode Type',
    example: 'DYNAMIC',
    deprecated: false,
    enum: ['STATIC', 'DYNAMIC', 'DYNAMIC_WITH_ASAAS_ADDRESS_KEY']
} as const;

export const ApiPixQrCodeDecodeResponsePixTransactionOriginTypeSchema = {
    type: 'string',
    description: 'Transaction origin',
    example: 'DYNAMIC_QRCODE',
    deprecated: false,
    enum: ['MANUAL', 'ADDRESS_KEY', 'STATIC_QRCODE', 'DYNAMIC_QRCODE', 'PAYMENT_INITIATION_SERVICE']
} as const;

export const ApiPixQrCodeDecodeResponsePixTransactionCashValueFinalitySchema = {
    type: 'string',
    description: 'Used to indicate whether it is a Withdrawal or Change',
    example: 'CHANGE',
    deprecated: false,
    enum: ['WITHDRAWAL', 'CHANGE']
} as const;

export const ApiPixQrCodeDecodeReceiverDTOSchema = {
    type: 'object',
    properties: {
        ispb: {
            type: 'string',
            description: 'Financial institution code',
            deprecated: false,
            example: null
        },
        ispbName: {
            type: 'string',
            description: 'Name of the financial institution',
            deprecated: false,
            example: null
        },
        name: {
            type: 'string',
            description: 'Receiver name',
            deprecated: false,
            example: null
        },
        tradingName: {
            type: 'string',
            description: "Receiver's trade name",
            deprecated: false,
            example: null
        },
        cpfCnpj: {
            type: 'string',
            description: 'CPF or CNPJ of the receiver',
            deprecated: false,
            example: null
        },
        personType: {
            '$ref': '#/components/schemas/ApiPixQrCodeDecodeReceiverPersonType'
        },
        accountType: {
            '$ref': '#/components/schemas/ApiPixQrCodeDecodeReceiverPixAccountType'
        }
    },
    description: 'Information about the receiver',
    deprecated: false
} as const;

export const ApiPixQrCodeDecodeReceiverPersonTypeSchema = {
    type: 'string',
    description: 'Person type',
    example: 'JURIDICA',
    deprecated: false,
    enum: ['JURIDICA', 'FISICA']
} as const;

export const ApiPixQrCodeDecodeReceiverPixAccountTypeSchema = {
    type: 'string',
    description: 'Receiver account type',
    example: 'CHECKING_ACCOUNT',
    deprecated: false,
    enum: ['CHECKING_ACCOUNT', 'SALARY_ACCOUNT', 'INVESTIMENT_ACCOUNT', 'PAYMENT_ACCOUNT']
} as const;

export const ApiPixTransactionQrCodePayerResponseDTOSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: "Payer's name",
            example: 'Elon Musk',
            deprecated: false
        },
        cpfCnpj: {
            type: 'string',
            description: 'CPF or CNPJ of the payer',
            example: '***.456.789-**',
            deprecated: false
        }
    },
    description: 'Information about the payer',
    deprecated: false
} as const;

export const ApiPixQrCodeDeleteResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'QR Code identifier',
            example: 'ASAAS00000000000000383ASA',
            deprecated: false
        },
        deleted: {
            type: 'boolean',
            description: 'Indicates whether the QR Code has been removed',
            example: true,
            deprecated: false
        }
    }
} as const;

export const ApiPixTransactionCancelRequestDTOSchema = {
    type: 'object',
    properties: {}
} as const;

export const ApiPixTransactionGetResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique identifier of the Pix transaction in Asaas',
            example: '35363f6e-93e2-11ec-b9d9-96f4053b1bd4',
            deprecated: false
        },
        endToEndIdentifier: {
            type: 'string',
            description: 'Pix transaction identifier at the Central Bank',
            example: 'E00416968202111161635q5bk0brYk2C',
            deprecated: false
        },
        finality: {
            '$ref': '#/components/schemas/ApiPixTransactionGetResponsePixTransactionCashValueFinality'
        },
        value: {
            type: 'number',
            description: 'Transaction or Withdrawal Value',
            example: 10,
            deprecated: false
        },
        changeValue: {
            type: 'number',
            description: 'Change value',
            deprecated: false,
            example: null
        },
        refundedValue: {
            type: 'number',
            description: 'Value reversed',
            example: 0,
            deprecated: false
        },
        effectiveDate: {
            type: 'string',
            description: 'Transaction date',
            format: 'date-time',
            example: '2022-01-13 10:49:59',
            deprecated: false
        },
        scheduledDate: {
            type: 'string',
            description: 'Schedule date',
            format: 'date',
            example: '2022-10-18',
            deprecated: false
        },
        status: {
            '$ref': '#/components/schemas/ApiPixTransactionGetResponsePixTransactionStatus'
        },
        type: {
            '$ref': '#/components/schemas/ApiPixTransactionGetResponsePixTransactionType'
        },
        originType: {
            '$ref': '#/components/schemas/ApiPixTransactionGetResponsePixTransactionOriginType'
        },
        conciliationIdentifier: {
            type: 'string',
            description: 'QrCode identifier linked to the transaction',
            example: 'dcabae5bbfb6nffbb87c693883656483',
            deprecated: false
        },
        description: {
            type: 'string',
            description: 'Description about the transaction',
            deprecated: false,
            example: null
        },
        transactionReceiptUrl: {
            type: 'string',
            description: 'Proof of transaction will be available after the transaction is confirmed.',
            deprecated: false,
            example: null
        },
        refusalReason: {
            type: 'string',
            description: 'Reason why the transaction was declined',
            deprecated: false,
            example: null
        },
        canBeCanceled: {
            type: 'boolean',
            description: 'Indicates whether the transaction can be canceled',
            example: true,
            deprecated: false
        },
        originalTransaction: {
            '$ref': '#/components/schemas/ApiPixOriginalTransactionResponseDTO'
        },
        externalAccount: {
            '$ref': '#/components/schemas/ApiPixTransactionExternalAccountResponseDTO'
        },
        qrCode: {
            '$ref': '#/components/schemas/ApiPixTransactionQrCodeResponseDTO'
        },
        payment: {
            type: 'string',
            description: 'Unique billing identifier',
            example: 'pay_0491859546906926',
            deprecated: false
        },
        canBeRefunded: {
            type: 'boolean',
            description: 'Indicates whether the transaction can be refunded',
            example: true,
            deprecated: false
        },
        refundDisabledReason: {
            type: 'string',
            description: 'Reason why the chargeback was disabled',
            deprecated: false,
            example: null
        },
        chargedFeeValue: {
            type: 'number',
            description: 'Debit or credit fee for the transaction',
            example: 0.99,
            deprecated: false
        },
        dateCreated: {
            type: 'string',
            description: 'Transaction creation date',
            format: 'date-time',
            example: '023-02-14 10:42:55',
            deprecated: false
        },
        addressKey: {
            type: 'string',
            description: 'Pix key when the transaction is a credit',
            deprecated: false,
            example: null
        },
        addressKeyType: {
            '$ref': '#/components/schemas/ApiPixTransactionGetResponsePixAddressKeyType'
        },
        transferId: {
            type: 'string',
            description: 'Transfer identifier',
            deprecated: false,
            example: null
        },
        externalReference: {
            type: 'string',
            description: 'Free search field',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiPixTransactionGetResponsePixTransactionCashValueFinalitySchema = {
    type: 'string',
    description: 'Used to indicate whether it is a Withdrawal or Change',
    example: 'WITHDRAWAL',
    deprecated: false,
    enum: ['WITHDRAWAL', 'CHANGE']
} as const;

export const ApiPixTransactionGetResponsePixTransactionStatusSchema = {
    type: 'string',
    description: 'Transaction status',
    example: 'SCHEDULED',
    deprecated: false,
    enum: ['AWAITING_BALANCE_VALIDATION', 'AWAITING_INSTANT_PAYMENT_ACCOUNT_BALANCE', 'AWAITING_CRITICAL_ACTION_AUTHORIZATION', 'AWAITING_CHECKOUT_RISK_ANALYSIS_REQUEST', 'AWAITING_CASH_IN_RISK_ANALYSIS_REQUEST', 'SCHEDULED', 'AWAITING_REQUEST', 'REQUESTED', 'DONE', 'REFUSED', 'CANCELLED']
} as const;

export const ApiPixTransactionGetResponsePixTransactionTypeSchema = {
    type: 'string',
    description: 'Transaction type',
    example: 'DEBIT',
    deprecated: false,
    enum: ['DEBIT', 'CREDIT', 'CREDIT_REFUND', 'DEBIT_REFUND', 'DEBIT_REFUND_CANCELLATION']
} as const;

export const ApiPixTransactionGetResponsePixTransactionOriginTypeSchema = {
    type: 'string',
    description: 'Indicates the origin of the transaction',
    example: 'DYNAMIC_QRCODE',
    deprecated: false,
    enum: ['MANUAL', 'ADDRESS_KEY', 'STATIC_QRCODE', 'DYNAMIC_QRCODE', 'PAYMENT_INITIATION_SERVICE']
} as const;

export const ApiPixOriginalTransactionResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique transaction identifier',
            deprecated: false,
            example: null
        },
        endToEndIdentifier: {
            type: 'string',
            description: 'Unique identifier of the Pix transaction at the Central Bank',
            deprecated: false,
            example: null
        },
        value: {
            type: 'number',
            description: 'Original transaction value',
            deprecated: false,
            example: null
        },
        effectiveDate: {
            type: 'string',
            description: 'Transaction date',
            format: 'date',
            deprecated: false,
            example: null
        }
    },
    description: 'Original transaction information if a chargeback has occurred',
    deprecated: false
} as const;

export const ApiPixTransactionExternalAccountResponseDTOSchema = {
    type: 'object',
    properties: {
        ispb: {
            type: 'string',
            description: 'Payment Institution Identifier',
            example: '416968',
            deprecated: false
        },
        ispbName: {
            type: 'string',
            description: 'Name of Payment Institution',
            example: 'Example Bank S.A',
            deprecated: false
        },
        name: {
            type: 'string',
            description: 'Receiver name',
            example: 'John Doe',
            deprecated: false
        },
        cpfCnpj: {
            type: 'string',
            description: 'CPF or CNPJ of the recipient',
            example: '***.456.789-**',
            deprecated: false
        },
        addressKey: {
            type: 'string',
            description: 'Pix Key',
            example: '12345678910',
            deprecated: false
        },
        addressKeyType: {
            '$ref': '#/components/schemas/ApiPixTransactionExternalAccountResponsePixAddressKeyType'
        }
    },
    description: 'Information about the recipient',
    deprecated: false
} as const;

export const ApiPixTransactionExternalAccountResponsePixAddressKeyTypeSchema = {
    type: 'string',
    description: 'Pix key type',
    example: 'CPF',
    deprecated: false,
    enum: ['CPF', 'CNPJ', 'EMAIL', 'PHONE', 'EVP']
} as const;

export const ApiPixTransactionQrCodeResponseDTOSchema = {
    type: 'object',
    properties: {
        payer: {
            '$ref': '#/components/schemas/ApiPixTransactionQrCodePayerResponseDTO'
        },
        conciliationIdentifier: {
            type: 'string',
            description: 'Unique Pix reconciliation identifier with Asaas',
            example: 'dcabae5bbfb6nffbb87c693883656483',
            deprecated: false
        },
        originalValue: {
            type: 'number',
            description: 'Original transaction value',
            example: 99,
            deprecated: false
        },
        dueDate: {
            type: 'string',
            description: 'Due date',
            format: 'date',
            example: '2030-02-05',
            deprecated: false
        },
        interest: {
            type: 'number',
            description: 'Interest value',
            example: 1,
            deprecated: false
        },
        fine: {
            type: 'number',
            description: 'Fine value',
            example: 3,
            deprecated: false
        },
        discount: {
            type: 'number',
            description: 'Discount amount',
            example: 5,
            deprecated: false
        },
        expirationDate: {
            type: 'string',
            description: 'Expiration date',
            format: 'date-time',
            example: '2030-02-10 11:00:00',
            deprecated: false
        }
    },
    description: 'Information about QrCode',
    deprecated: false
} as const;

export const ApiPixTransactionGetResponsePixAddressKeyTypeSchema = {
    type: 'string',
    description: 'Pix key type',
    example: 'CPF',
    deprecated: false,
    enum: ['CPF', 'CNPJ', 'EMAIL', 'PHONE', 'EVP']
} as const;

export const ApiPixTransactionSaveRequestDTOSchema = {
    required: ['qrCode', 'value'],
    type: 'object',
    properties: {
        qrCode: {
            '$ref': '#/components/schemas/ApiPixTransactionQrCodeSaveRequestDTO'
        },
        value: {
            required: ['value'],
            type: 'number',
            description: 'Value to be paid',
            example: 100,
            deprecated: false
        },
        description: {
            type: 'string',
            description: 'Payment Description',
            example: 'Barbecue',
            deprecated: false
        },
        scheduleDate: {
            type: 'string',
            description: 'Used to schedule payment',
            format: 'date',
            example: '2022-03-15',
            deprecated: false
        }
    }
} as const;

export const ApiPixTransactionQrCodeSaveRequestDTOSchema = {
    type: 'object',
    properties: {
        payload: {
            required: ['payload'],
            type: 'string',
            description: 'QRCode payload',
            deprecated: false,
            example: null
        },
        changeValue: {
            type: 'number',
            description: 'Change amount (for QRCode Change)',
            deprecated: false,
            example: null
        }
    },
    description: 'QRCode payload for payment',
    deprecated: false
} as const;

export const ApiPixTransactionListResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiPixTransactionGetResponseDTO'
            }
        }
    }
} as const;

export const ApiPixTransactionListRequestPixTransactionStatusSchema = {
    type: 'string',
    description: 'Filter by transaction status',
    example: 'AWAITING_BALANCE_VALIDATION',
    deprecated: false,
    enum: ['AWAITING_BALANCE_VALIDATION', 'AWAITING_INSTANT_PAYMENT_ACCOUNT_BALANCE', 'AWAITING_CRITICAL_ACTION_AUTHORIZATION', 'AWAITING_CHECKOUT_RISK_ANALYSIS_REQUEST', 'AWAITING_CASH_IN_RISK_ANALYSIS_REQUEST', 'SCHEDULED', 'AWAITING_REQUEST', 'REQUESTED', 'DONE', 'REFUSED', 'CANCELLED']
} as const;

export const ApiPixTransactionListRequestPixTransactionTypeSchema = {
    type: 'string',
    description: 'Filter by transaction type',
    example: 'DEBIT',
    deprecated: false,
    enum: ['DEBIT', 'CREDIT', 'CREDIT_REFUND', 'DEBIT_REFUND', 'DEBIT_REFUND_CANCELLATION']
} as const;

export const ApiPixTransactionRecurringCheckoutScheduleCancelItemRequestDTOSchema = {
    type: 'object',
    properties: {}
} as const;

export const ApiPixTransactionRecurringCheckoutScheduleGetItemResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique recurrence item identifier in Asaas',
            example: '71ae9d73-468f-4d04-8b87-a541128f9c46',
            deprecated: false
        },
        status: {
            '$ref': '#/components/schemas/ApiPixTransactionRecurringCheckoutScheduleGetItemResponseRecurringCheckoutSchedulePixItemStatus'
        },
        scheduledDate: {
            type: 'string',
            description: 'Recurrence item scheduled date',
            format: 'date',
            example: '2024-10-23',
            deprecated: false
        },
        canBeCancelled: {
            type: 'boolean',
            description: 'Whether the recurrence item can be cancelled',
            example: true,
            deprecated: false
        },
        recurrenceNumber: {
            type: 'integer',
            description: 'Recurrence number',
            format: 'int32',
            example: 1,
            deprecated: false
        },
        quantity: {
            type: 'integer',
            description: 'Number of repetitions',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        value: {
            type: 'number',
            description: 'Recurrence value',
            example: 0.02,
            deprecated: false
        },
        refusalReasonDescription: {
            type: 'string',
            description: 'Recurrence item refusal reason',
            deprecated: false,
            example: null
        },
        externalAccount: {
            '$ref': '#/components/schemas/ApiPixTransactionRecurringCheckoutScheduleExternalAccountDTO'
        }
    }
} as const;

export const ApiPixTransactionRecurringCheckoutScheduleGetItemResponseRecurringCheckoutSchedulePixItemStatusSchema = {
    type: 'string',
    description: 'Recurrence item status',
    example: 'PENDING',
    deprecated: false,
    enum: ['PENDING', 'CANCELLED', 'REFUSED', 'DONE']
} as const;

export const ApiPixTransactionRecurringCheckoutScheduleExternalAccountDTOSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'Receiver name',
            example: 'John Doe',
            deprecated: false
        },
        financialInstitutionName: {
            type: 'string',
            description: 'Payment institution name',
            example: 'Example bank S.A',
            deprecated: false
        },
        cpfCnpj: {
            type: 'string',
            description: 'Receiver CPF or CNPJ',
            example: '***.456.789-**',
            deprecated: false
        },
        pixKey: {
            type: 'string',
            description: 'Receiver Pix key',
            example: '***.456.789-**',
            deprecated: false
        }
    },
    description: 'Receiver information',
    deprecated: false
} as const;

export const ApiPixTransactionRecurringCheckoutSchedulePathIdRequestDTOSchema = {
    type: 'object',
    properties: {}
} as const;

export const ApiPixTransactionRecurringCheckoutScheduleGetResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique recurrence identifier in Asaas',
            example: '35363f6e-93e2-11ec-b9d9-96f4053b1bd4',
            deprecated: false
        },
        status: {
            '$ref': '#/components/schemas/ApiPixTransactionRecurringCheckoutScheduleGetResponseRecurringCheckoutScheduleStatus'
        },
        origin: {
            '$ref': '#/components/schemas/ApiPixTransactionRecurringCheckoutScheduleGetResponseRecurringCheckoutScheduleOrigin'
        },
        value: {
            type: 'number',
            description: 'Recurrence value',
            example: 0.02,
            deprecated: false
        },
        frequency: {
            '$ref': '#/components/schemas/ApiPixTransactionRecurringCheckoutScheduleGetResponseRecurringCheckoutScheduleFrequency'
        },
        quantity: {
            type: 'integer',
            description: 'Number of repetitions',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        startDate: {
            type: 'string',
            description: 'Recurrence start date',
            format: 'date',
            example: '2024-09-18',
            deprecated: false
        },
        finishDate: {
            type: 'string',
            description: 'Recurrence finish date',
            format: 'date',
            example: '2024-09-25',
            deprecated: false
        },
        canBeCancelled: {
            type: 'boolean',
            description: 'Whether the recurrence can be cancelled',
            example: true,
            deprecated: false
        },
        externalAccount: {
            '$ref': '#/components/schemas/ApiPixTransactionRecurringCheckoutScheduleExternalAccountDTO'
        }
    }
} as const;

export const ApiPixTransactionRecurringCheckoutScheduleGetResponseRecurringCheckoutScheduleStatusSchema = {
    type: 'string',
    description: 'Recurrence status',
    example: 'PENDING',
    deprecated: false,
    enum: ['AWAITING_CRITICAL_ACTION_AUTHORIZATION', 'PENDING', 'SCHEDULED', 'CANCELLED', 'DONE']
} as const;

export const ApiPixTransactionRecurringCheckoutScheduleGetResponseRecurringCheckoutScheduleOriginSchema = {
    type: 'string',
    description: 'Indicates the origin of the recurrence',
    example: 'PIX',
    deprecated: false,
    enum: ['PIX']
} as const;

export const ApiPixTransactionRecurringCheckoutScheduleGetResponseRecurringCheckoutScheduleFrequencySchema = {
    type: 'string',
    description: 'Recurrence frequency',
    example: 'WEEKLY',
    deprecated: false,
    enum: ['WEEKLY', 'MONTHLY']
} as const;

export const ApiPixTransactionRecurringCheckoutScheduleListItemsResponseDTOSchema = {
    type: 'object',
    properties: {
        offset: {
            type: 'integer',
            description: 'List starting element',
            format: 'int64',
            example: 0,
            deprecated: false
        },
        limit: {
            maximum: 100,
            type: 'integer',
            description: 'Number of list elements (max: 100)',
            format: 'int64',
            example: 10,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiPixTransactionRecurringCheckoutScheduleGetItemResponseDTO'
            }
        }
    }
} as const;

export const ApiPixTransactionRecurringCheckoutScheduleListResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'list',
            deprecated: false
        },
        hasMore: {
            type: 'boolean',
            description: 'Indicates whether there is another page to be searched',
            example: false,
            deprecated: false
        },
        totalCount: {
            type: 'integer',
            description: 'Total number of items for the filters entered',
            format: 'int32',
            example: 2,
            deprecated: false
        },
        limit: {
            type: 'integer',
            description: 'Number of objects per page',
            format: 'int32',
            example: 10,
            deprecated: false
        },
        offset: {
            type: 'integer',
            description: 'Position of the object from which the page should be loaded',
            format: 'int32',
            example: 0,
            deprecated: false
        },
        data: {
            type: 'array',
            description: 'List of objects',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiPixTransactionRecurringCheckoutScheduleGetResponseDTO'
            }
        }
    }
} as const;

export const ApiPixTransactionRecurringCheckoutScheduleListRequestRecurringCheckoutScheduleStatusSchema = {
    type: 'string',
    description: 'Filter by recurrence status',
    example: 'AWAITING_CRITICAL_ACTION_AUTHORIZATION',
    deprecated: false,
    enum: ['AWAITING_CRITICAL_ACTION_AUTHORIZATION', 'PENDING', 'SCHEDULED', 'CANCELLED', 'DONE']
} as const;

export const ApiPaymentSaveWithCreditCardRequestDTOSchema = {
    required: ['customer', 'billingType', 'value', 'dueDate', 'remoteIp'],
    type: 'object',
    properties: {
        customer: {
            required: ['customer'],
            type: 'string',
            description: 'Unique customer identifier in Asaas',
            example: 'cus_G7Dvo4iphUNk',
            deprecated: false
        },
        billingType: {
            '$ref': '#/components/schemas/ApiPaymentSaveWithCreditCardRequestBillingType'
        },
        value: {
            required: ['value'],
            type: 'number',
            description: 'Payment amount',
            example: 129.9,
            deprecated: false
        },
        dueDate: {
            required: ['dueDate'],
            type: 'string',
            description: 'Payment due date',
            format: 'date',
            example: '2017-06-10',
            deprecated: false
        },
        description: {
            type: 'string',
            description: 'Payment description (max. 500 characters)',
            example: 'Pedido 056984',
            deprecated: false
        },
        daysAfterDueDateToRegistrationCancellation: {
            type: 'integer',
            description: 'Days after registration cancellation deadline (only for bank slip)',
            format: 'int32',
            example: 1,
            deprecated: false
        },
        externalReference: {
            type: 'string',
            description: 'Free search field',
            example: '056984',
            deprecated: false
        },
        installmentCount: {
            type: 'integer',
            description: 'Number of installments (only in the case of installment payment)',
            format: 'int32',
            deprecated: false,
            example: null
        },
        totalValue: {
            type: 'number',
            description: 'Enter the total amount of a charge that will be paid in installments (only in the case of an installment charge). If this field is sent, the installmentValue is not necessary, the calculation per installment will be automatic.',
            deprecated: false,
            example: null
        },
        installmentValue: {
            type: 'number',
            description: 'Value of each installment (only in the case of installment payment). Send this field if you want to define the value of each installment.',
            deprecated: false,
            example: null
        },
        discount: {
            '$ref': '#/components/schemas/ApiPaymentDiscountDTO'
        },
        interest: {
            '$ref': '#/components/schemas/ApiPaymentInterestRequestDTO'
        },
        fine: {
            '$ref': '#/components/schemas/ApiPaymentFineRequestDTO'
        },
        postalService: {
            type: 'boolean',
            description: 'Define whether the payment will be sent via post',
            example: false,
            deprecated: false
        },
        split: {
            type: 'array',
            description: 'Split Settings',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiPaymentSplitRequestDTO'
            }
        },
        callback: {
            '$ref': '#/components/schemas/ApiPaymentCallbackRequestDTO'
        },
        creditCard: {
            '$ref': '#/components/schemas/ApiCreditCardRequestDTO'
        },
        creditCardHolderInfo: {
            '$ref': '#/components/schemas/ApiCreditCardHolderInfoRequestDTO'
        },
        creditCardToken: {
            type: 'string',
            description: 'Credit card token for using the credit card tokenization functionality',
            deprecated: false,
            example: null
        },
        authorizeOnly: {
            type: 'boolean',
            description: 'Carry out only the Pre-Authorization of the payment',
            deprecated: false,
            example: null
        },
        remoteIp: {
            required: ['remoteIp'],
            type: 'string',
            description: "IP from where the customer is making the purchase. Your server's IP must not be entered.",
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiPaymentSaveWithCreditCardRequestBillingTypeSchema = {
    required: ['billingType'],
    type: 'string',
    description: 'Payment billing type',
    example: 'BOLETO',
    deprecated: false,
    enum: ['UNDEFINED', 'BOLETO', 'CREDIT_CARD', 'PIX']
} as const;

export const ApiPaymentLeanSaveWithCreditCardResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'payment',
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique payment identifier in Asaas',
            example: 'pay_080225913252',
            deprecated: false
        },
        dateCreated: {
            type: 'string',
            description: 'Payment creation date',
            format: 'date',
            example: '2017-03-10',
            deprecated: false
        },
        customerId: {
            type: 'string',
            description: 'Unique identifier of the customer to whom the payment belongs',
            example: 'cus_G7Dvo4iphUNk',
            deprecated: false
        },
        subscriptionId: {
            type: 'string',
            description: 'Unique subscription identifier (when recurring billing)',
            deprecated: false,
            example: null
        },
        installmentId: {
            type: 'string',
            description: 'Unique installment identifier (when billing in installments)',
            deprecated: false,
            example: null
        },
        paymentLinkId: {
            type: 'string',
            description: 'Unique identifier of the payments link to which the payment belongs',
            deprecated: false,
            example: null
        },
        value: {
            type: 'number',
            description: 'Payment amount',
            example: 129.9,
            deprecated: false
        },
        netValue: {
            type: 'number',
            description: 'Net value of the charge after discounting the Asaas fee',
            example: 124.9,
            deprecated: false
        },
        originalValue: {
            type: 'number',
            description: 'Original amount of charge (filled when paid with interest and fine)',
            deprecated: false,
            example: null
        },
        interestValue: {
            type: 'number',
            description: 'Calculated amount of interest and fine that must be paid after the charge is due',
            deprecated: false,
            example: null
        },
        description: {
            type: 'string',
            description: 'Description of the payment',
            example: 'Pedido 056984',
            deprecated: false
        },
        billingType: {
            '$ref': '#/components/schemas/ApiPaymentLeanSaveWithCreditCardResponseBillingType'
        },
        canBePaidAfterDueDate: {
            type: 'boolean',
            description: 'Informs whether the charge can be paid after the due date (Only for bank slip)',
            example: true,
            deprecated: false
        },
        confirmedDate: {
            type: 'string',
            description: 'Billing confirmation date',
            format: 'date',
            example: '2017-03-10',
            deprecated: false
        },
        pixTransactionId: {
            type: 'string',
            description: 'Unique identifier of the Pix transaction to which the payment belongs',
            deprecated: false,
            example: null
        },
        status: {
            '$ref': '#/components/schemas/ApiPaymentLeanSaveWithCreditCardResponsePaymentStatus'
        },
        dueDate: {
            type: 'string',
            description: 'Payment due date',
            format: 'date',
            example: '2017-06-10',
            deprecated: false
        },
        originalDueDate: {
            type: 'string',
            description: 'Original due date upon creation of the payment',
            format: 'date',
            example: '2017-06-10',
            deprecated: false
        },
        paymentDate: {
            type: 'string',
            description: 'Payment date on Asaas',
            format: 'date',
            deprecated: false,
            example: null
        },
        customerPaymentDate: {
            type: 'string',
            description: 'Date on which the customer paid the bank slip',
            format: 'date',
            deprecated: false,
            example: null
        },
        installmentNumber: {
            type: 'integer',
            description: 'Parcel number',
            format: 'int32',
            deprecated: false,
            example: null
        },
        externalReference: {
            type: 'string',
            description: 'Free search field',
            example: '056984',
            deprecated: false
        },
        deleted: {
            type: 'boolean',
            description: 'Determines if the payment has been removed',
            example: false,
            deprecated: false
        },
        anticipated: {
            type: 'boolean',
            description: 'Defines whether the charge was anticipated or is in the process of being anticipated',
            example: false,
            deprecated: false
        },
        anticipable: {
            type: 'boolean',
            description: 'Determines whether the charge is anticipated',
            example: false,
            deprecated: false
        },
        creditDate: {
            type: 'string',
            description: 'Billing Credit date',
            example: '2017-03-10',
            deprecated: false
        },
        transactionReceiptUrl: {
            type: 'string',
            description: 'URL of proof of confirmation, receipt, reversal or removal',
            deprecated: false,
            example: null
        },
        duplicatedPaymentId: {
            type: 'string',
            description: 'Duplicate billing identifier (if true)',
            deprecated: false,
            example: null
        },
        discount: {
            '$ref': '#/components/schemas/ApiPaymentDiscountDTO'
        },
        fine: {
            '$ref': '#/components/schemas/ApiPaymentFineResponseDTO'
        },
        interest: {
            '$ref': '#/components/schemas/ApiPaymentInterestResponseDTO'
        },
        postalService: {
            type: 'boolean',
            description: 'Define whether the payment will be sent via post',
            example: false,
            deprecated: false
        },
        creditCard: {
            '$ref': '#/components/schemas/ApiPaymentSaveWithCreditCardCreditCardDTO'
        }
    }
} as const;

export const ApiPaymentLeanSaveWithCreditCardResponseBillingTypeSchema = {
    type: 'string',
    description: 'Payment billing type',
    example: 'BOLETO',
    deprecated: false,
    enum: ['UNDEFINED', 'BOLETO', 'CREDIT_CARD', 'DEBIT_CARD', 'TRANSFER', 'DEPOSIT', 'PIX']
} as const;

export const ApiPaymentLeanSaveWithCreditCardResponsePaymentStatusSchema = {
    type: 'string',
    description: 'Payment status',
    example: 'PENDING',
    deprecated: false,
    enum: ['PENDING', 'RECEIVED', 'CONFIRMED', 'OVERDUE', 'REFUNDED', 'RECEIVED_IN_CASH', 'REFUND_REQUESTED', 'REFUND_IN_PROGRESS', 'CHARGEBACK_REQUESTED', 'CHARGEBACK_DISPUTE', 'AWAITING_CHARGEBACK_REVERSAL', 'DUNNING_REQUESTED', 'DUNNING_RECEIVED', 'AWAITING_RISK_ANALYSIS']
} as const;

export const ApiSubscriptionListPaymentsRequestPaymentStatusSchema = {
    type: 'string',
    description: 'Filter by payment status',
    example: 'PENDING',
    deprecated: false,
    enum: ['PENDING', 'RECEIVED', 'CONFIRMED', 'OVERDUE', 'REFUNDED', 'RECEIVED_IN_CASH', 'REFUND_REQUESTED', 'REFUND_IN_PROGRESS', 'CHARGEBACK_REQUESTED', 'CHARGEBACK_DISPUTE', 'AWAITING_CHARGEBACK_REVERSAL', 'DUNNING_REQUESTED', 'DUNNING_RECEIVED', 'AWAITING_RISK_ANALYSIS']
} as const;

export const ApiInstallmentSaveWithCreditCardRequestDTOSchema = {
    required: ['installmentCount', 'customer', 'value', 'billingType', 'dueDate', 'remoteIp'],
    type: 'object',
    properties: {
        installmentCount: {
            required: ['installmentCount'],
            type: 'integer',
            description: 'Number of installments',
            format: 'int32',
            example: 3,
            deprecated: false
        },
        customer: {
            required: ['customer'],
            type: 'string',
            description: 'Unique customer identifier in Asaas',
            example: 'cus_G7Dvo4iphUNk',
            deprecated: false
        },
        value: {
            required: ['value'],
            type: 'number',
            description: 'Value of each installment',
            example: 100,
            deprecated: false
        },
        totalValue: {
            type: 'number',
            description: 'Total installment amount',
            example: 150,
            deprecated: false
        },
        billingType: {
            '$ref': '#/components/schemas/ApiInstallmentSaveWithCreditCardRequestBillingType'
        },
        dueDate: {
            required: ['dueDate'],
            type: 'string',
            description: 'Due date of the first installment',
            format: 'date',
            example: '2025-07-08',
            deprecated: false
        },
        description: {
            type: 'string',
            description: 'Installment description (max. 500 characters)',
            example: 'Installment 08652',
            deprecated: false
        },
        postalService: {
            type: 'boolean',
            description: 'Define whether the payment will be sent via post',
            example: false,
            deprecated: false
        },
        daysAfterDueDateToRegistrationCancellation: {
            type: 'integer',
            description: 'Days after registration cancellation deadline (only for bank slip)',
            format: 'int32',
            example: 1,
            deprecated: false
        },
        paymentExternalReference: {
            type: 'string',
            description: 'Free search field',
            example: '056984',
            deprecated: false
        },
        discount: {
            '$ref': '#/components/schemas/ApiPaymentDiscountDTO'
        },
        interest: {
            '$ref': '#/components/schemas/ApiPaymentInterestRequestDTO'
        },
        fine: {
            '$ref': '#/components/schemas/ApiPaymentFineRequestDTO'
        },
        splits: {
            type: 'array',
            description: 'Split Settings',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiInstallmentSplitRequestDTO'
            }
        },
        creditCard: {
            '$ref': '#/components/schemas/ApiCreditCardRequestDTO'
        },
        creditCardHolderInfo: {
            '$ref': '#/components/schemas/ApiCreditCardHolderInfoRequestDTO'
        },
        creditCardToken: {
            type: 'string',
            description: 'Credit card token for using the credit card tokenization functionality. If informed, the fields creditCard and creditCardHolderInfo are not mandatory.',
            example: 'a75a1d98-c52d-4a6b-a413-71e00b193c99',
            deprecated: false
        },
        authorizeOnly: {
            type: 'boolean',
            description: 'Carry out only the Pre-Authorization of the installment',
            deprecated: false,
            example: null
        },
        remoteIp: {
            required: ['remoteIp'],
            type: 'string',
            description: "IP from where the customer is making the purchase. Your server's IP must not be entered.",
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiInstallmentSaveWithCreditCardRequestBillingTypeSchema = {
    required: ['billingType'],
    type: 'string',
    description: 'Payment billing type',
    example: 'BOLETO',
    deprecated: false,
    enum: ['UNDEFINED', 'BOLETO', 'CREDIT_CARD', 'PIX']
} as const;

export const ApiSubscriptionSaveWithCreditCardRequestDTOSchema = {
    required: ['customer', 'billingType', 'value', 'nextDueDate', 'cycle', 'remoteIp'],
    type: 'object',
    properties: {
        customer: {
            required: ['customer'],
            type: 'string',
            description: 'Unique customer identifier in Asaas',
            example: 'cus_0T1mdomVMi39',
            deprecated: false
        },
        billingType: {
            '$ref': '#/components/schemas/ApiSubscriptionSaveWithCreditCardRequestBillingType'
        },
        value: {
            required: ['value'],
            type: 'number',
            description: 'Subscription value',
            example: 19.9,
            deprecated: false
        },
        nextDueDate: {
            required: ['nextDueDate'],
            type: 'string',
            description: 'First payment due',
            format: 'date',
            example: '2017-05-15',
            deprecated: false
        },
        discount: {
            '$ref': '#/components/schemas/ApiPaymentDiscountDTO'
        },
        interest: {
            '$ref': '#/components/schemas/ApiPaymentInterestRequestDTO'
        },
        fine: {
            '$ref': '#/components/schemas/ApiPaymentFineRequestDTO'
        },
        cycle: {
            '$ref': '#/components/schemas/ApiSubscriptionSaveWithCreditCardRequestCycle'
        },
        description: {
            type: 'string',
            description: 'Subscription description (max. 500 characters)',
            example: 'Pro Plan Subscription',
            deprecated: false
        },
        endDate: {
            type: 'string',
            description: 'Deadline for payments to be due',
            format: 'date',
            deprecated: false,
            example: null
        },
        maxPayments: {
            type: 'integer',
            description: 'Maximum number of payments to be generated for this subscription',
            format: 'int32',
            deprecated: false,
            example: null
        },
        externalReference: {
            type: 'string',
            description: 'Subscription identifier on your system',
            deprecated: false,
            example: null
        },
        split: {
            type: 'array',
            description: 'Split information',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiSubscriptionSplitRequestDTO'
            }
        },
        callback: {
            '$ref': '#/components/schemas/ApiPaymentCallbackRequestDTO'
        },
        creditCard: {
            '$ref': '#/components/schemas/ApiCreditCardRequestDTO'
        },
        creditCardHolderInfo: {
            '$ref': '#/components/schemas/ApiCreditCardHolderInfoRequestDTO'
        },
        creditCardToken: {
            type: 'string',
            description: 'Credit card token for using the credit card tokenization functionality. If informed, the fields above are not mandatory.',
            example: 'a75a1d98-c52d-4a6b-a413-71e00b193c99',
            deprecated: false
        },
        remoteIp: {
            required: ['remoteIp'],
            type: 'string',
            description: "IP from where the customer is making the purchase. Your server's IP must not be entered.",
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiSubscriptionSaveWithCreditCardRequestBillingTypeSchema = {
    required: ['billingType'],
    type: 'string',
    description: 'Billing type',
    example: 'BOLETO',
    deprecated: false,
    enum: ['UNDEFINED', 'BOLETO', 'CREDIT_CARD', 'PIX']
} as const;

export const ApiSubscriptionSaveWithCreditCardRequestCycleSchema = {
    required: ['cycle'],
    type: 'string',
    description: 'Billing frequency',
    example: 'MONTHLY',
    deprecated: false,
    enum: ['WEEKLY', 'BIWEEKLY', 'MONTHLY', 'BIMONTHLY', 'QUARTERLY', 'SEMIANNUALLY', 'YEARLY']
} as const;

export const ApiSubscriptionSaveWithCreditCardResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'subscription',
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique subscription identifier in Asaas',
            example: 'sub_VXJBYgP2u0eO',
            deprecated: false
        },
        dateCreated: {
            type: 'string',
            description: 'Subscription creation date',
            format: 'date',
            example: '2017-03-17',
            deprecated: false
        },
        customer: {
            type: 'string',
            description: 'Unique customer identifier',
            example: 'cus_0T1mdomVMi39',
            deprecated: false
        },
        paymentLink: {
            type: 'string',
            description: 'Unique identifier of the payments link to which the subscription belongs',
            deprecated: false,
            example: null
        },
        billingType: {
            '$ref': '#/components/schemas/ApiSubscriptionSaveWithCreditCardResponseBillingType'
        },
        cycle: {
            '$ref': '#/components/schemas/ApiSubscriptionSaveWithCreditCardResponseCycle'
        },
        value: {
            type: 'number',
            description: 'Subscription value',
            example: 19.9,
            deprecated: false
        },
        nextDueDate: {
            type: 'string',
            description: 'Due date of the next payment to be generated',
            format: 'date',
            example: '2017-06-15',
            deprecated: false
        },
        endDate: {
            type: 'string',
            description: 'Deadline for payments to be due',
            format: 'date',
            example: '2018-06-15',
            deprecated: false
        },
        description: {
            type: 'string',
            description: 'Subscription description',
            example: 'Pro Plan Subscription',
            deprecated: false
        },
        status: {
            '$ref': '#/components/schemas/ApiSubscriptionSaveWithCreditCardResponseSubscriptionStatus'
        },
        discount: {
            '$ref': '#/components/schemas/ApiPaymentDiscountDTO'
        },
        fine: {
            '$ref': '#/components/schemas/ApiPaymentFineResponseDTO'
        },
        interest: {
            '$ref': '#/components/schemas/ApiPaymentInterestResponseDTO'
        },
        deleted: {
            type: 'boolean',
            description: 'Informs if the subscription has been removed',
            example: false,
            deprecated: false
        },
        maxPayments: {
            type: 'integer',
            description: 'Maximum number of payments to be generated for this subscription',
            format: 'int32',
            example: 12,
            deprecated: false
        },
        externalReference: {
            type: 'string',
            description: 'Subscription identifier on your system',
            deprecated: false,
            example: null
        },
        split: {
            type: 'array',
            description: 'Split information',
            deprecated: false,
            items: {
                '$ref': '#/components/schemas/ApiSubscriptionSplitResponseDTO'
            }
        },
        creditCard: {
            '$ref': '#/components/schemas/ApiPaymentSaveWithCreditCardCreditCardDTO'
        }
    }
} as const;

export const ApiSubscriptionSaveWithCreditCardResponseBillingTypeSchema = {
    type: 'string',
    description: 'Billing type',
    example: 'BOLETO',
    deprecated: false,
    enum: ['UNDEFINED', 'BOLETO', 'CREDIT_CARD', 'DEBIT_CARD', 'TRANSFER', 'DEPOSIT', 'PIX']
} as const;

export const ApiSubscriptionSaveWithCreditCardResponseCycleSchema = {
    type: 'string',
    description: 'Billing frequency',
    example: 'MONTHLY',
    deprecated: false,
    enum: ['WEEKLY', 'BIWEEKLY', 'MONTHLY', 'BIMONTHLY', 'QUARTERLY', 'SEMIANNUALLY', 'YEARLY']
} as const;

export const ApiSubscriptionSaveWithCreditCardResponseSubscriptionStatusSchema = {
    type: 'string',
    description: 'Subscription status',
    example: 'ACTIVE',
    deprecated: false,
    enum: ['ACTIVE', 'EXPIRED', 'INACTIVE']
} as const;

export const ApiTransferSaveInternalTransferRequestDTOSchema = {
    required: ['value', 'walletId'],
    type: 'object',
    properties: {
        value: {
            required: ['value'],
            type: 'number',
            description: 'Amount to be transferred',
            example: 1000,
            deprecated: false
        },
        walletId: {
            required: ['walletId'],
            type: 'string',
            description: 'WalletId of the target account',
            example: '021c712-d963-4d86-a59d-031e7ac51a2e',
            deprecated: false
        },
        externalReference: {
            type: 'string',
            description: 'Transfer identifier in your system',
            deprecated: false,
            example: null
        }
    }
} as const;

export const ApiTransferSaveInternalTransferResponseDTOSchema = {
    type: 'object',
    properties: {
        object: {
            type: 'string',
            description: 'Object type',
            example: 'transfer',
            deprecated: false
        },
        id: {
            type: 'string',
            description: 'Unique transfer identifier in Asaas',
            example: '777eb7c8-b1a2-4356-8fd8-a1b0644b5282',
            deprecated: false
        },
        type: {
            type: 'string',
            description: 'Type of transfer',
            example: 'BANK_ACCOUNT',
            deprecated: false,
            enum: ['PIX', 'TED', 'INTERNAL']
        },
        dateCreated: {
            type: 'string',
            description: 'Transfer request date',
            format: 'date',
            example: '2019-05-02',
            deprecated: false
        },
        value: {
            type: 'number',
            description: 'Transfer amount',
            example: 1000,
            deprecated: false
        },
        netValue: {
            type: 'number',
            description: 'Net value minus transfer fee',
            example: 0,
            deprecated: false
        },
        status: {
            '$ref': '#/components/schemas/ApiTransferSaveInternalTransferResponseTransferStatus'
        },
        transferFee: {
            type: 'number',
            description: 'Transfer rate',
            example: 0,
            deprecated: false
        },
        effectiveDate: {
            type: 'string',
            description: 'Effective date',
            format: 'date',
            example: '2019-05-02',
            deprecated: false
        },
        scheduleDate: {
            type: 'string',
            description: 'Schedule date',
            format: 'date',
            example: '2019-05-02',
            deprecated: false
        },
        endToEndIdentifier: {
            type: 'string',
            description: 'Unique identifier of the Pix transaction at the Central Bank',
            deprecated: false,
            example: null
        },
        authorized: {
            type: 'boolean',
            description: `\`false\` when awaiting authorization via SMS Token`,
            example: true,
            deprecated: false
        },
        failReason: {
            type: 'string',
            description: 'Reason for transfer failure',
            deprecated: false,
            example: null
        },
        externalReference: {
            type: 'string',
            description: 'Transfer identifier in your system',
            deprecated: false,
            example: null
        },
        transactionReceiptUrl: {
            type: 'string',
            description: 'Proof of transfer will be available after the transfer is confirmed',
            deprecated: false,
            example: null
        },
        operationType: {
            '$ref': '#/components/schemas/ApiTransferSaveInternalTransferResponseTransferType'
        },
        description: {
            type: 'string',
            description: 'Transfer description',
            deprecated: false,
            example: null
        },
        recurring: {
            type: 'string',
            description: 'Unique recurrence identifier in Asaas',
            deprecated: false,
            example: null
        },
        walletId: {
            type: 'string',
            description: 'Unique wallet identifier to split charges or transfer between Asaas accounts',
            deprecated: false,
            example: null
        },
        account: {
            '$ref': '#/components/schemas/ApiTransferSaveInternalTransferAccountDTO'
        }
    }
} as const;

export const ApiTransferSaveInternalTransferResponseTransferStatusSchema = {
    type: 'string',
    description: 'Transfer status',
    example: 'PENDING',
    deprecated: false,
    enum: ['PENDING', 'BANK_PROCESSING', 'DONE', 'CANCELLED', 'FAILED']
} as const;

export const ApiTransferSaveInternalTransferResponseTransferTypeSchema = {
    type: 'string',
    description: 'Transfer method',
    example: 'TED',
    deprecated: false,
    enum: ['PIX', 'TED', 'INTERNAL']
} as const;

export const ApiTransferSaveInternalTransferAccountDTOSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'Target account name',
            example: 'John Doe',
            deprecated: false
        },
        cpfCnpj: {
            type: 'string',
            description: 'CPF or CNPJ of the destination account',
            example: '***.143.689-**',
            deprecated: false
        },
        agency: {
            type: 'string',
            description: 'Target account branch code',
            example: '0001',
            deprecated: false
        },
        account: {
            type: 'string',
            description: 'Target account number',
            example: '2087',
            deprecated: false
        },
        accountDigit: {
            type: 'string',
            description: 'Target account digit',
            example: '2',
            deprecated: false
        }
    },
    description: 'Target account basic information',
    deprecated: false
} as const;

export const ApiInstallmentListPaymentsRequestPaymentStatusSchema = {
    type: 'string',
    description: 'Filter by payment status',
    example: 'PENDING',
    deprecated: false,
    enum: ['PENDING', 'RECEIVED', 'CONFIRMED', 'OVERDUE', 'REFUNDED', 'RECEIVED_IN_CASH', 'REFUND_REQUESTED', 'REFUND_IN_PROGRESS', 'CHARGEBACK_REQUESTED', 'CHARGEBACK_DISPUTE', 'AWAITING_CHARGEBACK_REVERSAL', 'DUNNING_REQUESTED', 'DUNNING_RECEIVED', 'AWAITING_RISK_ANALYSIS']
} as const;